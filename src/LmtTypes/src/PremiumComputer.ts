/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type URateParamStruct = {
  pivotRate: PromiseOrValue<BigNumberish>;
  slope1: PromiseOrValue<BigNumberish>;
  intercept1: PromiseOrValue<BigNumberish>;
  slope2: PromiseOrValue<BigNumberish>;
  intercept2: PromiseOrValue<BigNumberish>;
};

export type URateParamStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  pivotRate: BigNumber;
  slope1: BigNumber;
  intercept1: BigNumber;
  slope2: BigNumber;
  intercept2: BigNumber;
};

export type LiquidityLoanStruct = {
  tick: PromiseOrValue<BigNumberish>;
  liquidity: PromiseOrValue<BigNumberish>;
  premium: PromiseOrValue<BigNumberish>;
  Urate: PromiseOrValue<BigNumberish>;
  feeGrowthInside0LastX128: PromiseOrValue<BigNumberish>;
  feeGrowthInside1LastX128: PromiseOrValue<BigNumberish>;
  lastGrowth: PromiseOrValue<BigNumberish>;
};

export type LiquidityLoanStructOutput = [
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  tick: number;
  liquidity: BigNumber;
  premium: BigNumber;
  Urate: BigNumber;
  feeGrowthInside0LastX128: BigNumber;
  feeGrowthInside1LastX128: BigNumber;
  lastGrowth: BigNumber;
};

export interface PremiumComputerInterface extends utils.Interface {
  functions: {
    "computePremium(address,address,bool,int24,(uint256,uint256,uint256,uint256,uint256),(int24,uint128,uint256,uint256,uint256,uint256,uint256)[])": FunctionFragment;
    "getInitFeeGrowthInside(address,int24,(int24,uint128,uint256,uint256,uint256,uint256,uint256)[])": FunctionFragment;
    "getInterestRate((uint256,uint256,uint256,uint256,uint256),uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "computePremium"
      | "getInitFeeGrowthInside"
      | "getInterestRate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "computePremium",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      URateParamStruct,
      LiquidityLoanStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitFeeGrowthInside",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      LiquidityLoanStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getInterestRate",
    values: [URateParamStruct, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "computePremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitFeeGrowthInside",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterestRate",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PremiumComputer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PremiumComputerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    computePremium(
      pool: PromiseOrValue<string>,
      poolManager: PromiseOrValue<string>,
      borrowToken0: PromiseOrValue<boolean>,
      tickDiscretization: PromiseOrValue<BigNumberish>,
      param: URateParamStruct,
      borrowInfo: LiquidityLoanStruct[],
      overrides?: CallOverrides
    ): Promise<[LiquidityLoanStructOutput[], BigNumber, BigNumber]>;

    getInitFeeGrowthInside(
      pool: PromiseOrValue<string>,
      tickDiscretization: PromiseOrValue<BigNumberish>,
      borrowInfo: LiquidityLoanStruct[],
      overrides?: CallOverrides
    ): Promise<[LiquidityLoanStructOutput[]]>;

    getInterestRate(
      param: URateParamStruct,
      uRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ratePerSecond: BigNumber }>;
  };

  computePremium(
    pool: PromiseOrValue<string>,
    poolManager: PromiseOrValue<string>,
    borrowToken0: PromiseOrValue<boolean>,
    tickDiscretization: PromiseOrValue<BigNumberish>,
    param: URateParamStruct,
    borrowInfo: LiquidityLoanStruct[],
    overrides?: CallOverrides
  ): Promise<[LiquidityLoanStructOutput[], BigNumber, BigNumber]>;

  getInitFeeGrowthInside(
    pool: PromiseOrValue<string>,
    tickDiscretization: PromiseOrValue<BigNumberish>,
    borrowInfo: LiquidityLoanStruct[],
    overrides?: CallOverrides
  ): Promise<LiquidityLoanStructOutput[]>;

  getInterestRate(
    param: URateParamStruct,
    uRate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    computePremium(
      pool: PromiseOrValue<string>,
      poolManager: PromiseOrValue<string>,
      borrowToken0: PromiseOrValue<boolean>,
      tickDiscretization: PromiseOrValue<BigNumberish>,
      param: URateParamStruct,
      borrowInfo: LiquidityLoanStruct[],
      overrides?: CallOverrides
    ): Promise<[LiquidityLoanStructOutput[], BigNumber, BigNumber]>;

    getInitFeeGrowthInside(
      pool: PromiseOrValue<string>,
      tickDiscretization: PromiseOrValue<BigNumberish>,
      borrowInfo: LiquidityLoanStruct[],
      overrides?: CallOverrides
    ): Promise<LiquidityLoanStructOutput[]>;

    getInterestRate(
      param: URateParamStruct,
      uRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    computePremium(
      pool: PromiseOrValue<string>,
      poolManager: PromiseOrValue<string>,
      borrowToken0: PromiseOrValue<boolean>,
      tickDiscretization: PromiseOrValue<BigNumberish>,
      param: URateParamStruct,
      borrowInfo: LiquidityLoanStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInitFeeGrowthInside(
      pool: PromiseOrValue<string>,
      tickDiscretization: PromiseOrValue<BigNumberish>,
      borrowInfo: LiquidityLoanStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInterestRate(
      param: URateParamStruct,
      uRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    computePremium(
      pool: PromiseOrValue<string>,
      poolManager: PromiseOrValue<string>,
      borrowToken0: PromiseOrValue<boolean>,
      tickDiscretization: PromiseOrValue<BigNumberish>,
      param: URateParamStruct,
      borrowInfo: LiquidityLoanStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitFeeGrowthInside(
      pool: PromiseOrValue<string>,
      tickDiscretization: PromiseOrValue<BigNumberish>,
      borrowInfo: LiquidityLoanStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInterestRate(
      param: URateParamStruct,
      uRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
