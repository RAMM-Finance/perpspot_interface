/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type PoolKeyStruct = {
  token0: PromiseOrValue<string>;
  token1: PromiseOrValue<string>;
  fee: PromiseOrValue<BigNumberish>;
};

export type PoolKeyStructOutput = [string, string, number] & {
  token0: string;
  token1: string;
  fee: number;
};

export type OrderStruct = {
  key: PoolKeyStruct;
  positionIsToken0: PromiseOrValue<boolean>;
  auctionDeadline: PromiseOrValue<BigNumberish>;
  auctionStartTime: PromiseOrValue<BigNumberish>;
  startOutput: PromiseOrValue<BigNumberish>;
  minOutput: PromiseOrValue<BigNumberish>;
  inputAmount: PromiseOrValue<BigNumberish>;
  decayRate: PromiseOrValue<BigNumberish>;
  margin: PromiseOrValue<BigNumberish>;
};

export type OrderStructOutput = [
  PoolKeyStructOutput,
  boolean,
  number,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  key: PoolKeyStructOutput;
  positionIsToken0: boolean;
  auctionDeadline: number;
  auctionStartTime: number;
  startOutput: BigNumber;
  minOutput: BigNumber;
  inputAmount: BigNumber;
  decayRate: BigNumber;
  margin: BigNumber;
};

export interface ExecutionerInterface extends utils.Interface {
  functions: {
    "executeAggregator(address)": FunctionFragment;
    "executeFiller(address,bool,uint256,uint256,address,address)": FunctionFragment;
    "executeFiller(address,bool,uint256,uint256,address,address,bytes32)": FunctionFragment;
    "executeUniswap(address,bool,int256,uint160,address,address)": FunctionFragment;
    "executeUniswapWithMinOutput(address,bool,int256,address,address,uint256)": FunctionFragment;
    "getOrder(bytes32)": FunctionFragment;
    "getRequiredOutput(((address,address,uint24),bool,uint32,uint32,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "orders(bytes32)": FunctionFragment;
    "submitOrder(address,bool,bool,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "executeAggregator"
      | "executeFiller(address,bool,uint256,uint256,address,address)"
      | "executeFiller(address,bool,uint256,uint256,address,address,bytes32)"
      | "executeUniswap"
      | "executeUniswapWithMinOutput"
      | "getOrder"
      | "getRequiredOutput"
      | "orders"
      | "submitOrder"
      | "uniswapV3SwapCallback"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "executeAggregator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeFiller(address,bool,uint256,uint256,address,address)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeFiller(address,bool,uint256,uint256,address,address,bytes32)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeUniswap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeUniswapWithMinOutput",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredOutput",
    values: [OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeFiller(address,bool,uint256,uint256,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeFiller(address,bool,uint256,uint256,address,address,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeUniswap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeUniswapWithMinOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Executioner extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExecutionerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    executeAggregator(
      swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "executeFiller(address,bool,uint256,uint256,address,address)"(
      filler: PromiseOrValue<string>,
      outIsToken0: PromiseOrValue<boolean>,
      outputAmount: PromiseOrValue<BigNumberish>,
      inputAmount: PromiseOrValue<BigNumberish>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "executeFiller(address,bool,uint256,uint256,address,address,bytes32)"(
      filler: PromiseOrValue<string>,
      outIsToken0: PromiseOrValue<boolean>,
      outputAmount: PromiseOrValue<BigNumberish>,
      inputAmount: PromiseOrValue<BigNumberish>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeUniswap(
      pool: PromiseOrValue<string>,
      down: PromiseOrValue<boolean>,
      swapIn: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeUniswapWithMinOutput(
      pool: PromiseOrValue<string>,
      down: PromiseOrValue<boolean>,
      swapIn: PromiseOrValue<BigNumberish>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      minOutput: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOrder(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[OrderStructOutput]>;

    getRequiredOutput(
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    orders(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        PoolKeyStructOutput,
        boolean,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        key: PoolKeyStructOutput;
        positionIsToken0: boolean;
        auctionDeadline: number;
        auctionStartTime: number;
        startOutput: BigNumber;
        minOutput: BigNumber;
        inputAmount: BigNumber;
        decayRate: BigNumber;
        margin: BigNumber;
      }
    >;

    submitOrder(
      pool: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      isAdd: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      startOutput: PromiseOrValue<BigNumberish>,
      minOutput: PromiseOrValue<BigNumberish>,
      inputAmount: PromiseOrValue<BigNumberish>,
      decayRate: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: PromiseOrValue<BigNumberish>,
      amount1Delta: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  executeAggregator(
    swapper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "executeFiller(address,bool,uint256,uint256,address,address)"(
    filler: PromiseOrValue<string>,
    outIsToken0: PromiseOrValue<boolean>,
    outputAmount: PromiseOrValue<BigNumberish>,
    inputAmount: PromiseOrValue<BigNumberish>,
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "executeFiller(address,bool,uint256,uint256,address,address,bytes32)"(
    filler: PromiseOrValue<string>,
    outIsToken0: PromiseOrValue<boolean>,
    outputAmount: PromiseOrValue<BigNumberish>,
    inputAmount: PromiseOrValue<BigNumberish>,
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    key: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeUniswap(
    pool: PromiseOrValue<string>,
    down: PromiseOrValue<boolean>,
    swapIn: PromiseOrValue<BigNumberish>,
    limit: PromiseOrValue<BigNumberish>,
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeUniswapWithMinOutput(
    pool: PromiseOrValue<string>,
    down: PromiseOrValue<boolean>,
    swapIn: PromiseOrValue<BigNumberish>,
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    minOutput: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOrder(
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<OrderStructOutput>;

  getRequiredOutput(
    order: OrderStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  orders(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      PoolKeyStructOutput,
      boolean,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      key: PoolKeyStructOutput;
      positionIsToken0: boolean;
      auctionDeadline: number;
      auctionStartTime: number;
      startOutput: BigNumber;
      minOutput: BigNumber;
      inputAmount: BigNumber;
      decayRate: BigNumber;
      margin: BigNumber;
    }
  >;

  submitOrder(
    pool: PromiseOrValue<string>,
    positionIsToken0: PromiseOrValue<boolean>,
    isAdd: PromiseOrValue<boolean>,
    deadline: PromiseOrValue<BigNumberish>,
    startOutput: PromiseOrValue<BigNumberish>,
    minOutput: PromiseOrValue<BigNumberish>,
    inputAmount: PromiseOrValue<BigNumberish>,
    decayRate: PromiseOrValue<BigNumberish>,
    margin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniswapV3SwapCallback(
    amount0Delta: PromiseOrValue<BigNumberish>,
    amount1Delta: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    executeAggregator(
      swapper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    "executeFiller(address,bool,uint256,uint256,address,address)"(
      filler: PromiseOrValue<string>,
      outIsToken0: PromiseOrValue<boolean>,
      outputAmount: PromiseOrValue<BigNumberish>,
      inputAmount: PromiseOrValue<BigNumberish>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    "executeFiller(address,bool,uint256,uint256,address,address,bytes32)"(
      filler: PromiseOrValue<string>,
      outIsToken0: PromiseOrValue<boolean>,
      outputAmount: PromiseOrValue<BigNumberish>,
      inputAmount: PromiseOrValue<BigNumberish>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    executeUniswap(
      pool: PromiseOrValue<string>,
      down: PromiseOrValue<boolean>,
      swapIn: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    executeUniswapWithMinOutput(
      pool: PromiseOrValue<string>,
      down: PromiseOrValue<boolean>,
      swapIn: PromiseOrValue<BigNumberish>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      minOutput: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    getOrder(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<OrderStructOutput>;

    getRequiredOutput(
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orders(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        PoolKeyStructOutput,
        boolean,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        key: PoolKeyStructOutput;
        positionIsToken0: boolean;
        auctionDeadline: number;
        auctionStartTime: number;
        startOutput: BigNumber;
        minOutput: BigNumber;
        inputAmount: BigNumber;
        decayRate: BigNumber;
        margin: BigNumber;
      }
    >;

    submitOrder(
      pool: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      isAdd: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      startOutput: PromiseOrValue<BigNumberish>,
      minOutput: PromiseOrValue<BigNumberish>,
      inputAmount: PromiseOrValue<BigNumberish>,
      decayRate: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV3SwapCallback(
      amount0Delta: PromiseOrValue<BigNumberish>,
      amount1Delta: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    executeAggregator(
      swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "executeFiller(address,bool,uint256,uint256,address,address)"(
      filler: PromiseOrValue<string>,
      outIsToken0: PromiseOrValue<boolean>,
      outputAmount: PromiseOrValue<BigNumberish>,
      inputAmount: PromiseOrValue<BigNumberish>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "executeFiller(address,bool,uint256,uint256,address,address,bytes32)"(
      filler: PromiseOrValue<string>,
      outIsToken0: PromiseOrValue<boolean>,
      outputAmount: PromiseOrValue<BigNumberish>,
      inputAmount: PromiseOrValue<BigNumberish>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeUniswap(
      pool: PromiseOrValue<string>,
      down: PromiseOrValue<boolean>,
      swapIn: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeUniswapWithMinOutput(
      pool: PromiseOrValue<string>,
      down: PromiseOrValue<boolean>,
      swapIn: PromiseOrValue<BigNumberish>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      minOutput: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOrder(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequiredOutput(
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orders(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitOrder(
      pool: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      isAdd: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      startOutput: PromiseOrValue<BigNumberish>,
      minOutput: PromiseOrValue<BigNumberish>,
      inputAmount: PromiseOrValue<BigNumberish>,
      decayRate: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniswapV3SwapCallback(
      amount0Delta: PromiseOrValue<BigNumberish>,
      amount1Delta: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    executeAggregator(
      swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "executeFiller(address,bool,uint256,uint256,address,address)"(
      filler: PromiseOrValue<string>,
      outIsToken0: PromiseOrValue<boolean>,
      outputAmount: PromiseOrValue<BigNumberish>,
      inputAmount: PromiseOrValue<BigNumberish>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "executeFiller(address,bool,uint256,uint256,address,address,bytes32)"(
      filler: PromiseOrValue<string>,
      outIsToken0: PromiseOrValue<boolean>,
      outputAmount: PromiseOrValue<BigNumberish>,
      inputAmount: PromiseOrValue<BigNumberish>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeUniswap(
      pool: PromiseOrValue<string>,
      down: PromiseOrValue<boolean>,
      swapIn: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeUniswapWithMinOutput(
      pool: PromiseOrValue<string>,
      down: PromiseOrValue<boolean>,
      swapIn: PromiseOrValue<BigNumberish>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      minOutput: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOrder(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequiredOutput(
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orders(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitOrder(
      pool: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      isAdd: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      startOutput: PromiseOrValue<BigNumberish>,
      minOutput: PromiseOrValue<BigNumberish>,
      inputAmount: PromiseOrValue<BigNumberish>,
      decayRate: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: PromiseOrValue<BigNumberish>,
      amount1Delta: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
