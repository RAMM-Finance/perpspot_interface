/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface BRPInterface extends utils.Interface {
  functions: {
    "addAllPoint(address,uint256,uint256,uint256)": FunctionFragment;
    "addAllPoints(address[],uint256[],uint256[],uint256[])": FunctionFragment;
    "claimRewards()": FunctionFragment;
    "claimableBoxes(address)": FunctionFragment;
    "getBlock()": FunctionFragment;
    "getData(address[])": FunctionFragment;
    "getLastUpdate()": FunctionFragment;
    "getUsers()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isListed(address)": FunctionFragment;
    "lastClaimedPoints(address)": FunctionFragment;
    "lastRecordedLpPoints(address)": FunctionFragment;
    "lastRecordedPoints(address)": FunctionFragment;
    "lastRecordedTradePoints(address)": FunctionFragment;
    "numBoxes(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pointPerUnlocks()": FunctionFragment;
    "pointsUsedForUnlocks(address)": FunctionFragment;
    "push(address,uint256)": FunctionFragment;
    "randomWithinRange(uint256,uint256)": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "setNumBoxes(address,uint256)": FunctionFragment;
    "setNumBoxesBulk(address[],uint256)": FunctionFragment;
    "setPointPerUnlocks(uint256)": FunctionFragment;
    "setRewardToken(address)": FunctionFragment;
    "setlastUpdate()": FunctionFragment;
    "tierToRewards(uint256)": FunctionFragment;
    "unlockBox()": FunctionFragment;
    "updateAllPoint(address,uint256,uint256,uint256)": FunctionFragment;
    "updateAllPoints(address[],uint256[],uint256[],uint256[])": FunctionFragment;
    "updatePoint(address,uint256)": FunctionFragment;
    "updatePoints(address[],uint256[])": FunctionFragment;
    "users(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAllPoint"
      | "addAllPoints"
      | "claimRewards"
      | "claimableBoxes"
      | "getBlock"
      | "getData"
      | "getLastUpdate"
      | "getUsers"
      | "initialize"
      | "isListed"
      | "lastClaimedPoints"
      | "lastRecordedLpPoints"
      | "lastRecordedPoints"
      | "lastRecordedTradePoints"
      | "numBoxes"
      | "owner"
      | "pointPerUnlocks"
      | "pointsUsedForUnlocks"
      | "push"
      | "randomWithinRange"
      | "rewardToken"
      | "setNumBoxes"
      | "setNumBoxesBulk"
      | "setPointPerUnlocks"
      | "setRewardToken"
      | "setlastUpdate"
      | "tierToRewards"
      | "unlockBox"
      | "updateAllPoint"
      | "updateAllPoints"
      | "updatePoint"
      | "updatePoints"
      | "users"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAllPoint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addAllPoints",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimableBoxes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getBlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getData",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getUsers", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isListed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastClaimedPoints",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRecordedLpPoints",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRecordedPoints",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRecordedTradePoints",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "numBoxes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pointPerUnlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pointsUsedForUnlocks",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "push",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "randomWithinRange",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setNumBoxes",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNumBoxesBulk",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPointPerUnlocks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setlastUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tierToRewards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "unlockBox", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAllPoint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllPoints",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoint",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoints",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "users",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAllPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAllPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableBoxes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUsers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isListed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastClaimedPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRecordedLpPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRecordedPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRecordedTradePoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numBoxes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pointPerUnlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pointsUsedForUnlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "push", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "randomWithinRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNumBoxes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNumBoxesBulk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPointPerUnlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setlastUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tierToRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlockBox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAllPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;

  events: {
    "AddedUser(address)": EventFragment;
    "BoxUnlocked(address,uint256,uint256)": EventFragment;
    "ClaimedRebates(address,address,uint256,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "UpdatedPoints()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedUser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoxUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimedRebates"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedPoints"): EventFragment;
}

export interface AddedUserEventObject {
  user: string;
}
export type AddedUserEvent = TypedEvent<[string], AddedUserEventObject>;

export type AddedUserEventFilter = TypedEventFilter<AddedUserEvent>;

export interface BoxUnlockedEventObject {
  who: string;
  claimableBoxes: BigNumber;
  randomNumber: BigNumber;
}
export type BoxUnlockedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BoxUnlockedEventObject
>;

export type BoxUnlockedEventFilter = TypedEventFilter<BoxUnlockedEvent>;

export interface ClaimedRebatesEventObject {
  claimer: string;
  rewardToken: string;
  pointDifference: BigNumber;
  tier: BigNumber;
  rewards: BigNumber;
}
export type ClaimedRebatesEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  ClaimedRebatesEventObject
>;

export type ClaimedRebatesEventFilter = TypedEventFilter<ClaimedRebatesEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface UpdatedPointsEventObject {}
export type UpdatedPointsEvent = TypedEvent<[], UpdatedPointsEventObject>;

export type UpdatedPointsEventFilter = TypedEventFilter<UpdatedPointsEvent>;

export interface BRP extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BRPInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAllPoint(
      user: PromiseOrValue<string>,
      tradePoint: PromiseOrValue<BigNumberish>,
      lpPoint: PromiseOrValue<BigNumberish>,
      referralPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addAllPoints(
      referrers: PromiseOrValue<string>[],
      tradePoints: PromiseOrValue<BigNumberish>[],
      lpPoints: PromiseOrValue<BigNumberish>[],
      referralPoints: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimableBoxes(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        claimableBoxes: BigNumber;
        totalPoints: BigNumber;
      }
    >;

    getBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    getData(
      users: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[], BigNumber[]]>;

    getLastUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUsers(overrides?: CallOverrides): Promise<[string[]]>;

    initialize(
      ref: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isListed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastClaimedPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastRecordedLpPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastRecordedPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastRecordedTradePoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    numBoxes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pointPerUnlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    pointsUsedForUnlocks(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    push(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    randomWithinRange(
      rangelow: PromiseOrValue<BigNumberish>,
      rangeHigh: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    setNumBoxes(
      who: PromiseOrValue<string>,
      boxes: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNumBoxesBulk(
      who: PromiseOrValue<string>[],
      boxes: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPointPerUnlocks(
      pointPerUnlocks_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardToken(
      rewardToken_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setlastUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tierToRewards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unlockBox(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAllPoint(
      user: PromiseOrValue<string>,
      tradePoint: PromiseOrValue<BigNumberish>,
      lpPoint: PromiseOrValue<BigNumberish>,
      referralPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAllPoints(
      referrers: PromiseOrValue<string>[],
      tradePoints: PromiseOrValue<BigNumberish>[],
      lpPoints: PromiseOrValue<BigNumberish>[],
      referralPoints: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePoint(
      referrer: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePoints(
      referrers: PromiseOrValue<string>[],
      points: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    users(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  addAllPoint(
    user: PromiseOrValue<string>,
    tradePoint: PromiseOrValue<BigNumberish>,
    lpPoint: PromiseOrValue<BigNumberish>,
    referralPoint: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addAllPoints(
    referrers: PromiseOrValue<string>[],
    tradePoints: PromiseOrValue<BigNumberish>[],
    lpPoints: PromiseOrValue<BigNumberish>[],
    referralPoints: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimableBoxes(
    who: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      claimableBoxes: BigNumber;
      totalPoints: BigNumber;
    }
  >;

  getBlock(overrides?: CallOverrides): Promise<BigNumber>;

  getData(
    users: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber[], BigNumber[]]>;

  getLastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  getUsers(overrides?: CallOverrides): Promise<string[]>;

  initialize(
    ref: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isListed(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastClaimedPoints(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastRecordedLpPoints(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastRecordedPoints(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastRecordedTradePoints(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  numBoxes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pointPerUnlocks(overrides?: CallOverrides): Promise<BigNumber>;

  pointsUsedForUnlocks(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  push(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  randomWithinRange(
    rangelow: PromiseOrValue<BigNumberish>,
    rangeHigh: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  setNumBoxes(
    who: PromiseOrValue<string>,
    boxes: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNumBoxesBulk(
    who: PromiseOrValue<string>[],
    boxes: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPointPerUnlocks(
    pointPerUnlocks_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardToken(
    rewardToken_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setlastUpdate(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tierToRewards(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unlockBox(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAllPoint(
    user: PromiseOrValue<string>,
    tradePoint: PromiseOrValue<BigNumberish>,
    lpPoint: PromiseOrValue<BigNumberish>,
    referralPoint: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAllPoints(
    referrers: PromiseOrValue<string>[],
    tradePoints: PromiseOrValue<BigNumberish>[],
    lpPoints: PromiseOrValue<BigNumberish>[],
    referralPoints: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePoint(
    referrer: PromiseOrValue<string>,
    point: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePoints(
    referrers: PromiseOrValue<string>[],
    points: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  users(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addAllPoint(
      user: PromiseOrValue<string>,
      tradePoint: PromiseOrValue<BigNumberish>,
      lpPoint: PromiseOrValue<BigNumberish>,
      referralPoint: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addAllPoints(
      referrers: PromiseOrValue<string>[],
      tradePoints: PromiseOrValue<BigNumberish>[],
      lpPoints: PromiseOrValue<BigNumberish>[],
      referralPoints: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewards(overrides?: CallOverrides): Promise<BigNumber>;

    claimableBoxes(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        claimableBoxes: BigNumber;
        totalPoints: BigNumber;
      }
    >;

    getBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getData(
      users: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[], BigNumber[]]>;

    getLastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    getUsers(overrides?: CallOverrides): Promise<string[]>;

    initialize(
      ref: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isListed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastClaimedPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRecordedLpPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRecordedPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRecordedTradePoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numBoxes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pointPerUnlocks(overrides?: CallOverrides): Promise<BigNumber>;

    pointsUsedForUnlocks(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    push(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    randomWithinRange(
      rangelow: PromiseOrValue<BigNumberish>,
      rangeHigh: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    setNumBoxes(
      who: PromiseOrValue<string>,
      boxes: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNumBoxesBulk(
      who: PromiseOrValue<string>[],
      boxes: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPointPerUnlocks(
      pointPerUnlocks_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardToken(
      rewardToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setlastUpdate(overrides?: CallOverrides): Promise<void>;

    tierToRewards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockBox(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    updateAllPoint(
      user: PromiseOrValue<string>,
      tradePoint: PromiseOrValue<BigNumberish>,
      lpPoint: PromiseOrValue<BigNumberish>,
      referralPoint: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAllPoints(
      referrers: PromiseOrValue<string>[],
      tradePoints: PromiseOrValue<BigNumberish>[],
      lpPoints: PromiseOrValue<BigNumberish>[],
      referralPoints: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updatePoint(
      referrer: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePoints(
      referrers: PromiseOrValue<string>[],
      points: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    users(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AddedUser(address)"(
      user?: PromiseOrValue<string> | null
    ): AddedUserEventFilter;
    AddedUser(user?: PromiseOrValue<string> | null): AddedUserEventFilter;

    "BoxUnlocked(address,uint256,uint256)"(
      who?: PromiseOrValue<string> | null,
      claimableBoxes?: null,
      randomNumber?: null
    ): BoxUnlockedEventFilter;
    BoxUnlocked(
      who?: PromiseOrValue<string> | null,
      claimableBoxes?: null,
      randomNumber?: null
    ): BoxUnlockedEventFilter;

    "ClaimedRebates(address,address,uint256,uint256,uint256)"(
      claimer?: PromiseOrValue<string> | null,
      rewardToken?: PromiseOrValue<string> | null,
      pointDifference?: null,
      tier?: null,
      rewards?: null
    ): ClaimedRebatesEventFilter;
    ClaimedRebates(
      claimer?: PromiseOrValue<string> | null,
      rewardToken?: PromiseOrValue<string> | null,
      pointDifference?: null,
      tier?: null,
      rewards?: null
    ): ClaimedRebatesEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "UpdatedPoints()"(): UpdatedPointsEventFilter;
    UpdatedPoints(): UpdatedPointsEventFilter;
  };

  estimateGas: {
    addAllPoint(
      user: PromiseOrValue<string>,
      tradePoint: PromiseOrValue<BigNumberish>,
      lpPoint: PromiseOrValue<BigNumberish>,
      referralPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addAllPoints(
      referrers: PromiseOrValue<string>[],
      tradePoints: PromiseOrValue<BigNumberish>[],
      lpPoints: PromiseOrValue<BigNumberish>[],
      referralPoints: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimableBoxes(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getData(
      users: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    getUsers(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      ref: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isListed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastClaimedPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRecordedLpPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRecordedPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRecordedTradePoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numBoxes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pointPerUnlocks(overrides?: CallOverrides): Promise<BigNumber>;

    pointsUsedForUnlocks(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    push(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    randomWithinRange(
      rangelow: PromiseOrValue<BigNumberish>,
      rangeHigh: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    setNumBoxes(
      who: PromiseOrValue<string>,
      boxes: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNumBoxesBulk(
      who: PromiseOrValue<string>[],
      boxes: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPointPerUnlocks(
      pointPerUnlocks_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardToken(
      rewardToken_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setlastUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tierToRewards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockBox(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAllPoint(
      user: PromiseOrValue<string>,
      tradePoint: PromiseOrValue<BigNumberish>,
      lpPoint: PromiseOrValue<BigNumberish>,
      referralPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAllPoints(
      referrers: PromiseOrValue<string>[],
      tradePoints: PromiseOrValue<BigNumberish>[],
      lpPoints: PromiseOrValue<BigNumberish>[],
      referralPoints: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePoint(
      referrer: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePoints(
      referrers: PromiseOrValue<string>[],
      points: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    users(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAllPoint(
      user: PromiseOrValue<string>,
      tradePoint: PromiseOrValue<BigNumberish>,
      lpPoint: PromiseOrValue<BigNumberish>,
      referralPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addAllPoints(
      referrers: PromiseOrValue<string>[],
      tradePoints: PromiseOrValue<BigNumberish>[],
      lpPoints: PromiseOrValue<BigNumberish>[],
      referralPoints: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimableBoxes(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getData(
      users: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      ref: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isListed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastClaimedPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRecordedLpPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRecordedPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRecordedTradePoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numBoxes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pointPerUnlocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pointsUsedForUnlocks(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    push(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    randomWithinRange(
      rangelow: PromiseOrValue<BigNumberish>,
      rangeHigh: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setNumBoxes(
      who: PromiseOrValue<string>,
      boxes: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNumBoxesBulk(
      who: PromiseOrValue<string>[],
      boxes: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPointPerUnlocks(
      pointPerUnlocks_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardToken(
      rewardToken_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setlastUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tierToRewards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockBox(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAllPoint(
      user: PromiseOrValue<string>,
      tradePoint: PromiseOrValue<BigNumberish>,
      lpPoint: PromiseOrValue<BigNumberish>,
      referralPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAllPoints(
      referrers: PromiseOrValue<string>[],
      tradePoints: PromiseOrValue<BigNumberish>[],
      lpPoints: PromiseOrValue<BigNumberish>[],
      referralPoints: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePoint(
      referrer: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePoints(
      referrers: PromiseOrValue<string>[],
      points: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    users(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
