/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type PoolKeyStruct = {
  token0: PromiseOrValue<string>;
  token1: PromiseOrValue<string>;
  fee: PromiseOrValue<BigNumberish>;
};

export type PoolKeyStructOutput = [string, string, number] & {
  token0: string;
  token1: string;
  fee: number;
};

export type LiquidityLoanStruct = {
  tick: PromiseOrValue<BigNumberish>;
  liquidity: PromiseOrValue<BigNumberish>;
  premium: PromiseOrValue<BigNumberish>;
  feeGrowthInside0LastX128: PromiseOrValue<BigNumberish>;
  feeGrowthInside1LastX128: PromiseOrValue<BigNumberish>;
  lastGrowth: PromiseOrValue<BigNumberish>;
};

export type LiquidityLoanStructOutput = [
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  tick: number;
  liquidity: BigNumber;
  premium: BigNumber;
  feeGrowthInside0LastX128: BigNumber;
  feeGrowthInside1LastX128: BigNumber;
  lastGrowth: BigNumber;
};

export type AddParamsStruct = {
  margin: PromiseOrValue<BigNumberish>;
  minOutput: PromiseOrValue<BigNumberish>;
  simulatedOutput: PromiseOrValue<BigNumberish>;
  borrowAmount: PromiseOrValue<BigNumberish>;
  positionIsToken0: PromiseOrValue<boolean>;
  executionOption: PromiseOrValue<BigNumberish>;
  trader: PromiseOrValue<string>;
  executionData: PromiseOrValue<BytesLike>;
  slippedTickMin: PromiseOrValue<BigNumberish>;
  slippedTickMax: PromiseOrValue<BigNumberish>;
  marginInPosToken: PromiseOrValue<boolean>;
};

export type AddParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  BigNumber,
  string,
  string,
  number,
  number,
  boolean
] & {
  margin: BigNumber;
  minOutput: BigNumber;
  simulatedOutput: BigNumber;
  borrowAmount: BigNumber;
  positionIsToken0: boolean;
  executionOption: BigNumber;
  trader: string;
  executionData: string;
  slippedTickMin: number;
  slippedTickMax: number;
  marginInPosToken: boolean;
};

export type ReduceParamStruct = {
  positionIsToken0: PromiseOrValue<boolean>;
  reducePercentage: PromiseOrValue<BigNumberish>;
  minOutput: PromiseOrValue<BigNumberish>;
  trader: PromiseOrValue<string>;
  executionOption: PromiseOrValue<BigNumberish>;
  executionData: PromiseOrValue<BytesLike>;
  slippedTickMin: PromiseOrValue<BigNumberish>;
  slippedTickMax: PromiseOrValue<BigNumberish>;
  reduceAmount: PromiseOrValue<BigNumberish>;
};

export type ReduceParamStructOutput = [
  boolean,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string,
  number,
  number,
  BigNumber
] & {
  positionIsToken0: boolean;
  reducePercentage: BigNumber;
  minOutput: BigNumber;
  trader: string;
  executionOption: BigNumber;
  executionData: string;
  slippedTickMin: number;
  slippedTickMax: number;
  reduceAmount: BigNumber;
};

export type ForceCloseParamsStruct = {
  trader: PromiseOrValue<string>;
  positionIsToken0: PromiseOrValue<boolean>;
  fillerPayAmount: PromiseOrValue<BigNumberish>;
  slippedTickMin: PromiseOrValue<BigNumberish>;
  slippedTickMax: PromiseOrValue<BigNumberish>;
};

export type ForceCloseParamsStructOutput = [
  string,
  boolean,
  BigNumber,
  number,
  number
] & {
  trader: string;
  positionIsToken0: boolean;
  fillerPayAmount: BigNumber;
  slippedTickMin: number;
  slippedTickMax: number;
};

export declare namespace Arbitrageur {
  export type FillerAddParamsStruct = {
    fillerOutput: PromiseOrValue<BigNumberish>;
    flashOption: PromiseOrValue<BigNumberish>;
    executionOption: PromiseOrValue<BigNumberish>;
    executionData: PromiseOrValue<BytesLike>;
  };

  export type FillerAddParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    fillerOutput: BigNumber;
    flashOption: BigNumber;
    executionOption: BigNumber;
    executionData: string;
  };

  export type FillAddOrderReturnStruct = {
    profit: PromiseOrValue<BigNumberish>;
    boughtFromOrderSold: PromiseOrValue<BigNumberish>;
    boughtFromOrder: PromiseOrValue<BigNumberish>;
  };

  export type FillAddOrderReturnStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    profit: BigNumber;
    boughtFromOrderSold: BigNumber;
    boughtFromOrder: BigNumber;
  };

  export type FillerReduceParamsStruct = {
    fillerOutput: PromiseOrValue<BigNumberish>;
    flashOption: PromiseOrValue<BigNumberish>;
    executionOption: PromiseOrValue<BigNumberish>;
    executionData: PromiseOrValue<BytesLike>;
  };

  export type FillerReduceParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    fillerOutput: BigNumber;
    flashOption: BigNumber;
    executionOption: BigNumber;
    executionData: string;
  };

  export type FillReduceOrderReturnStruct = {
    profit: PromiseOrValue<BigNumberish>;
    boughtFromOrderSold: PromiseOrValue<BigNumberish>;
    boughtFromOrder: PromiseOrValue<BigNumberish>;
  };

  export type FillReduceOrderReturnStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    profit: BigNumber;
    boughtFromOrderSold: BigNumber;
    boughtFromOrder: BigNumber;
  };

  export type ForceCloseReturnStruct = {
    profit: PromiseOrValue<BigNumberish>;
    fillerPayAmount: PromiseOrValue<BigNumberish>;
    boughtFromPositionSold: PromiseOrValue<BigNumberish>;
    boughtFromPosition: PromiseOrValue<BigNumberish>;
    amountReturned: PromiseOrValue<BigNumberish>;
  };

  export type ForceCloseReturnStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    profit: BigNumber;
    fillerPayAmount: BigNumber;
    boughtFromPositionSold: BigNumber;
    boughtFromPosition: BigNumber;
    amountReturned: BigNumber;
  };
}

export interface ArbitrageurInterface extends utils.Interface {
  functions: {
    "canForceClose(address,address,bool)": FunctionFragment;
    "canForceCloseTradePosition((address,address,uint24),address,bool)": FunctionFragment;
    "fillAddOrder((address,address,uint24),(int24,uint128,uint256,uint256,uint256,uint256)[],(uint256,uint256,uint256,uint256,bool,uint256,address,bytes,int24,int24,bool),(uint256,uint256,uint256,bytes))": FunctionFragment;
    "fillAddOrder_(address,(int24,uint128,uint256,uint256,uint256,uint256)[],(uint256,uint256,uint256,uint256,bool,uint256,address,bytes,int24,int24,bool),(uint256,uint256,uint256,bytes))": FunctionFragment;
    "fillReduceOrder((address,address,uint24),(bool,uint256,uint256,address,uint256,bytes,int24,int24,uint256),(uint256,uint256,uint256,bytes))": FunctionFragment;
    "fillReduceOrder_(address,(bool,uint256,uint256,address,uint256,bytes,int24,int24,uint256),(uint256,uint256,uint256,bytes))": FunctionFragment;
    "findSimulatedOutput(address,uint256,bool)": FunctionFragment;
    "forceClose((address,address,uint24),(address,bool,uint256,int24,int24),uint256,bytes,uint256)": FunctionFragment;
    "getRepayInfo((address,address,uint24),address,bool,uint256)": FunctionFragment;
    "getTokens(address)": FunctionFragment;
    "makeSwapAmount(address,address,bool,int256,int24,address,address)": FunctionFragment;
    "setNewContracts(address,address,address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "canForceClose"
      | "canForceCloseTradePosition"
      | "fillAddOrder"
      | "fillAddOrder_"
      | "fillReduceOrder"
      | "fillReduceOrder_"
      | "findSimulatedOutput"
      | "forceClose"
      | "getRepayInfo"
      | "getTokens"
      | "makeSwapAmount"
      | "setNewContracts"
      | "setOwner"
      | "uniswapV3SwapCallback"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canForceClose",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "canForceCloseTradePosition",
    values: [PoolKeyStruct, PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "fillAddOrder",
    values: [
      PoolKeyStruct,
      LiquidityLoanStruct[],
      AddParamsStruct,
      Arbitrageur.FillerAddParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillAddOrder_",
    values: [
      PromiseOrValue<string>,
      LiquidityLoanStruct[],
      AddParamsStruct,
      Arbitrageur.FillerAddParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillReduceOrder",
    values: [
      PoolKeyStruct,
      ReduceParamStruct,
      Arbitrageur.FillerReduceParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillReduceOrder_",
    values: [
      PromiseOrValue<string>,
      ReduceParamStruct,
      Arbitrageur.FillerReduceParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "findSimulatedOutput",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "forceClose",
    values: [
      PoolKeyStruct,
      ForceCloseParamsStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRepayInfo",
    values: [
      PoolKeyStruct,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "makeSwapAmount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewContracts",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "canForceClose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canForceCloseTradePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillAddOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillAddOrder_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillReduceOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillReduceOrder_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findSimulatedOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "forceClose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRepayInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeSwapAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;

  events: {
    "ForceClosedArbitraguer(address,bool,address,address,int256,int256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ForceClosedArbitraguer"): EventFragment;
}

export interface ForceClosedArbitraguerEventObject {
  trader: string;
  positionIsToken0: boolean;
  token0: string;
  token1: string;
  amount0: BigNumber;
  amount1: BigNumber;
  returnedAmount: BigNumber;
  returnedToken: string;
}
export type ForceClosedArbitraguerEvent = TypedEvent<
  [string, boolean, string, string, BigNumber, BigNumber, BigNumber, string],
  ForceClosedArbitraguerEventObject
>;

export type ForceClosedArbitraguerEventFilter =
  TypedEventFilter<ForceClosedArbitraguerEvent>;

export interface Arbitrageur extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ArbitrageurInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canForceClose(
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canForceCloseTradePosition(
      key: PoolKeyStruct,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    fillAddOrder(
      key: PoolKeyStruct,
      borrowInfo: LiquidityLoanStruct[],
      addParam: AddParamsStruct,
      param: Arbitrageur.FillerAddParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillAddOrder_(
      pool: PromiseOrValue<string>,
      borrowInfo: LiquidityLoanStruct[],
      addParam: AddParamsStruct,
      param: Arbitrageur.FillerAddParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillReduceOrder(
      key: PoolKeyStruct,
      reduceParam: ReduceParamStruct,
      param: Arbitrageur.FillerReduceParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillReduceOrder_(
      pool: PromiseOrValue<string>,
      reduceParam: ReduceParamStruct,
      param: Arbitrageur.FillerReduceParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    findSimulatedOutput(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forceClose(
      key: PoolKeyStruct,
      param: ForceCloseParamsStruct,
      executionOption: PromiseOrValue<BigNumberish>,
      executionData: PromiseOrValue<BytesLike>,
      flashOption: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRepayInfo(
      key: PoolKeyStruct,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      reduceAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amount0Required: BigNumber;
        amount1Required: BigNumber;
      }
    >;

    getTokens(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    makeSwapAmount(
      pool: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      down: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      curTick: PromiseOrValue<BigNumberish>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNewContracts(
      _factory: PromiseOrValue<string>,
      _poolManager: PromiseOrValue<string>,
      _marginFacility: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: PromiseOrValue<BigNumberish>,
      amount1Delta: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  canForceClose(
    pool: PromiseOrValue<string>,
    trader: PromiseOrValue<string>,
    positionIsToken0: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canForceCloseTradePosition(
    key: PoolKeyStruct,
    trader: PromiseOrValue<string>,
    positionIsToken0: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  fillAddOrder(
    key: PoolKeyStruct,
    borrowInfo: LiquidityLoanStruct[],
    addParam: AddParamsStruct,
    param: Arbitrageur.FillerAddParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillAddOrder_(
    pool: PromiseOrValue<string>,
    borrowInfo: LiquidityLoanStruct[],
    addParam: AddParamsStruct,
    param: Arbitrageur.FillerAddParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillReduceOrder(
    key: PoolKeyStruct,
    reduceParam: ReduceParamStruct,
    param: Arbitrageur.FillerReduceParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillReduceOrder_(
    pool: PromiseOrValue<string>,
    reduceParam: ReduceParamStruct,
    param: Arbitrageur.FillerReduceParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  findSimulatedOutput(
    pool: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    positionIsToken0: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forceClose(
    key: PoolKeyStruct,
    param: ForceCloseParamsStruct,
    executionOption: PromiseOrValue<BigNumberish>,
    executionData: PromiseOrValue<BytesLike>,
    flashOption: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRepayInfo(
    key: PoolKeyStruct,
    trader: PromiseOrValue<string>,
    positionIsToken0: PromiseOrValue<boolean>,
    reduceAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      amount0Required: BigNumber;
      amount1Required: BigNumber;
    }
  >;

  getTokens(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  makeSwapAmount(
    pool: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    down: PromiseOrValue<boolean>,
    amount: PromiseOrValue<BigNumberish>,
    curTick: PromiseOrValue<BigNumberish>,
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNewContracts(
    _factory: PromiseOrValue<string>,
    _poolManager: PromiseOrValue<string>,
    _marginFacility: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniswapV3SwapCallback(
    amount0Delta: PromiseOrValue<BigNumberish>,
    amount1Delta: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    canForceClose(
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canForceCloseTradePosition(
      key: PoolKeyStruct,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    fillAddOrder(
      key: PoolKeyStruct,
      borrowInfo: LiquidityLoanStruct[],
      addParam: AddParamsStruct,
      param: Arbitrageur.FillerAddParamsStruct,
      overrides?: CallOverrides
    ): Promise<Arbitrageur.FillAddOrderReturnStructOutput>;

    fillAddOrder_(
      pool: PromiseOrValue<string>,
      borrowInfo: LiquidityLoanStruct[],
      addParam: AddParamsStruct,
      param: Arbitrageur.FillerAddParamsStruct,
      overrides?: CallOverrides
    ): Promise<Arbitrageur.FillAddOrderReturnStructOutput>;

    fillReduceOrder(
      key: PoolKeyStruct,
      reduceParam: ReduceParamStruct,
      param: Arbitrageur.FillerReduceParamsStruct,
      overrides?: CallOverrides
    ): Promise<Arbitrageur.FillReduceOrderReturnStructOutput>;

    fillReduceOrder_(
      pool: PromiseOrValue<string>,
      reduceParam: ReduceParamStruct,
      param: Arbitrageur.FillerReduceParamsStruct,
      overrides?: CallOverrides
    ): Promise<Arbitrageur.FillReduceOrderReturnStructOutput>;

    findSimulatedOutput(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, number]>;

    forceClose(
      key: PoolKeyStruct,
      param: ForceCloseParamsStruct,
      executionOption: PromiseOrValue<BigNumberish>,
      executionData: PromiseOrValue<BytesLike>,
      flashOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Arbitrageur.ForceCloseReturnStructOutput>;

    getRepayInfo(
      key: PoolKeyStruct,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      reduceAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amount0Required: BigNumber;
        amount1Required: BigNumber;
      }
    >;

    getTokens(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    makeSwapAmount(
      pool: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      down: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      curTick: PromiseOrValue<BigNumberish>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    setNewContracts(
      _factory: PromiseOrValue<string>,
      _poolManager: PromiseOrValue<string>,
      _marginFacility: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV3SwapCallback(
      amount0Delta: PromiseOrValue<BigNumberish>,
      amount1Delta: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ForceClosedArbitraguer(address,bool,address,address,int256,int256,uint256,address)"(
      trader?: null,
      positionIsToken0?: null,
      token0?: null,
      token1?: null,
      amount0?: null,
      amount1?: null,
      returnedAmount?: null,
      returnedToken?: null
    ): ForceClosedArbitraguerEventFilter;
    ForceClosedArbitraguer(
      trader?: null,
      positionIsToken0?: null,
      token0?: null,
      token1?: null,
      amount0?: null,
      amount1?: null,
      returnedAmount?: null,
      returnedToken?: null
    ): ForceClosedArbitraguerEventFilter;
  };

  estimateGas: {
    canForceClose(
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canForceCloseTradePosition(
      key: PoolKeyStruct,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fillAddOrder(
      key: PoolKeyStruct,
      borrowInfo: LiquidityLoanStruct[],
      addParam: AddParamsStruct,
      param: Arbitrageur.FillerAddParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillAddOrder_(
      pool: PromiseOrValue<string>,
      borrowInfo: LiquidityLoanStruct[],
      addParam: AddParamsStruct,
      param: Arbitrageur.FillerAddParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillReduceOrder(
      key: PoolKeyStruct,
      reduceParam: ReduceParamStruct,
      param: Arbitrageur.FillerReduceParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillReduceOrder_(
      pool: PromiseOrValue<string>,
      reduceParam: ReduceParamStruct,
      param: Arbitrageur.FillerReduceParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    findSimulatedOutput(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forceClose(
      key: PoolKeyStruct,
      param: ForceCloseParamsStruct,
      executionOption: PromiseOrValue<BigNumberish>,
      executionData: PromiseOrValue<BytesLike>,
      flashOption: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRepayInfo(
      key: PoolKeyStruct,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      reduceAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokens(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeSwapAmount(
      pool: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      down: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      curTick: PromiseOrValue<BigNumberish>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNewContracts(
      _factory: PromiseOrValue<string>,
      _poolManager: PromiseOrValue<string>,
      _marginFacility: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniswapV3SwapCallback(
      amount0Delta: PromiseOrValue<BigNumberish>,
      amount1Delta: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canForceClose(
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canForceCloseTradePosition(
      key: PoolKeyStruct,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fillAddOrder(
      key: PoolKeyStruct,
      borrowInfo: LiquidityLoanStruct[],
      addParam: AddParamsStruct,
      param: Arbitrageur.FillerAddParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillAddOrder_(
      pool: PromiseOrValue<string>,
      borrowInfo: LiquidityLoanStruct[],
      addParam: AddParamsStruct,
      param: Arbitrageur.FillerAddParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillReduceOrder(
      key: PoolKeyStruct,
      reduceParam: ReduceParamStruct,
      param: Arbitrageur.FillerReduceParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillReduceOrder_(
      pool: PromiseOrValue<string>,
      reduceParam: ReduceParamStruct,
      param: Arbitrageur.FillerReduceParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    findSimulatedOutput(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forceClose(
      key: PoolKeyStruct,
      param: ForceCloseParamsStruct,
      executionOption: PromiseOrValue<BigNumberish>,
      executionData: PromiseOrValue<BytesLike>,
      flashOption: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRepayInfo(
      key: PoolKeyStruct,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      reduceAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokens(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeSwapAmount(
      pool: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      down: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      curTick: PromiseOrValue<BigNumberish>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNewContracts(
      _factory: PromiseOrValue<string>,
      _poolManager: PromiseOrValue<string>,
      _marginFacility: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: PromiseOrValue<BigNumberish>,
      amount1Delta: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
