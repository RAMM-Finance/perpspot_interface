/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MatchingEngineInterface extends utils.Interface {
  functions: {
    "computeBoundaryTicks(bool,int24,uint160,int24)": FunctionFragment;
    "computeMaxLiquidity(int24,uint256,uint256,uint160,int24)": FunctionFragment;
    "computeSqrtStartingPriceX96(bool,uint256,uint256)": FunctionFragment;
    "getFilled(int24,int128,int24,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "computeBoundaryTicks"
      | "computeMaxLiquidity"
      | "computeSqrtStartingPriceX96"
      | "getFilled"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "computeBoundaryTicks",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeMaxLiquidity",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeSqrtStartingPriceX96",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFilled",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "computeBoundaryTicks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeMaxLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeSqrtStartingPriceX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFilled", data: BytesLike): Result;

  events: {};
}

export interface MatchingEngine extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MatchingEngineInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    computeBoundaryTicks(
      borrowBelow: PromiseOrValue<boolean>,
      finishTickExact: PromiseOrValue<BigNumberish>,
      strikePriceX96: PromiseOrValue<BigNumberish>,
      binSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, number] & { startingTick: number; finishTick: number }>;

    computeMaxLiquidity(
      tick: PromiseOrValue<BigNumberish>,
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      sqrtStrikePrice: PromiseOrValue<BigNumberish>,
      binSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        pA: BigNumber;
        pB: BigNumber;
      }
    >;

    computeSqrtStartingPriceX96(
      borrowBelow: PromiseOrValue<boolean>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      simulatedOutput: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { sqrtStartingPriceX96: BigNumber }>;

    getFilled(
      tick: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      binSize: PromiseOrValue<BigNumberish>,
      borrowBelow: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { filledAmount: BigNumber }>;
  };

  computeBoundaryTicks(
    borrowBelow: PromiseOrValue<boolean>,
    finishTickExact: PromiseOrValue<BigNumberish>,
    strikePriceX96: PromiseOrValue<BigNumberish>,
    binSize: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, number] & { startingTick: number; finishTick: number }>;

  computeMaxLiquidity(
    tick: PromiseOrValue<BigNumberish>,
    x: PromiseOrValue<BigNumberish>,
    y: PromiseOrValue<BigNumberish>,
    sqrtStrikePrice: PromiseOrValue<BigNumberish>,
    binSize: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      liquidity: BigNumber;
      pA: BigNumber;
      pB: BigNumber;
    }
  >;

  computeSqrtStartingPriceX96(
    borrowBelow: PromiseOrValue<boolean>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    simulatedOutput: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFilled(
    tick: PromiseOrValue<BigNumberish>,
    liquidity: PromiseOrValue<BigNumberish>,
    binSize: PromiseOrValue<BigNumberish>,
    borrowBelow: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    computeBoundaryTicks(
      borrowBelow: PromiseOrValue<boolean>,
      finishTickExact: PromiseOrValue<BigNumberish>,
      strikePriceX96: PromiseOrValue<BigNumberish>,
      binSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, number] & { startingTick: number; finishTick: number }>;

    computeMaxLiquidity(
      tick: PromiseOrValue<BigNumberish>,
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      sqrtStrikePrice: PromiseOrValue<BigNumberish>,
      binSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        pA: BigNumber;
        pB: BigNumber;
      }
    >;

    computeSqrtStartingPriceX96(
      borrowBelow: PromiseOrValue<boolean>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      simulatedOutput: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFilled(
      tick: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      binSize: PromiseOrValue<BigNumberish>,
      borrowBelow: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    computeBoundaryTicks(
      borrowBelow: PromiseOrValue<boolean>,
      finishTickExact: PromiseOrValue<BigNumberish>,
      strikePriceX96: PromiseOrValue<BigNumberish>,
      binSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeMaxLiquidity(
      tick: PromiseOrValue<BigNumberish>,
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      sqrtStrikePrice: PromiseOrValue<BigNumberish>,
      binSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeSqrtStartingPriceX96(
      borrowBelow: PromiseOrValue<boolean>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      simulatedOutput: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFilled(
      tick: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      binSize: PromiseOrValue<BigNumberish>,
      borrowBelow: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    computeBoundaryTicks(
      borrowBelow: PromiseOrValue<boolean>,
      finishTickExact: PromiseOrValue<BigNumberish>,
      strikePriceX96: PromiseOrValue<BigNumberish>,
      binSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeMaxLiquidity(
      tick: PromiseOrValue<BigNumberish>,
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      sqrtStrikePrice: PromiseOrValue<BigNumberish>,
      binSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeSqrtStartingPriceX96(
      borrowBelow: PromiseOrValue<boolean>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      simulatedOutput: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFilled(
      tick: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      binSize: PromiseOrValue<BigNumberish>,
      borrowBelow: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
