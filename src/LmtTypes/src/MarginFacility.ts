/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type PoolKeyStruct = {
  token0: PromiseOrValue<string>;
  token1: PromiseOrValue<string>;
  fee: PromiseOrValue<BigNumberish>;
};

export type PoolKeyStructOutput = [string, string, number] & {
  token0: string;
  token1: string;
  fee: number;
};

export type AddParamsStruct = {
  margin: PromiseOrValue<BigNumberish>;
  maxSlippage: PromiseOrValue<BigNumberish>;
  minEstimatedSlippage: PromiseOrValue<BigNumberish>;
  borrowAmount: PromiseOrValue<BigNumberish>;
  positionIsToken0: PromiseOrValue<boolean>;
  executionOption: PromiseOrValue<BigNumberish>;
  trader: PromiseOrValue<string>;
};

export type AddParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  BigNumber,
  string
] & {
  margin: BigNumber;
  maxSlippage: BigNumber;
  minEstimatedSlippage: BigNumber;
  borrowAmount: BigNumber;
  positionIsToken0: boolean;
  executionOption: BigNumber;
  trader: string;
};

export type LiquidityLoanStruct = {
  tick: PromiseOrValue<BigNumberish>;
  liquidity: PromiseOrValue<BigNumberish>;
  premium: PromiseOrValue<BigNumberish>;
  Urate: PromiseOrValue<BigNumberish>;
  feeGrowthInside0LastX128: PromiseOrValue<BigNumberish>;
  feeGrowthInside1LastX128: PromiseOrValue<BigNumberish>;
  lastGrowth: PromiseOrValue<BigNumberish>;
};

export type LiquidityLoanStructOutput = [
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  tick: number;
  liquidity: BigNumber;
  premium: BigNumber;
  Urate: BigNumber;
  feeGrowthInside0LastX128: BigNumber;
  feeGrowthInside1LastX128: BigNumber;
  lastGrowth: BigNumber;
};

export type PositionStruct = {
  pool: PromiseOrValue<string>;
  underAuction: PromiseOrValue<boolean>;
  isToken0: PromiseOrValue<boolean>;
  totalDebtOutput: PromiseOrValue<BigNumberish>;
  totalDebtInput: PromiseOrValue<BigNumberish>;
  recentPremium: PromiseOrValue<BigNumberish>;
  openTime: PromiseOrValue<BigNumberish>;
  repayTime: PromiseOrValue<BigNumberish>;
  borrowInfo: LiquidityLoanStruct[];
};

export type PositionStructOutput = [
  string,
  boolean,
  boolean,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  number,
  LiquidityLoanStructOutput[]
] & {
  pool: string;
  underAuction: boolean;
  isToken0: boolean;
  totalDebtOutput: BigNumber;
  totalDebtInput: BigNumber;
  recentPremium: BigNumber;
  openTime: number;
  repayTime: number;
  borrowInfo: LiquidityLoanStructOutput[];
};

export type MarginPositionStruct = {
  base: PositionStruct;
  totalPosition: PromiseOrValue<BigNumberish>;
  margin: PromiseOrValue<BigNumberish>;
};

export type MarginPositionStructOutput = [
  PositionStructOutput,
  BigNumber,
  BigNumber
] & { base: PositionStructOutput; totalPosition: BigNumber; margin: BigNumber };

export type ReduceParamStruct = {
  positionIsToken0: PromiseOrValue<boolean>;
  reducePercentage: PromiseOrValue<BigNumberish>;
  reduceAmount: PromiseOrValue<BigNumberish>;
  maxSlippage: PromiseOrValue<BigNumberish>;
  trader: PromiseOrValue<string>;
  executionOption: PromiseOrValue<BigNumberish>;
  executionData: PromiseOrValue<BytesLike>;
  slippedPrice: PromiseOrValue<BigNumberish>;
};

export type ReduceParamStructOutput = [
  boolean,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string,
  BigNumber
] & {
  positionIsToken0: boolean;
  reducePercentage: BigNumber;
  reduceAmount: BigNumber;
  maxSlippage: BigNumber;
  trader: string;
  executionOption: BigNumber;
  executionData: string;
  slippedPrice: BigNumber;
};

export type ReduceReturnStruct = {
  amount0: PromiseOrValue<BigNumberish>;
  amount1: PromiseOrValue<BigNumberish>;
  PnL: PromiseOrValue<BigNumberish>;
  returnedAmount: PromiseOrValue<BigNumberish>;
  repaidDebt0: PromiseOrValue<BigNumberish>;
  repaidDebt1: PromiseOrValue<BigNumberish>;
  premium: PromiseOrValue<BigNumberish>;
};

export type ReduceReturnStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  amount0: BigNumber;
  amount1: BigNumber;
  PnL: BigNumber;
  returnedAmount: BigNumber;
  repaidDebt0: BigNumber;
  repaidDebt1: BigNumber;
  premium: BigNumber;
};

export interface MarginFacilityInterface extends utils.Interface {
  functions: {
    "PremiumDeposit(address,address)": FunctionFragment;
    "addPosition((address,address,uint24),(uint256,uint256,uint256,uint256,bool,uint256,address),(int24,uint128,uint256,uint256,uint256,uint256,uint256)[])": FunctionFragment;
    "approveTokens(address,address)": FunctionFragment;
    "canForceClose(((address,bool,bool,uint256,uint256,uint256,uint32,uint32,(int24,uint128,uint256,uint256,uint256,uint256,uint256)[]),uint256,uint256))": FunctionFragment;
    "depositPremium(address,uint256)": FunctionFragment;
    "depositPremium(address,address,uint256)": FunctionFragment;
    "getPosition(address,address,bool)": FunctionFragment;
    "maxWithdrawablePremium(address,address)": FunctionFragment;
    "payPremium((address,address,uint24),address,bool)": FunctionFragment;
    "positions(bytes32)": FunctionFragment;
    "reducePosition((address,address,uint24),(bool,uint256,uint256,uint256,address,uint256,bytes32,uint160))": FunctionFragment;
    "transferToken(address,address,address,uint256)": FunctionFragment;
    "withdrawPremium(address,address,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PremiumDeposit"
      | "addPosition"
      | "approveTokens"
      | "canForceClose"
      | "depositPremium(address,uint256)"
      | "depositPremium(address,address,uint256)"
      | "getPosition"
      | "maxWithdrawablePremium"
      | "payPremium"
      | "positions"
      | "reducePosition"
      | "transferToken"
      | "withdrawPremium"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "PremiumDeposit",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addPosition",
    values: [PoolKeyStruct, AddParamsStruct, LiquidityLoanStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approveTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "canForceClose",
    values: [MarginPositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositPremium(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositPremium(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxWithdrawablePremium",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "payPremium",
    values: [PoolKeyStruct, PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "reducePosition",
    values: [PoolKeyStruct, ReduceParamStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPremium",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "PremiumDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canForceClose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositPremium(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositPremium(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdrawablePremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payPremium", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reducePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPremium",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MarginFacility extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarginFacilityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PremiumDeposit(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addPosition(
      key: PoolKeyStruct,
      param: AddParamsStruct,
      borrowInfo: LiquidityLoanStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveTokens(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    canForceClose(
      position: MarginPositionStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "depositPremium(address,uint256)"(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositPremium(address,address,uint256)"(
      token: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPosition(
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[MarginPositionStructOutput]>;

    maxWithdrawablePremium(
      token: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    payPremium(
      key: PoolKeyStruct,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    positions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [PositionStructOutput, BigNumber, BigNumber] & {
        base: PositionStructOutput;
        totalPosition: BigNumber;
        margin: BigNumber;
      }
    >;

    reducePosition(
      key: PoolKeyStruct,
      param: ReduceParamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferToken(
      token: PromiseOrValue<string>,
      caller: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawPremium(
      token: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      reciever: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  PremiumDeposit(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addPosition(
    key: PoolKeyStruct,
    param: AddParamsStruct,
    borrowInfo: LiquidityLoanStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveTokens(
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  canForceClose(
    position: MarginPositionStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "depositPremium(address,uint256)"(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositPremium(address,address,uint256)"(
    token: PromiseOrValue<string>,
    trader: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPosition(
    pool: PromiseOrValue<string>,
    trader: PromiseOrValue<string>,
    positionIsToken0: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<MarginPositionStructOutput>;

  maxWithdrawablePremium(
    token: PromiseOrValue<string>,
    trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  payPremium(
    key: PoolKeyStruct,
    trader: PromiseOrValue<string>,
    positionIsToken0: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  positions(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [PositionStructOutput, BigNumber, BigNumber] & {
      base: PositionStructOutput;
      totalPosition: BigNumber;
      margin: BigNumber;
    }
  >;

  reducePosition(
    key: PoolKeyStruct,
    param: ReduceParamStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferToken(
    token: PromiseOrValue<string>,
    caller: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawPremium(
    token: PromiseOrValue<string>,
    trader: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    reciever: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PremiumDeposit(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addPosition(
      key: PoolKeyStruct,
      param: AddParamsStruct,
      borrowInfo: LiquidityLoanStruct[],
      overrides?: CallOverrides
    ): Promise<[MarginPositionStructOutput, BigNumber]>;

    approveTokens(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    canForceClose(
      position: MarginPositionStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "depositPremium(address,uint256)"(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositPremium(address,address,uint256)"(
      token: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPosition(
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<MarginPositionStructOutput>;

    maxWithdrawablePremium(
      token: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payPremium(
      key: PoolKeyStruct,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [PositionStructOutput, BigNumber, BigNumber] & {
        base: PositionStructOutput;
        totalPosition: BigNumber;
        margin: BigNumber;
      }
    >;

    reducePosition(
      key: PoolKeyStruct,
      param: ReduceParamStruct,
      overrides?: CallOverrides
    ): Promise<ReduceReturnStructOutput>;

    transferToken(
      token: PromiseOrValue<string>,
      caller: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawPremium(
      token: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      reciever: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    PremiumDeposit(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addPosition(
      key: PoolKeyStruct,
      param: AddParamsStruct,
      borrowInfo: LiquidityLoanStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveTokens(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    canForceClose(
      position: MarginPositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "depositPremium(address,uint256)"(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositPremium(address,address,uint256)"(
      token: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPosition(
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxWithdrawablePremium(
      token: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payPremium(
      key: PoolKeyStruct,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    positions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reducePosition(
      key: PoolKeyStruct,
      param: ReduceParamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferToken(
      token: PromiseOrValue<string>,
      caller: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawPremium(
      token: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      reciever: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PremiumDeposit(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addPosition(
      key: PoolKeyStruct,
      param: AddParamsStruct,
      borrowInfo: LiquidityLoanStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveTokens(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    canForceClose(
      position: MarginPositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "depositPremium(address,uint256)"(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositPremium(address,address,uint256)"(
      token: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPosition(
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxWithdrawablePremium(
      token: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payPremium(
      key: PoolKeyStruct,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    positions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reducePosition(
      key: PoolKeyStruct,
      param: ReduceParamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferToken(
      token: PromiseOrValue<string>,
      caller: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawPremium(
      token: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      reciever: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
