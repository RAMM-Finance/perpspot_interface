/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type PoolKeyStruct = {
  token0: PromiseOrValue<string>;
  token1: PromiseOrValue<string>;
  fee: PromiseOrValue<BigNumberish>;
};

export type PoolKeyStructOutput = [string, string, number] & {
  token0: string;
  token1: string;
  fee: number;
};

export type AddParamsStruct = {
  margin: PromiseOrValue<BigNumberish>;
  minOutput: PromiseOrValue<BigNumberish>;
  simulatedOutput: PromiseOrValue<BigNumberish>;
  borrowAmount: PromiseOrValue<BigNumberish>;
  positionIsToken0: PromiseOrValue<boolean>;
  executionOption: PromiseOrValue<BigNumberish>;
  trader: PromiseOrValue<string>;
  executionData: PromiseOrValue<BytesLike>;
  slippedTickMin: PromiseOrValue<BigNumberish>;
  slippedTickMax: PromiseOrValue<BigNumberish>;
  marginInPosToken: PromiseOrValue<boolean>;
};

export type AddParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  BigNumber,
  string,
  string,
  number,
  number,
  boolean
] & {
  margin: BigNumber;
  minOutput: BigNumber;
  simulatedOutput: BigNumber;
  borrowAmount: BigNumber;
  positionIsToken0: boolean;
  executionOption: BigNumber;
  trader: string;
  executionData: string;
  slippedTickMin: number;
  slippedTickMax: number;
  marginInPosToken: boolean;
};

export type LiquidityLoanStruct = {
  tick: PromiseOrValue<BigNumberish>;
  liquidity: PromiseOrValue<BigNumberish>;
  premium: PromiseOrValue<BigNumberish>;
  feeGrowthInside0LastX128: PromiseOrValue<BigNumberish>;
  feeGrowthInside1LastX128: PromiseOrValue<BigNumberish>;
  lastGrowth: PromiseOrValue<BigNumberish>;
};

export type LiquidityLoanStructOutput = [
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  tick: number;
  liquidity: BigNumber;
  premium: BigNumber;
  feeGrowthInside0LastX128: BigNumber;
  feeGrowthInside1LastX128: BigNumber;
  lastGrowth: BigNumber;
};

export type PositionStruct = {
  pool: PromiseOrValue<string>;
  isToken0: PromiseOrValue<boolean>;
  totalDebtOutput: PromiseOrValue<BigNumberish>;
  totalDebtInput: PromiseOrValue<BigNumberish>;
  lastPremiumPaymentTime: PromiseOrValue<BigNumberish>;
  openTime: PromiseOrValue<BigNumberish>;
  borrowInfo: LiquidityLoanStruct[];
};

export type PositionStructOutput = [
  string,
  boolean,
  BigNumber,
  BigNumber,
  number,
  number,
  LiquidityLoanStructOutput[]
] & {
  pool: string;
  isToken0: boolean;
  totalDebtOutput: BigNumber;
  totalDebtInput: BigNumber;
  lastPremiumPaymentTime: number;
  openTime: number;
  borrowInfo: LiquidityLoanStructOutput[];
};

export type MarginPositionStruct = {
  base: PositionStruct;
  totalPosition: PromiseOrValue<BigNumberish>;
  margin: PromiseOrValue<BigNumberish>;
  marginInPosToken: PromiseOrValue<boolean>;
};

export type MarginPositionStructOutput = [
  PositionStructOutput,
  BigNumber,
  BigNumber,
  boolean
] & {
  base: PositionStructOutput;
  totalPosition: BigNumber;
  margin: BigNumber;
  marginInPosToken: boolean;
};

export type ForceCloseParamsStruct = {
  trader: PromiseOrValue<string>;
  positionIsToken0: PromiseOrValue<boolean>;
  fillerPayAmount: PromiseOrValue<BigNumberish>;
  slippedTickMin: PromiseOrValue<BigNumberish>;
  slippedTickMax: PromiseOrValue<BigNumberish>;
};

export type ForceCloseParamsStructOutput = [
  string,
  boolean,
  BigNumber,
  number,
  number
] & {
  trader: string;
  positionIsToken0: boolean;
  fillerPayAmount: BigNumber;
  slippedTickMin: number;
  slippedTickMax: number;
};

export type ReduceParamStruct = {
  positionIsToken0: PromiseOrValue<boolean>;
  reducePercentage: PromiseOrValue<BigNumberish>;
  minOutput: PromiseOrValue<BigNumberish>;
  trader: PromiseOrValue<string>;
  executionOption: PromiseOrValue<BigNumberish>;
  executionData: PromiseOrValue<BytesLike>;
  slippedTickMin: PromiseOrValue<BigNumberish>;
  slippedTickMax: PromiseOrValue<BigNumberish>;
  reduceAmount: PromiseOrValue<BigNumberish>;
};

export type ReduceParamStructOutput = [
  boolean,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string,
  number,
  number,
  BigNumber
] & {
  positionIsToken0: boolean;
  reducePercentage: BigNumber;
  minOutput: BigNumber;
  trader: string;
  executionOption: BigNumber;
  executionData: string;
  slippedTickMin: number;
  slippedTickMax: number;
  reduceAmount: BigNumber;
};

export type ReduceReturnStruct = {
  amount0: PromiseOrValue<BigNumberish>;
  amount1: PromiseOrValue<BigNumberish>;
  PnL: PromiseOrValue<BigNumberish>;
  returnedAmount: PromiseOrValue<BigNumberish>;
  repaidDebt0: PromiseOrValue<BigNumberish>;
  repaidDebt1: PromiseOrValue<BigNumberish>;
  premium: PromiseOrValue<BigNumberish>;
  profitFee: PromiseOrValue<BigNumberish>;
};

export type ReduceReturnStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  amount0: BigNumber;
  amount1: BigNumber;
  PnL: BigNumber;
  returnedAmount: BigNumber;
  repaidDebt0: BigNumber;
  repaidDebt1: BigNumber;
  premium: BigNumber;
  profitFee: BigNumber;
};

export interface MarginFacilityInterface extends utils.Interface {
  functions: {
    "PremiumDeposit(bytes32)": FunctionFragment;
    "_initialize(address,address)": FunctionFragment;
    "addFiller(address)": FunctionFragment;
    "addPosition((address,address,uint24),(uint256,uint256,uint256,uint256,bool,uint256,address,bytes,int24,int24,bool),(int24,uint128,uint256,uint256,uint256,uint256)[])": FunctionFragment;
    "approveTokens(address,address)": FunctionFragment;
    "canForceClose((address,address,uint24),((address,bool,uint256,uint256,uint32,uint32,(int24,uint128,uint256,uint256,uint256,uint256)[]),uint256,uint256,bool),address,address,bool)": FunctionFragment;
    "cancelOrder(address,bool,bool)": FunctionFragment;
    "checkPositionExists(address,address,bool)": FunctionFragment;
    "depositPremium((address,address,uint24),address,bool,uint256)": FunctionFragment;
    "executioner()": FunctionFragment;
    "forceClose((address,address,uint24),(address,bool,uint256,int24,int24))": FunctionFragment;
    "getBorrowInfo(address,address,bool)": FunctionFragment;
    "getLastRepayTime(address,address,bool)": FunctionFragment;
    "getOrderId(address,address,bool,bool)": FunctionFragment;
    "getPosition(address,address,bool)": FunctionFragment;
    "getPositionId(address,address,bool)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isWhitelistedFiller(address)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "orders(bytes32)": FunctionFragment;
    "payPremium((address,address,uint24),bool,uint256)": FunctionFragment;
    "positions(bytes32)": FunctionFragment;
    "reducePosition((address,address,uint24),(bool,uint256,uint256,address,uint256,bytes,int24,int24,uint256))": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setProtocolContracts(address,address)": FunctionFragment;
    "submitOrder(address,bool,bool,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "swapAndDepositPremium((address,address,uint24),address,bool,uint256,uint256)": FunctionFragment;
    "withdrawPremium((address,address,uint24),bool,uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PremiumDeposit"
      | "_initialize"
      | "addFiller"
      | "addPosition"
      | "approveTokens"
      | "canForceClose"
      | "cancelOrder"
      | "checkPositionExists"
      | "depositPremium"
      | "executioner"
      | "forceClose"
      | "getBorrowInfo"
      | "getLastRepayTime"
      | "getOrderId"
      | "getPosition"
      | "getPositionId"
      | "initialize"
      | "isWhitelistedFiller"
      | "multicall"
      | "orders"
      | "payPremium"
      | "positions"
      | "reducePosition"
      | "setOwner"
      | "setProtocolContracts"
      | "submitOrder"
      | "swapAndDepositPremium"
      | "withdrawPremium"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "PremiumDeposit",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "_initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addFiller",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addPosition",
    values: [PoolKeyStruct, AddParamsStruct, LiquidityLoanStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approveTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "canForceClose",
    values: [
      PoolKeyStruct,
      MarginPositionStruct,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkPositionExists",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositPremium",
    values: [
      PoolKeyStruct,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executioner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceClose",
    values: [PoolKeyStruct, ForceCloseParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowInfo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastRepayTime",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderId",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionId",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedFiller",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "payPremium",
    values: [
      PoolKeyStruct,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "reducePosition",
    values: [PoolKeyStruct, ReduceParamStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolContracts",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndDepositPremium",
    values: [
      PoolKeyStruct,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPremium",
    values: [
      PoolKeyStruct,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "PremiumDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_initialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addFiller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canForceClose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkPositionExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executioner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "forceClose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastRepayTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrderId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedFiller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payPremium", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reducePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndDepositPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPremium",
    data: BytesLike
  ): Result;

  events: {
    "ForceClosed(address,bool,bool,uint256,address,uint256,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MarginPositionIncreased(address,bool,bool,address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "MarginPositionReduced(address,bool,address,address,uint256,uint256,uint256,int256)": EventFragment;
    "OrderAdded(address,bool,address,bool,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "OrderCanceled(address,bool,address,bool)": EventFragment;
    "PremiumDeposited(address,address,bool,uint256)": EventFragment;
    "PremiumWithdrawn(address,address,bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ForceClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarginPositionIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarginPositionReduced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PremiumDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PremiumWithdrawn"): EventFragment;
}

export interface ForceClosedEventObject {
  pool: string;
  positionIsToken0: boolean;
  marginInPosToken: boolean;
  margin: BigNumber;
  trader: string;
  forcedClosedAmount: BigNumber;
  fillerPayAmount: BigNumber;
  rangeCondition: BigNumber;
}
export type ForceClosedEvent = TypedEvent<
  [
    string,
    boolean,
    boolean,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  ForceClosedEventObject
>;

export type ForceClosedEventFilter = TypedEventFilter<ForceClosedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MarginPositionIncreasedEventObject {
  pool: string;
  positionIsToken0: boolean;
  marginInPosToken: boolean;
  trader: string;
  filler: string;
  addedAmount: BigNumber;
  marginAmount: BigNumber;
  borrowAmount: BigNumber;
  premiumPaid: BigNumber;
  feePaid: BigNumber;
}
export type MarginPositionIncreasedEvent = TypedEvent<
  [
    string,
    boolean,
    boolean,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  MarginPositionIncreasedEventObject
>;

export type MarginPositionIncreasedEventFilter =
  TypedEventFilter<MarginPositionIncreasedEvent>;

export interface MarginPositionReducedEventObject {
  pool: string;
  positionIsToken0: boolean;
  trader: string;
  filler: string;
  reduceAmount: BigNumber;
  premiumPaid: BigNumber;
  feePaid: BigNumber;
  PnL: BigNumber;
}
export type MarginPositionReducedEvent = TypedEvent<
  [string, boolean, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  MarginPositionReducedEventObject
>;

export type MarginPositionReducedEventFilter =
  TypedEventFilter<MarginPositionReducedEvent>;

export interface OrderAddedEventObject {
  pool: string;
  positionIsToken0: boolean;
  trader: string;
  isAdd: boolean;
  deadline: BigNumber;
  startOutput: BigNumber;
  minOutput: BigNumber;
  inputAmount: BigNumber;
  decayRate: BigNumber;
  margin: BigNumber;
}
export type OrderAddedEvent = TypedEvent<
  [
    string,
    boolean,
    string,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  OrderAddedEventObject
>;

export type OrderAddedEventFilter = TypedEventFilter<OrderAddedEvent>;

export interface OrderCanceledEventObject {
  pool: string;
  positionIsToken0: boolean;
  trader: string;
  isAdd: boolean;
}
export type OrderCanceledEvent = TypedEvent<
  [string, boolean, string, boolean],
  OrderCanceledEventObject
>;

export type OrderCanceledEventFilter = TypedEventFilter<OrderCanceledEvent>;

export interface PremiumDepositedEventObject {
  payer: string;
  pool: string;
  isToken1: boolean;
  amount: BigNumber;
}
export type PremiumDepositedEvent = TypedEvent<
  [string, string, boolean, BigNumber],
  PremiumDepositedEventObject
>;

export type PremiumDepositedEventFilter =
  TypedEventFilter<PremiumDepositedEvent>;

export interface PremiumWithdrawnEventObject {
  withdrawer: string;
  pool: string;
  isToken1: boolean;
  amount: BigNumber;
}
export type PremiumWithdrawnEvent = TypedEvent<
  [string, string, boolean, BigNumber],
  PremiumWithdrawnEventObject
>;

export type PremiumWithdrawnEventFilter =
  TypedEventFilter<PremiumWithdrawnEvent>;

export interface MarginFacility extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarginFacilityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PremiumDeposit(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _initialize(
      pm: PromiseOrValue<string>,
      ex: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addFiller(
      filler: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addPosition(
      key: PoolKeyStruct,
      param: AddParamsStruct,
      borrowInfo: LiquidityLoanStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveTokens(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    canForceClose(
      key: PoolKeyStruct,
      position: MarginPositionStruct,
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cancelOrder(
      pool: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      isAdd: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkPositionExists(
      pool: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowedToken1: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    depositPremium(
      key: PoolKeyStruct,
      trader: PromiseOrValue<string>,
      borrowToken1: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executioner(overrides?: CallOverrides): Promise<[string]>;

    forceClose(
      key: PoolKeyStruct,
      param: ForceCloseParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBorrowInfo(
      pool: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowedToken1: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[LiquidityLoanStructOutput[]]>;

    getLastRepayTime(
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getOrderId(
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      isAdd: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPosition(
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[MarginPositionStructOutput]>;

    getPositionId(
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      pm: PromiseOrValue<string>,
      ex: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isWhitelistedFiller(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    orders(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        PoolKeyStructOutput,
        boolean,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        key: PoolKeyStructOutput;
        positionIsToken0: boolean;
        auctionDeadline: number;
        auctionStartTime: number;
        startOutput: BigNumber;
        minOutput: BigNumber;
        inputAmount: BigNumber;
        decayRate: BigNumber;
        margin: BigNumber;
      }
    >;

    payPremium(
      key: PoolKeyStruct,
      payToken1: PromiseOrValue<boolean>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    positions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [PositionStructOutput, BigNumber, BigNumber, boolean] & {
        base: PositionStructOutput;
        totalPosition: BigNumber;
        margin: BigNumber;
        marginInPosToken: boolean;
      }
    >;

    reducePosition(
      key: PoolKeyStruct,
      param: ReduceParamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolContracts(
      poolManager_: PromiseOrValue<string>,
      executioner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitOrder(
      pool: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      isAdd: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      startOutput: PromiseOrValue<BigNumberish>,
      minOutput: PromiseOrValue<BigNumberish>,
      inputAmount: PromiseOrValue<BigNumberish>,
      decayRate: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapAndDepositPremium(
      key: PoolKeyStruct,
      trader: PromiseOrValue<string>,
      borrowToken1: PromiseOrValue<boolean>,
      toSwapAmount: PromiseOrValue<BigNumberish>,
      minOutput: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawPremium(
      key: PoolKeyStruct,
      borrowToken1: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      isClose: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  PremiumDeposit(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _initialize(
    pm: PromiseOrValue<string>,
    ex: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addFiller(
    filler: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addPosition(
    key: PoolKeyStruct,
    param: AddParamsStruct,
    borrowInfo: LiquidityLoanStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveTokens(
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  canForceClose(
    key: PoolKeyStruct,
    position: MarginPositionStruct,
    pool: PromiseOrValue<string>,
    trader: PromiseOrValue<string>,
    positionIsToken0: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cancelOrder(
    pool: PromiseOrValue<string>,
    positionIsToken0: PromiseOrValue<boolean>,
    isAdd: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkPositionExists(
    pool: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    borrowedToken1: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  depositPremium(
    key: PoolKeyStruct,
    trader: PromiseOrValue<string>,
    borrowToken1: PromiseOrValue<boolean>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executioner(overrides?: CallOverrides): Promise<string>;

  forceClose(
    key: PoolKeyStruct,
    param: ForceCloseParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBorrowInfo(
    pool: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    borrowedToken1: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<LiquidityLoanStructOutput[]>;

  getLastRepayTime(
    pool: PromiseOrValue<string>,
    trader: PromiseOrValue<string>,
    positionIsToken0: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<number>;

  getOrderId(
    pool: PromiseOrValue<string>,
    trader: PromiseOrValue<string>,
    positionIsToken0: PromiseOrValue<boolean>,
    isAdd: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPosition(
    pool: PromiseOrValue<string>,
    trader: PromiseOrValue<string>,
    positionIsToken0: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<MarginPositionStructOutput>;

  getPositionId(
    pool: PromiseOrValue<string>,
    trader: PromiseOrValue<string>,
    positionIsToken0: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    pm: PromiseOrValue<string>,
    ex: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isWhitelistedFiller(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  orders(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      PoolKeyStructOutput,
      boolean,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      key: PoolKeyStructOutput;
      positionIsToken0: boolean;
      auctionDeadline: number;
      auctionStartTime: number;
      startOutput: BigNumber;
      minOutput: BigNumber;
      inputAmount: BigNumber;
      decayRate: BigNumber;
      margin: BigNumber;
    }
  >;

  payPremium(
    key: PoolKeyStruct,
    payToken1: PromiseOrValue<boolean>,
    depositAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  positions(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [PositionStructOutput, BigNumber, BigNumber, boolean] & {
      base: PositionStructOutput;
      totalPosition: BigNumber;
      margin: BigNumber;
      marginInPosToken: boolean;
    }
  >;

  reducePosition(
    key: PoolKeyStruct,
    param: ReduceParamStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolContracts(
    poolManager_: PromiseOrValue<string>,
    executioner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitOrder(
    pool: PromiseOrValue<string>,
    positionIsToken0: PromiseOrValue<boolean>,
    isAdd: PromiseOrValue<boolean>,
    deadline: PromiseOrValue<BigNumberish>,
    startOutput: PromiseOrValue<BigNumberish>,
    minOutput: PromiseOrValue<BigNumberish>,
    inputAmount: PromiseOrValue<BigNumberish>,
    decayRate: PromiseOrValue<BigNumberish>,
    margin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapAndDepositPremium(
    key: PoolKeyStruct,
    trader: PromiseOrValue<string>,
    borrowToken1: PromiseOrValue<boolean>,
    toSwapAmount: PromiseOrValue<BigNumberish>,
    minOutput: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawPremium(
    key: PoolKeyStruct,
    borrowToken1: PromiseOrValue<boolean>,
    amount: PromiseOrValue<BigNumberish>,
    isClose: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PremiumDeposit(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _initialize(
      pm: PromiseOrValue<string>,
      ex: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addFiller(
      filler: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addPosition(
      key: PoolKeyStruct,
      param: AddParamsStruct,
      borrowInfo: LiquidityLoanStruct[],
      overrides?: CallOverrides
    ): Promise<
      [MarginPositionStructOutput, BigNumber, BigNumber] & {
        position: MarginPositionStructOutput;
        premiumOwed: BigNumber;
        fee: BigNumber;
      }
    >;

    approveTokens(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    canForceClose(
      key: PoolKeyStruct,
      position: MarginPositionStruct,
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelOrder(
      pool: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      isAdd: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkPositionExists(
      pool: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowedToken1: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositPremium(
      key: PoolKeyStruct,
      trader: PromiseOrValue<string>,
      borrowToken1: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executioner(overrides?: CallOverrides): Promise<string>;

    forceClose(
      key: PoolKeyStruct,
      param: ForceCloseParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowInfo(
      pool: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowedToken1: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<LiquidityLoanStructOutput[]>;

    getLastRepayTime(
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<number>;

    getOrderId(
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      isAdd: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPosition(
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<MarginPositionStructOutput>;

    getPositionId(
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      pm: PromiseOrValue<string>,
      ex: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isWhitelistedFiller(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    orders(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        PoolKeyStructOutput,
        boolean,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        key: PoolKeyStructOutput;
        positionIsToken0: boolean;
        auctionDeadline: number;
        auctionStartTime: number;
        startOutput: BigNumber;
        minOutput: BigNumber;
        inputAmount: BigNumber;
        decayRate: BigNumber;
        margin: BigNumber;
      }
    >;

    payPremium(
      key: PoolKeyStruct,
      payToken1: PromiseOrValue<boolean>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [PositionStructOutput, BigNumber, BigNumber, boolean] & {
        base: PositionStructOutput;
        totalPosition: BigNumber;
        margin: BigNumber;
        marginInPosToken: boolean;
      }
    >;

    reducePosition(
      key: PoolKeyStruct,
      param: ReduceParamStruct,
      overrides?: CallOverrides
    ): Promise<ReduceReturnStructOutput>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolContracts(
      poolManager_: PromiseOrValue<string>,
      executioner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitOrder(
      pool: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      isAdd: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      startOutput: PromiseOrValue<BigNumberish>,
      minOutput: PromiseOrValue<BigNumberish>,
      inputAmount: PromiseOrValue<BigNumberish>,
      decayRate: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAndDepositPremium(
      key: PoolKeyStruct,
      trader: PromiseOrValue<string>,
      borrowToken1: PromiseOrValue<boolean>,
      toSwapAmount: PromiseOrValue<BigNumberish>,
      minOutput: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawPremium(
      key: PoolKeyStruct,
      borrowToken1: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      isClose: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ForceClosed(address,bool,bool,uint256,address,uint256,uint256,uint256)"(
      pool?: PromiseOrValue<string> | null,
      positionIsToken0?: PromiseOrValue<boolean> | null,
      marginInPosToken?: null,
      margin?: null,
      trader?: PromiseOrValue<string> | null,
      forcedClosedAmount?: null,
      fillerPayAmount?: null,
      rangeCondition?: null
    ): ForceClosedEventFilter;
    ForceClosed(
      pool?: PromiseOrValue<string> | null,
      positionIsToken0?: PromiseOrValue<boolean> | null,
      marginInPosToken?: null,
      margin?: null,
      trader?: PromiseOrValue<string> | null,
      forcedClosedAmount?: null,
      fillerPayAmount?: null,
      rangeCondition?: null
    ): ForceClosedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MarginPositionIncreased(address,bool,bool,address,address,uint256,uint256,uint256,uint256,uint256)"(
      pool?: PromiseOrValue<string> | null,
      positionIsToken0?: PromiseOrValue<boolean> | null,
      marginInPosToken?: null,
      trader?: PromiseOrValue<string> | null,
      filler?: null,
      addedAmount?: null,
      marginAmount?: null,
      borrowAmount?: null,
      premiumPaid?: null,
      feePaid?: null
    ): MarginPositionIncreasedEventFilter;
    MarginPositionIncreased(
      pool?: PromiseOrValue<string> | null,
      positionIsToken0?: PromiseOrValue<boolean> | null,
      marginInPosToken?: null,
      trader?: PromiseOrValue<string> | null,
      filler?: null,
      addedAmount?: null,
      marginAmount?: null,
      borrowAmount?: null,
      premiumPaid?: null,
      feePaid?: null
    ): MarginPositionIncreasedEventFilter;

    "MarginPositionReduced(address,bool,address,address,uint256,uint256,uint256,int256)"(
      pool?: PromiseOrValue<string> | null,
      positionIsToken0?: PromiseOrValue<boolean> | null,
      trader?: PromiseOrValue<string> | null,
      filler?: null,
      reduceAmount?: null,
      premiumPaid?: null,
      feePaid?: null,
      PnL?: null
    ): MarginPositionReducedEventFilter;
    MarginPositionReduced(
      pool?: PromiseOrValue<string> | null,
      positionIsToken0?: PromiseOrValue<boolean> | null,
      trader?: PromiseOrValue<string> | null,
      filler?: null,
      reduceAmount?: null,
      premiumPaid?: null,
      feePaid?: null,
      PnL?: null
    ): MarginPositionReducedEventFilter;

    "OrderAdded(address,bool,address,bool,uint256,uint256,uint256,uint256,uint256,uint256)"(
      pool?: PromiseOrValue<string> | null,
      positionIsToken0?: PromiseOrValue<boolean> | null,
      trader?: PromiseOrValue<string> | null,
      isAdd?: null,
      deadline?: null,
      startOutput?: null,
      minOutput?: null,
      inputAmount?: null,
      decayRate?: null,
      margin?: null
    ): OrderAddedEventFilter;
    OrderAdded(
      pool?: PromiseOrValue<string> | null,
      positionIsToken0?: PromiseOrValue<boolean> | null,
      trader?: PromiseOrValue<string> | null,
      isAdd?: null,
      deadline?: null,
      startOutput?: null,
      minOutput?: null,
      inputAmount?: null,
      decayRate?: null,
      margin?: null
    ): OrderAddedEventFilter;

    "OrderCanceled(address,bool,address,bool)"(
      pool?: PromiseOrValue<string> | null,
      positionIsToken0?: PromiseOrValue<boolean> | null,
      trader?: PromiseOrValue<string> | null,
      isAdd?: null
    ): OrderCanceledEventFilter;
    OrderCanceled(
      pool?: PromiseOrValue<string> | null,
      positionIsToken0?: PromiseOrValue<boolean> | null,
      trader?: PromiseOrValue<string> | null,
      isAdd?: null
    ): OrderCanceledEventFilter;

    "PremiumDeposited(address,address,bool,uint256)"(
      payer?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      isToken1?: null,
      amount?: null
    ): PremiumDepositedEventFilter;
    PremiumDeposited(
      payer?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      isToken1?: null,
      amount?: null
    ): PremiumDepositedEventFilter;

    "PremiumWithdrawn(address,address,bool,uint256)"(
      withdrawer?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      isToken1?: null,
      amount?: null
    ): PremiumWithdrawnEventFilter;
    PremiumWithdrawn(
      withdrawer?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      isToken1?: null,
      amount?: null
    ): PremiumWithdrawnEventFilter;
  };

  estimateGas: {
    PremiumDeposit(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _initialize(
      pm: PromiseOrValue<string>,
      ex: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addFiller(
      filler: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addPosition(
      key: PoolKeyStruct,
      param: AddParamsStruct,
      borrowInfo: LiquidityLoanStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveTokens(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    canForceClose(
      key: PoolKeyStruct,
      position: MarginPositionStruct,
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOrder(
      pool: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      isAdd: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkPositionExists(
      pool: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowedToken1: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositPremium(
      key: PoolKeyStruct,
      trader: PromiseOrValue<string>,
      borrowToken1: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executioner(overrides?: CallOverrides): Promise<BigNumber>;

    forceClose(
      key: PoolKeyStruct,
      param: ForceCloseParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBorrowInfo(
      pool: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowedToken1: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastRepayTime(
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderId(
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      isAdd: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionId(
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      pm: PromiseOrValue<string>,
      ex: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isWhitelistedFiller(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    orders(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payPremium(
      key: PoolKeyStruct,
      payToken1: PromiseOrValue<boolean>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    positions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reducePosition(
      key: PoolKeyStruct,
      param: ReduceParamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolContracts(
      poolManager_: PromiseOrValue<string>,
      executioner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitOrder(
      pool: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      isAdd: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      startOutput: PromiseOrValue<BigNumberish>,
      minOutput: PromiseOrValue<BigNumberish>,
      inputAmount: PromiseOrValue<BigNumberish>,
      decayRate: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapAndDepositPremium(
      key: PoolKeyStruct,
      trader: PromiseOrValue<string>,
      borrowToken1: PromiseOrValue<boolean>,
      toSwapAmount: PromiseOrValue<BigNumberish>,
      minOutput: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawPremium(
      key: PoolKeyStruct,
      borrowToken1: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      isClose: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PremiumDeposit(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _initialize(
      pm: PromiseOrValue<string>,
      ex: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addFiller(
      filler: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addPosition(
      key: PoolKeyStruct,
      param: AddParamsStruct,
      borrowInfo: LiquidityLoanStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveTokens(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    canForceClose(
      key: PoolKeyStruct,
      position: MarginPositionStruct,
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      pool: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      isAdd: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkPositionExists(
      pool: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowedToken1: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositPremium(
      key: PoolKeyStruct,
      trader: PromiseOrValue<string>,
      borrowToken1: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executioner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forceClose(
      key: PoolKeyStruct,
      param: ForceCloseParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBorrowInfo(
      pool: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowedToken1: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastRepayTime(
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderId(
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      isAdd: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionId(
      pool: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      pm: PromiseOrValue<string>,
      ex: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isWhitelistedFiller(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    orders(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payPremium(
      key: PoolKeyStruct,
      payToken1: PromiseOrValue<boolean>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    positions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reducePosition(
      key: PoolKeyStruct,
      param: ReduceParamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolContracts(
      poolManager_: PromiseOrValue<string>,
      executioner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitOrder(
      pool: PromiseOrValue<string>,
      positionIsToken0: PromiseOrValue<boolean>,
      isAdd: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      startOutput: PromiseOrValue<BigNumberish>,
      minOutput: PromiseOrValue<BigNumberish>,
      inputAmount: PromiseOrValue<BigNumberish>,
      decayRate: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapAndDepositPremium(
      key: PoolKeyStruct,
      trader: PromiseOrValue<string>,
      borrowToken1: PromiseOrValue<boolean>,
      toSwapAmount: PromiseOrValue<BigNumberish>,
      minOutput: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawPremium(
      key: PoolKeyStruct,
      borrowToken1: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      isClose: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
