/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Executioner, ExecutionerInterface } from "../../src/Executioner";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "T",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "filler",
        type: "address",
      },
      {
        internalType: "bool",
        name: "outIsToken0",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "outputAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "inputAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
    ],
    name: "executeFiller",
    outputs: [
      {
        internalType: "int256",
        name: "amount0",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "amount1",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "bool",
        name: "down",
        type: "bool",
      },
      {
        internalType: "int256",
        name: "swapIn",
        type: "int256",
      },
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minOutput",
        type: "uint256",
      },
    ],
    name: "executeUniswapWithMinOutput",
    outputs: [
      {
        internalType: "int256",
        name: "amount0",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "amount1",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "marginFacility",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "poolManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_marginFacility",
        type: "address",
      },
      {
        internalType: "address",
        name: "_poolManager",
        type: "address",
      },
    ],
    name: "setContracts",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "amount0Delta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "amount1Delta",
        type: "int256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "uniswapV3SwapCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055610db9806100326000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a882c12d1161005b578063a882c12d146100ed578063d8952a4914610100578063dc4c90d314610115578063fa461e331461012857600080fd5b8063549140ad146100825780638da5cb5b146100af57806393b9e134146100da575b600080fd5b6100956100903660046109ff565b61013b565b604080519283526020830191909152015b60405180910390f35b6000546100c2906001600160a01b031681565b6040516001600160a01b0390911681526020016100a6565b6100956100e8366004610a6f565b610310565b6001546100c2906001600160a01b031681565b61011361010e366004610adf565b61048f565b005b6002546100c2906001600160a01b031681565b610113610136366004610b18565b610500565b60015460009081906001600160a01b031633146101915760405162461bcd60e51b815260206004820152600f60248201526e216d617267696e466163696c69747960881b60448201526064015b60405180910390fd5b876001600160a01b031663128acb083389896101d88c6101c95760016101ba620d89e719610bae565b6101c49190610bd0565b6106b6565b6101c4620d89e7196001610bfb565b604080513360208201526001600160a01b03808e1692820192909252908b1660608201526080016040516020818303038152906040526040518663ffffffff1660e01b815260040161022e959493929190610c20565b60408051808303816000875af115801561024c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102709190610c9a565b909250905060008112156102c4578261028882610cbe565b116102bf5760405162461bcd60e51b815260206004820152600760248201526604d494e535741560cc1b6044820152606401610188565b610305565b826102ce83610cbe565b116103055760405162461bcd60e51b815260206004820152600760248201526604d494e535741560cc1b6044820152606401610188565b965096945050505050565b60015460009081906001600160a01b031633146103615760405162461bcd60e51b815260206004820152600f60248201526e216d617267696e466163696c69747960881b6044820152606401610188565b8661036c578261036e565b835b6001600160a01b03166323b872dd8933896040518463ffffffff1660e01b815260040161039d93929190610cda565b6020604051808303816000875af11580156103bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e09190610cfe565b50866103ec57836103ee565b825b6001600160a01b03166323b872dd338a886040518463ffffffff1660e01b815260040161041d93929190610cda565b6020604051808303816000875af115801561043c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104609190610cfe565b5086610475578461047087610cbe565b610480565b61047e86610cbe565b855b90999098509650505050505050565b6000546001600160a01b031633146104d25760405162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b6044820152606401610188565b600180546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055565b60025460405163089ca8dd60e01b81523360048201526001600160a01b039091169063089ca8dd90602401602060405180830381865afa158015610548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056c9190610cfe565b6105a05760405162461bcd60e51b8152602060048201526005602482015264085c1bdbdb60da1b6044820152606401610188565b600080806105b084860186610d22565b9250925092506000871315610638576040516323b872dd60e01b81526001600160a01b038316906323b872dd906105ef90869033908c90600401610cda565b6020604051808303816000875af115801561060e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106329190610cfe565b506106ad565b6040516323b872dd60e01b81526001600160a01b038216906323b872dd9061066890869033908b90600401610cda565b6020604051808303816000875af1158015610687573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ab9190610cfe565b505b50505050505050565b60008060008360020b126106cd578260020b6106d5565b8260020b6000035b9050620d89e88111156106fb576040516315e4079d60e11b815260040160405180910390fd5b60008160011660000361071257600160801b610724565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615610758576ffff97272373d413259a46990580e213a0260801c5b6004821615610777576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610796576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156107b5576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156107d4576fff973b41fa98c081472e6896dfb254c00260801c5b60408216156107f3576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615610812576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615610832576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615610852576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610872576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610892576fe7159475a2c29b7443b29c7fa6e889d90260801c5b6110008216156108b2576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156108d2576fa9f746462d870fdf8a65dc1f90e061e50260801c5b6140008216156108f2576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615610912576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615610933576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615610953576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615610972576d2216e584f5fa1ea926041bedfe980260801c5b6208000082161561098f576b048a170391f7dc42444e8fa20260801c5b60008460020b13156109b05780600019816109ac576109ac610d6d565b0490505b6401000000008106156109c45760016109c7565b60005b60ff16602082901c0192505050919050565b6001600160a01b03811681146109ee57600080fd5b50565b80151581146109ee57600080fd5b60008060008060008060c08789031215610a1857600080fd5b8635610a23816109d9565b95506020870135610a33816109f1565b9450604087013593506060870135610a4a816109d9565b92506080870135610a5a816109d9565b8092505060a087013590509295509295509295565b60008060008060008060c08789031215610a8857600080fd5b8635610a93816109d9565b95506020870135610aa3816109f1565b945060408701359350606087013592506080870135610ac1816109d9565b915060a0870135610ad1816109d9565b809150509295509295509295565b60008060408385031215610af257600080fd5b8235610afd816109d9565b91506020830135610b0d816109d9565b809150509250929050565b60008060008060608587031215610b2e57600080fd5b8435935060208501359250604085013567ffffffffffffffff80821115610b5457600080fd5b818701915087601f830112610b6857600080fd5b813581811115610b7757600080fd5b886020828501011115610b8957600080fd5b95989497505060200194505050565b634e487b7160e01b600052601160045260246000fd5b60008160020b627fffff198103610bc757610bc7610b98565b60000392915050565b600282810b9082900b03627fffff198112627fffff82131715610bf557610bf5610b98565b92915050565b600281810b9083900b01627fffff8113627fffff1982121715610bf557610bf5610b98565b600060018060a01b038088168352602087151581850152866040850152818616606085015260a06080850152845191508160a085015260005b82811015610c755785810182015185820160c001528101610c59565b5050600060c0828501015260c0601f19601f8301168401019150509695505050505050565b60008060408385031215610cad57600080fd5b505080516020909101519092909150565b6000600160ff1b8201610cd357610cd3610b98565b5060000390565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215610d1057600080fd5b8151610d1b816109f1565b9392505050565b600080600060608486031215610d3757600080fd5b8335610d42816109d9565b92506020840135610d52816109d9565b91506040840135610d62816109d9565b809150509250925092565b634e487b7160e01b600052601260045260246000fdfea2646970667358221220fbc3784765fd252c5ec58f9769f2fab663be6d39723d2b3ae79ce7c29f54892064736f6c63430008120033";

type ExecutionerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExecutionerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Executioner__factory extends ContractFactory {
  constructor(...args: ExecutionerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Executioner> {
    return super.deploy(overrides || {}) as Promise<Executioner>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Executioner {
    return super.attach(address) as Executioner;
  }
  override connect(signer: Signer): Executioner__factory {
    return super.connect(signer) as Executioner__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExecutionerInterface {
    return new utils.Interface(_abi) as ExecutionerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Executioner {
    return new Contract(address, _abi, signerOrProvider) as Executioner;
  }
}
