/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  PremiumComputer,
  PremiumComputerInterface,
} from "../../src/PremiumComputer";

const _abi = [
  {
    inputs: [],
    name: "T",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "address",
        name: "poolManager",
        type: "address",
      },
      {
        internalType: "bool",
        name: "borrowToken0",
        type: "bool",
      },
      {
        internalType: "int24",
        name: "tickDiscretization",
        type: "int24",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "pivotRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slope1",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "intercept1",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slope2",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "intercept2",
            type: "uint256",
          },
        ],
        internalType: "struct URateParam",
        name: "param",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "borrowInfo",
        type: "tuple[]",
      },
    ],
    name: "computePremium",
    outputs: [
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IUniswapV3Pool",
        name: "pool",
        type: "IUniswapV3Pool",
      },
      {
        internalType: "int24",
        name: "tickLower",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickUpper",
        type: "int24",
      },
    ],
    name: "getFeeGrowthInside",
    outputs: [
      {
        internalType: "uint256",
        name: "feeGrowthInside0X128",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeGrowthInside1X128",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "address",
        name: "poolManager",
        type: "address",
      },
      {
        internalType: "int24",
        name: "tickDiscretization",
        type: "int24",
      },
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "borrowInfo",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "pivotRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slope1",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "intercept1",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slope2",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "intercept2",
            type: "uint256",
          },
        ],
        internalType: "struct URateParam",
        name: "param",
        type: "tuple",
      },
    ],
    name: "getInitFeeGrowthInside",
    outputs: [
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "pivotRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slope1",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "intercept1",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slope2",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "intercept2",
            type: "uint256",
          },
        ],
        internalType: "struct URateParam",
        name: "param",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "uRate",
        type: "uint256",
      },
    ],
    name: "getInterestRate",
    outputs: [
      {
        internalType: "uint256",
        name: "ratePerSecond",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x611bb661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c80630d527ba91461005b57806317b474bf146100865780639887b589146100a7578063cf2778e9146100cf575b600080fd5b61006e6100693660046115d7565b6100ef565b60405161007d939291906116ec565b60405180910390f35b610099610094366004611711565b6107cd565b60405190815260200161007d565b6100ba6100b536600461173c565b610882565b6040805192835260208301919091520161007d565b6100e26100dd366004611787565b610bd7565b60405161007d919061180f565b606060008061013c60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60005b85518110156107af576101938b87838151811061015e5761015e611822565b6020026020010151600001518a89858151811061017d5761017d611822565b6020026020010151600001516100b5919061184e565b8360000184602001828152508281525050506101ee6040518060400160405280600581526020016468656c6c6f60d81b81525083600001518884815181106101dd576101dd611822565b602002602001015160600151610d39565b610219826020015187838151811061020857610208611822565b602002602001015160800151610d85565b61024286828151811061022e5761022e611822565b60200260200101516000015160020b610dcf565b6102a486828151811061025757610257611822565b6020026020010151602001516001600160801b0316600160801b88848151811061028357610283611822565b602002602001015160600151856000015103610e179092919063ffffffff16565b6040830152855161030e908790839081106102c1576102c1611822565b6020026020010151602001516001600160801b0316600160801b8884815181106102ed576102ed611822565b602002602001015160800151856020015103610e179092919063ffffffff16565b60608301528151865187908390811061032957610329611822565b60200260200101516060018181525050816020015186828151811061035057610350611822565b60200260200101516080018181525050896001600160a01b03166304ad52fc8c88848151811061038257610382611822565b6020026020010151600001518a6040518463ffffffff1660e01b81526004016103ad93929190611873565b602060405180830381865afa1580156103ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ee91906118c6565b60a0830152855186908290811061040757610407611822565b602002602001015160a001518260a0015161042291906118df565b82608001818152505061047f6040518060400160405280600b81526020016a776861747468656675636b60a81b81525083608001518460a0015189858151811061046e5761046e611822565b602002602001015160a00151610ef6565b8160a0015186828151811061049657610496611822565b602002602001015160a001818152505088610599576105516104d48783815181106104c3576104c3611822565b602002602001015160000151610f45565b6105058a8985815181106104ea576104ea611822565b602002602001015160000151610500919061184e565b610f45565b61054c89858151811061051a5761051a611822565b6020026020010151602001516001600160801b0316670de0b6b3a76400008760800151610e179092919063ffffffff16565b611268565b60808301819052606083015161056791906118f2565b8260c00181815161057891906118f2565b905250604082015160e0830180516105919083906118f2565b905250610625565b6105e16105b18783815181106104c3576104c3611822565b6105c78a8985815181106104ea576104ea611822565b6105dc89858151811061051a5761051a611822565b6112ba565b6080830181905260408301516105f791906118f2565b8260c00181815161060891906118f2565b905250606082015160e0830180516106219083906118f2565b9052505b61065d604051806040016040528060088152602001671a1bdb1e5cda1a5d60c21b815250836060015184604001518560800151610ef6565b61070d89156106bc576106b761067e8884815181106104c3576104c3611822565b6106948b8a86815181106104ea576104ea611822565b8985815181106106a6576106a6611822565b6020026020010151602001516112ba565b61132d565b6106b76106d48884815181106104c3576104c3611822565b6106ea8b8a86815181106104ea576104ea611822565b8985815181106106fc576106fc611822565b602002602001015160200151611268565b6107776040518060400160405280600d81526020016c7570646174696e67206665657360981b81525087838151811061074857610748611822565b60200260200101516060015188848151811061076657610766611822565b602002602001015160800151610d39565b816080015186828151811061078e5761078e611822565b602090810291909101015160400152806107a781611905565b91505061013f565b5060c081015160e090910151949a9099509397509295505050505050565b6000670de0b6b3a764000082111561081b5760405162461bcd60e51b815260206004820152600c60248201526b13505617d55512531256915160a21b60448201526064015b60405180910390fd5b825182101561085257604083015160208401516108419084670de0b6b3a7640000610e17565b61084b91906118f2565b905061087c565b6080830151606084015161086f9084670de0b6b3a7640000610e17565b61087991906118f2565b90505b92915050565b6000806000856001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa1580156108c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e99190611940565b505060405163f30dba9360e01b815260028b900b60048201529395506000945084936001600160a01b038c16935063f30dba939250602401905061010060405180830381865afa158015610941573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096591906119d8565b505060405163f30dba9360e01b815260028d900b600482015293975091955060009450849350506001600160a01b038c169163f30dba93915060240161010060405180830381865afa1580156109bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e391906119d8565b50505050935093505050610a2b6040518060400160405280601981526020017f67657474696e67206665652067726f77746820696e7369646500000000000000815250611372565b610a378560020b610dcf565b610a438960020b610dcf565b610a4f8860020b610dcf565b8860020b8560020b1215610a6c5781840396508083039550610bca565b8760020b8560020b1215610b5b5760008a6001600160a01b031663f30583996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ade91906118c6565b905060008b6001600160a01b031663461413196040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4491906118c6565b905083868303039850828582030397505050610bca565b610b8d6040518060400160405280600f81526020016e0eae0e0cae440cccacacee4deeee8d608b1b8152508383610d39565b610bbf6040518060400160405280600f81526020016e0d8deeecae440cccacacee4deeee8d608b1b8152508585610d39565b838203965082810395505b5050505050935093915050565b606060008060005b8551811015610d2c57610c1d89878381518110610bfe57610bfe611822565b6020026020010151600001518989858151811061017d5761017d611822565b809350819450505082868281518110610c3857610c38611822565b6020026020010151606001818152505081868281518110610c5b57610c5b611822565b60200260200101516080018181525050876001600160a01b03166304ad52fc8a888481518110610c8d57610c8d611822565b602002602001015160000151886040518463ffffffff1660e01b8152600401610cb893929190611873565b602060405180830381865afa158015610cd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf991906118c6565b868281518110610d0b57610d0b611822565b602090810291909101015160a0015280610d2481611905565b915050610bdf565b5093979650505050505050565b610d80838383604051602401610d5193929190611acc565b60408051601f198184030181529190526020810180516001600160e01b031663969cdd0360e01b1790526113b1565b505050565b6040516024810183905260448101829052610dcb9060640160408051601f198184030181529190526020810180516001600160e01b031662d81ed360e71b1790526113b1565b5050565b610e1481604051602401610de591815260200190565b60408051601f198184030181529190526020810180516001600160e01b0316634e0c1d1d60e01b1790526113b1565b50565b6000808060001985870985870292508281108382030391505080600003610e505760008411610e4557600080fd5b508290049050610eef565b808411610e885760405162461bcd60e51b815260206004820152600660248201526536bab62234bb60d11b6044820152606401610812565b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b610f3f84848484604051602401610f109493929190611adf565b60408051601f198184030181529190526020810180516001600160e01b03166304772b3360e11b1790526113b1565b50505050565b60008060008360020b12610f5c578260020b610f64565b8260020b6000035b9050620d89e8811115610f8a576040516315e4079d60e11b815260040160405180910390fd5b600081600116600003610fa157600160801b610fb3565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615610fe7576ffff97272373d413259a46990580e213a0260801c5b6004821615611006576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615611025576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615611044576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615611063576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615611082576fff2ea16466c96a3843ec78b326b528610260801c5b60808216156110a1576ffe5dee046a99a2a811c461f1969c30530260801c5b6101008216156110c1576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b6102008216156110e1576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611101576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611121576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611141576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611161576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611181576f70d869a156d2a1b890bb3df62baf32f70260801c5b6180008216156111a1576f31be135f97d08fd981231505542fcfa60260801c5b620100008216156111c2576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b620200008216156111e2576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611201576d2216e584f5fa1ea926041bedfe980260801c5b6208000082161561121e576b048a170391f7dc42444e8fa20260801c5b60008460020b131561123f57806000198161123b5761123b611b0e565b0490505b640100000000810615611253576001611256565b60005b60ff16602082901c0192505050919050565b6000826001600160a01b0316846001600160a01b03161115611288579192915b6112b26001600160801b03831661129f8686611b24565b6001600160a01b0316600160601b610e17565b949350505050565b6000826001600160a01b0316846001600160a01b031611156112da579192915b6001600160a01b0384166113236fffffffffffffffffffffffffffffffff60601b606085901b1661130b8787611b24565b6001600160a01b0316866001600160a01b0316610e17565b6112b29190611b4b565b610e148160405160240161134391815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f5b1bba960e01b1790526113b1565b610e14816040516024016113869190611b6d565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b1790525b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6001600160a01b0381168114610e1457600080fd5b8015158114610e1457600080fd5b8060020b8114610e1457600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff8111828210171561143d5761143d611404565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561146c5761146c611404565b604052919050565b600060a0828403121561148657600080fd5b60405160a0810181811067ffffffffffffffff821117156114a9576114a9611404565b806040525080915082358152602083013560208201526040830135604082015260608301356060820152608083013560808201525092915050565b6001600160801b0381168114610e1457600080fd5b600082601f83011261150a57600080fd5b8135602067ffffffffffffffff82111561152657611526611404565b611534818360051b01611443565b82815260c0928302850182019282820191908785111561155357600080fd5b8387015b858110156115ca5781818a03121561156f5760008081fd5b61157761141a565b8135611582816113f5565b815281860135611591816114e4565b8187015260408281013590820152606080830135908201526080808301359082015260a080830135908201528452928401928101611557565b5090979650505050505050565b60008060008060008061014087890312156115f157600080fd5b86356115fc816113d2565b9550602087013561160c816113d2565b9450604087013561161c816113e7565b9350606087013561162c816113f5565b925061163b8860808901611474565b915061012087013567ffffffffffffffff81111561165857600080fd5b61166489828a016114f9565b9150509295509295509295565b600081518084526020808501945080840160005b838110156116e1578151805160020b8852838101516001600160801b03168489015260408082015190890152606080820151908901526080808201519089015260a0908101519088015260c09096019590820190600101611685565b509495945050505050565b6060815260006116ff6060830186611671565b60208301949094525060400152919050565b60008060c0838503121561172457600080fd5b61172e8484611474565b9460a0939093013593505050565b60008060006060848603121561175157600080fd5b833561175c816113d2565b9250602084013561176c816113f5565b9150604084013561177c816113f5565b809150509250925092565b600080600080600061012086880312156117a057600080fd5b85356117ab816113d2565b945060208601356117bb816113d2565b935060408601356117cb816113f5565b9250606086013567ffffffffffffffff8111156117e757600080fd5b6117f3888289016114f9565b9250506118038760808801611474565b90509295509295909350565b6020815260006108796020830184611671565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600281810b9083900b01627fffff8113627fffff198212171561087c5761087c611838565b600060e08201905060018060a01b03851682528360020b6020830152825160408301526020830151606083015260408301516080830152606083015160a0830152608083015160c0830152949350505050565b6000602082840312156118d857600080fd5b5051919050565b8181038181111561087c5761087c611838565b8082018082111561087c5761087c611838565b60006001820161191757611917611838565b5060010190565b805161ffff8116811461193057600080fd5b919050565b8051611930816113e7565b600080600080600080600060e0888a03121561195b57600080fd5b8751611966816113d2565b6020890151909750611977816113f5565b95506119856040890161191e565b94506119936060890161191e565b93506119a16080890161191e565b925060a088015160ff811681146119b757600080fd5b60c08901519092506119c8816113e7565b8091505092959891949750929550565b600080600080600080600080610100898b0312156119f557600080fd5b8851611a00816114e4565b80985050602089015180600f0b8114611a1857600080fd5b80975050604089015195506060890151945060808901518060060b8114611a3e57600080fd5b60a08a0151909450611a4f816113d2565b60c08a015190935063ffffffff81168114611a6957600080fd5b9150611a7760e08a01611935565b90509295985092959890939650565b6000815180845260005b81811015611aac57602081850181015186830182015201611a90565b506000602082860101526020601f19601f83011685010191505092915050565b6060815260006116ff6060830186611a86565b608081526000611af26080830187611a86565b6020830195909552506040810192909252606090910152919050565b634e487b7160e01b600052601260045260246000fd5b6001600160a01b03828116828216039080821115611b4457611b44611838565b5092915050565b600082611b6857634e487b7160e01b600052601260045260246000fd5b500490565b6020815260006108796020830184611a8656fea2646970667358221220e2e478a2725b5b8c65134956b4015486b6ee7c665be1d01312477f36b2e2a92964736f6c63430008120033";

type PremiumComputerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PremiumComputerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PremiumComputer__factory extends ContractFactory {
  constructor(...args: PremiumComputerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PremiumComputer> {
    return super.deploy(overrides || {}) as Promise<PremiumComputer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PremiumComputer {
    return super.attach(address) as PremiumComputer;
  }
  override connect(signer: Signer): PremiumComputer__factory {
    return super.connect(signer) as PremiumComputer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PremiumComputerInterface {
    return new utils.Interface(_abi) as PremiumComputerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PremiumComputer {
    return new Contract(address, _abi, signerOrProvider) as PremiumComputer;
  }
}
