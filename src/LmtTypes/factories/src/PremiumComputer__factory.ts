/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  PremiumComputer,
  PremiumComputerInterface,
} from "../../src/PremiumComputer";

const _abi = [
  {
    inputs: [],
    name: "T",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "address",
        name: "poolManager",
        type: "address",
      },
      {
        internalType: "bool",
        name: "borrowToken0",
        type: "bool",
      },
      {
        internalType: "int24",
        name: "tickDiscretization",
        type: "int24",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "pivotRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slope1",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "intercept1",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slope2",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "intercept2",
            type: "uint256",
          },
        ],
        internalType: "struct URateParam",
        name: "param",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "Urate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "borrowInfo",
        type: "tuple[]",
      },
    ],
    name: "computePremium",
    outputs: [
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "Urate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "int24",
        name: "tickDiscretization",
        type: "int24",
      },
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "Urate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "borrowInfo",
        type: "tuple[]",
      },
    ],
    name: "getInitFeeGrowthInside",
    outputs: [
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "Urate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "pivotRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slope1",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "intercept1",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slope2",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "intercept2",
            type: "uint256",
          },
        ],
        internalType: "struct URateParam",
        name: "param",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "uRate",
        type: "uint256",
      },
    ],
    name: "getInterestRate",
    outputs: [
      {
        internalType: "uint256",
        name: "ratePerSecond",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61121a61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80630d527ba91461005057806317b474bf1461007b578063ea0531cc1461009c575b600080fd5b61006361005e366004610ed9565b6100bc565b60405161007293929190610ff7565b60405180910390f35b61008e61008936600461101c565b61064c565b604051908152602001610072565b6100af6100aa366004611047565b6106b6565b60405161007291906110a5565b606060008061010960405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008060005b87518110156106385773__$d23a8dd93b7205fa6b646ffed38c165d68$__639887b5898e8a8481518110610145576101456110b8565b6020026020010151600001518d8c8681518110610164576101646110b8565b60200260200101516000015161017a91906110e4565b6040516001600160e01b031960e086901b1681526001600160a01b039093166004840152600291820b6024840152900b60448201526064016040805180830381865af41580156101ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f29190611109565b6020860152845287516001600160a01b038d16906304ad52fc908f908b9085908110610220576102206110b8565b60209081029190910181015151604080516001600160e01b031960e087901b1681526001600160a01b03909416600485015260029190910b60248401528d516044840152908d015160648301528c0151608482015260608c015160a482015260808c015160c482015260e401602060405180830381865afa1580156102a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102cd919061112d565b60e08501528751670de0b6b3a7640000908990839081106102f0576102f06110b8565b602002602001015160c001518560e0015161030b9190611146565b6103159190611146565b60c085015260e084015161033290670de0b6b3a764000090611146565b888281518110610344576103446110b8565b602002602001015160c00181815250506103b7888281518110610369576103696110b8565b6020026020010151602001516001600160801b0316600160801b8a8481518110610395576103956110b8565b60200260200101516080015187600001516103b09190611146565b919061080e565b6080850152875161041b908990839081106103d4576103d46110b8565b6020026020010151602001516001600160801b0316600160801b8a8481518110610400576104006110b8565b602002602001015160a0015187602001516103b09190611146565b60a08501526080840151604085018051610436908390611159565b90525060a084015160608501805161044f908390611159565b90525083518851899083908110610468576104686110b8565b60200260200101516080018181525050836020015188828151811061048f5761048f6110b8565b602002602001015160a00181815250508a6105835761054a6104cd8983815181106104bc576104bc6110b8565b6020026020010151600001516108f0565b6104fe8c8b85815181106104e3576104e36110b8565b6020026020010151600001516104f991906110e4565b6108f0565b6105458b8581518110610513576105136110b8565b6020026020010151602001516001600160801b0316670de0b6b3a76400008960c0015161080e9092919063ffffffff16565b610c13565b60c0850181905260a08501516105609190611159565b61056a9084611159565b925083608001518261057c9190611159565b9150610600565b6105cb61059b8983815181106104bc576104bc6110b8565b6105b18c8b85815181106104e3576104e36110b8565b6105c68b8581518110610513576105136110b8565b610c65565b60c0850181905260808501516105e19190611159565b6105eb9084611159565b92508360a00151826105fd9190611159565b91505b8360c00151888281518110610617576106176110b8565b602090810291909101015160400152806106308161116c565b91505061010f565b50959b909a50949850939650505050505050565b815160009082101561068657604083015160208401516106759084670de0b6b3a764000061080e565b61067f9190611159565b90506106b0565b608083015160608401516106a39084670de0b6b3a764000061080e565b6106ad9190611159565b90505b92915050565b606060008060005b84518110156108005773__$d23a8dd93b7205fa6b646ffed38c165d68$__639887b589888784815181106106f4576106f46110b8565b60200260200101516000015189898681518110610713576107136110b8565b60200260200101516000015161072991906110e4565b6040516001600160e01b031960e086901b1681526001600160a01b039093166004840152600291820b6024840152900b60448201526064016040805180830381865af415801561077d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a19190611109565b8093508194505050828582815181106107bc576107bc6110b8565b60200260200101516080018181525050818582815181106107df576107df6110b8565b602090810291909101015160a00152806107f88161116c565b9150506106be565b5083925050505b9392505050565b6000808060001985870985870292508281108382030391505080600003610847576000841161083c57600080fd5b508290049050610807565b8084116108835760405162461bcd60e51b815260206004820152600660248201526536bab62234bb60d11b604482015260640160405180910390fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b60008060008360020b12610907578260020b61090f565b8260020b6000035b9050620d89e8811115610935576040516315e4079d60e11b815260040160405180910390fd5b60008160011660000361094c57600160801b61095e565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615610992576ffff97272373d413259a46990580e213a0260801c5b60048216156109b1576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b60088216156109d0576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156109ef576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615610a0e576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615610a2d576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615610a4c576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615610a6c576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615610a8c576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610aac576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610acc576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615610aec576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615610b0c576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615610b2c576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615610b4c576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615610b6d576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615610b8d576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615610bac576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615610bc9576b048a170391f7dc42444e8fa20260801c5b60008460020b1315610bea578060001981610be657610be6611185565b0490505b640100000000810615610bfe576001610c01565b60005b60ff16602082901c0192505050919050565b6000826001600160a01b0316846001600160a01b03161115610c33579192915b610c5d6001600160801b038316610c4a868661119b565b6001600160a01b0316600160601b61080e565b949350505050565b6000826001600160a01b0316846001600160a01b03161115610c85579192915b6001600160a01b038416610cce6fffffffffffffffffffffffffffffffff60601b606085901b16610cb6878761119b565b6001600160a01b0316866001600160a01b031661080e565b610c5d91906111c2565b80356001600160a01b0381168114610cef57600080fd5b919050565b8035600281900b8114610cef57600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715610d3f57610d3f610d06565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610d6e57610d6e610d06565b604052919050565b600060a08284031215610d8857600080fd5b60405160a0810181811067ffffffffffffffff82111715610dab57610dab610d06565b806040525080915082358152602083013560208201526040830135604082015260608301356060820152608083013560808201525092915050565b600082601f830112610df757600080fd5b8135602067ffffffffffffffff821115610e1357610e13610d06565b610e21818360051b01610d45565b82815260e09283028501820192828201919087851115610e4057600080fd5b8387015b85811015610ecc5781818a031215610e5c5760008081fd5b610e64610d1c565b610e6d82610cf4565b8152858201356001600160801b0381168114610e895760008081fd5b8187015260408281013590820152606080830135908201526080808301359082015260a0808301359082015260c080830135908201528452928401928101610e44565b5090979650505050505050565b6000806000806000806101408789031215610ef357600080fd5b610efc87610cd8565b9550610f0a60208801610cd8565b945060408701358015158114610f1f57600080fd5b9350610f2d60608801610cf4565b9250610f3c8860808901610d76565b915061012087013567ffffffffffffffff811115610f5957600080fd5b610f6589828a01610de6565b9150509295509295509295565b600081518084526020808501945080840160005b83811015610fec578151805160020b8852838101516001600160801b03168489015260408082015190890152606080820151908901526080808201519089015260a0808201519089015260c0908101519088015260e09096019590820190600101610f86565b509495945050505050565b60608152600061100a6060830186610f72565b60208301949094525060400152919050565b60008060c0838503121561102f57600080fd5b6110398484610d76565b9460a0939093013593505050565b60008060006060848603121561105c57600080fd5b61106584610cd8565b925061107360208501610cf4565b9150604084013567ffffffffffffffff81111561108f57600080fd5b61109b86828701610de6565b9150509250925092565b6020815260006106ad6020830184610f72565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600281810b9083900b01627fffff8113627fffff19821217156106b0576106b06110ce565b6000806040838503121561111c57600080fd5b505080516020909101519092909150565b60006020828403121561113f57600080fd5b5051919050565b818103818111156106b0576106b06110ce565b808201808211156106b0576106b06110ce565b60006001820161117e5761117e6110ce565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6001600160a01b038281168282160390808211156111bb576111bb6110ce565b5092915050565b6000826111df57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220ecef6293ae26dde7596c633a7bb6d16694f63c5212aefee8389ddde82e764e2c64736f6c63430008120033";

type PremiumComputerConstructorParams =
  | [linkLibraryAddresses: PremiumComputerLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PremiumComputerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class PremiumComputer__factory extends ContractFactory {
  constructor(...args: PremiumComputerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        PremiumComputer__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: PremiumComputerLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$d23a8dd93b7205fa6b646ffed38c165d68\\$__", "g"),
      linkLibraryAddresses["src/Util.sol:Utils"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PremiumComputer> {
    return super.deploy(overrides || {}) as Promise<PremiumComputer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PremiumComputer {
    return super.attach(address) as PremiumComputer;
  }
  override connect(signer: Signer): PremiumComputer__factory {
    return super.connect(signer) as PremiumComputer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PremiumComputerInterface {
    return new utils.Interface(_abi) as PremiumComputerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PremiumComputer {
    return new Contract(address, _abi, signerOrProvider) as PremiumComputer;
  }
}

export interface PremiumComputerLibraryAddresses {
  ["src/Util.sol:Utils"]: string;
}
