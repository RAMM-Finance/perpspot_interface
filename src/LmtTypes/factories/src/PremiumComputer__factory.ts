/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  PremiumComputer,
  PremiumComputerInterface,
} from "../../src/PremiumComputer";

const _abi = [
  {
    inputs: [],
    name: "T",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "address",
        name: "poolManager",
        type: "address",
      },
      {
        internalType: "bool",
        name: "borrowToken0",
        type: "bool",
      },
      {
        internalType: "int24",
        name: "tickDiscretization",
        type: "int24",
      },
      {
        internalType: "uint256",
        name: "timeLast",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "pivotRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slope1",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "intercept1",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slope2",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "intercept2",
            type: "uint256",
          },
        ],
        internalType: "struct URateParam",
        name: "param",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "Urate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "borrowInfo",
        type: "tuple[]",
      },
    ],
    name: "computePremium",
    outputs: [
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "Urate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "int24",
        name: "tickDiscretization",
        type: "int24",
      },
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "Urate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "borrowInfo",
        type: "tuple[]",
      },
    ],
    name: "getInitFeeGrowthInside",
    outputs: [
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "Urate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "pivotRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slope1",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "intercept1",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slope2",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "intercept2",
            type: "uint256",
          },
        ],
        internalType: "struct URateParam",
        name: "param",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "uRate",
        type: "uint256",
      },
    ],
    name: "getInterestRate",
    outputs: [
      {
        internalType: "uint256",
        name: "ratePerSecond",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6115b261003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c806317b474bf14610050578063469df3a414610076578063ea0531cc14610097575b600080fd5b61006361005e36600461114d565b6100b7565b6040519081526020015b60405180910390f35b610089610084366004611294565b610121565b60405161006d9291906113bd565b6100aa6100a53660046113df565b610745565b60405161006d919061143d565b81516000908210156100f157604083015160208401516100e09084670de0b6b3a764000061089d565b6100ea9190611466565b905061011b565b6080830151606084015161010e9084670de0b6b3a764000061089d565b6101189190611466565b90505b92915050565b6060600061016d60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000805b85518110156107335773__$d23a8dd93b7205fa6b646ffed38c165d68$__639887b5898d8884815181106101a7576101a7611479565b6020026020010151600001518c8a86815181106101c6576101c6611479565b6020026020010151600001516101dc919061148f565b6040516001600160e01b031960e086901b1681526001600160a01b039093166004840152600291820b6024840152900b60448201526064016040805180830381865af4158015610230573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025491906114b4565b6020850152835285516001600160a01b038c16906304ad52fc908e9089908590811061028257610282611479565b60209081029190910181015151604080516001600160e01b031960e087901b1681526001600160a01b03909416600485015260029190910b60248401528b516044840152908b015160648301528a0151608482015260608a015160a482015260808a015160c482015260e401602060405180830381865afa15801561030b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032f91906114d8565b60e08401528551670de0b6b3a76400009087908390811061035257610352611479565b602002602001015160c001518460e0015161036d91906114f1565b61037791906114f1565b60c084015260e083015161039490670de0b6b3a7640000906114f1565b8682815181106103a6576103a6611479565b602002602001015160c00181815250506104198682815181106103cb576103cb611479565b6020026020010151602001516001600160801b0316600160801b8884815181106103f7576103f7611479565b602002602001015160800151866000015161041291906114f1565b919061089d565b6080840152855161047d9087908390811061043657610436611479565b6020026020010151602001516001600160801b0316600160801b88848151811061046257610462611479565b602002602001015160a00151866020015161041291906114f1565b60a08401526080830151604084018051610498908390611466565b90525060a08301516060840180516104b1908390611466565b905250825186518790839081106104ca576104ca611479565b6020026020010151608001818152505082602001518682815181106104f1576104f1611479565b602002602001015160a00181815250508961062f576105ac61052f87838151811061051e5761051e611479565b602002602001015160000151610980565b6105608b89858151811061054557610545611479565b60200260200101516000015161055b919061148f565b610980565b6105a789858151811061057557610575611479565b6020026020010151602001516001600160801b0316670de0b6b3a76400008860c0015161089d9092919063ffffffff16565b610ca3565b60c0840181905260a084015187516105f4906105d4908a908690811061051e5761051e611479565b6105ea8d8b878151811061054557610545611479565b8760800151610cf5565b6105fe9190611466565b6106089190611466565b86828151811061061a5761061a611479565b602002602001015160400181815250506106f6565b61067761064787838151811061051e5761051e611479565b61065d8b89858151811061054557610545611479565b61067289858151811061057557610575611479565b610d3a565b60c08401819052608084015187516106bf9061069f908a908690811061051e5761051e611479565b6106b58d8b878151811061054557610545611479565b8760a00151610da4565b6106c99190611466565b6106d39190611466565b8682815181106106e5576106e5611479565b602002602001015160400181815250505b85818151811061070857610708611479565b6020026020010151604001518261071f9190611466565b91508061072b81611504565b915050610171565b50939a93995092975050505050505050565b606060008060005b845181101561088f5773__$d23a8dd93b7205fa6b646ffed38c165d68$__639887b5898887848151811061078357610783611479565b602002602001015160000151898986815181106107a2576107a2611479565b6020026020010151600001516107b8919061148f565b6040516001600160e01b031960e086901b1681526001600160a01b039093166004840152600291820b6024840152900b60448201526064016040805180830381865af415801561080c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083091906114b4565b80935081945050508285828151811061084b5761084b611479565b602002602001015160800181815250508185828151811061086e5761086e611479565b602090810291909101015160a001528061088781611504565b91505061074d565b5083925050505b9392505050565b60008080600019858709858702925082811083820303915050806000036108d657600084116108cb57600080fd5b508290049050610896565b8084116109135760405162461bcd60e51b815260206004820152600660248201526536bab62234bb60d11b60448201526064015b60405180910390fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b60008060008360020b12610997578260020b61099f565b8260020b6000035b9050620d89e88111156109c5576040516315e4079d60e11b815260040160405180910390fd5b6000816001166000036109dc57600160801b6109ee565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615610a22576ffff97272373d413259a46990580e213a0260801c5b6004821615610a41576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610a60576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615610a7f576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615610a9e576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615610abd576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615610adc576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615610afc576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615610b1c576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610b3c576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610b5c576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615610b7c576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615610b9c576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615610bbc576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615610bdc576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615610bfd576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615610c1d576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615610c3c576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615610c59576b048a170391f7dc42444e8fa20260801c5b60008460020b1315610c7a578060001981610c7657610c7661151d565b0490505b640100000000810615610c8e576001610c91565b60005b60ff16602082901c0192505050919050565b6000826001600160a01b0316846001600160a01b03161115610cc3579192915b610ced6001600160801b038316610cda8686611533565b6001600160a01b0316600160601b61089d565b949350505050565b6000826001600160a01b0316846001600160a01b03161115610d15579192915b6000610d22858585610de0565b9050610d318585836000610e8a565b95945050505050565b6000826001600160a01b0316846001600160a01b03161115610d5a579192915b6001600160a01b038416610d9a600160601b600160e01b03606085901b16610d828787611533565b6001600160a01b0316866001600160a01b031661089d565b610ced919061155a565b6000826001600160a01b0316846001600160a01b03161115610dc4579192915b6000610dd1858585610efa565b9050610d318585836000610f30565b6000826001600160a01b0316846001600160a01b03161115610e00579192915b6000610e23856001600160a01b0316856001600160a01b0316600160601b61089d565b90508015610e5857610e50610e4b8483610e3d8989611533565b6001600160a01b031661089d565b610fe7565b915050610896565b610e50610e4b610e76856001600160a01b038916610e3d8a8a611533565b866001600160a01b0316600160601b61089d565b6000836001600160a01b0316856001600160a01b03161115610eaa579293925b81610ed757610ed2836001600160801b03168686036001600160a01b0316600160601b61089d565b610d31565b610d31836001600160801b03168686036001600160a01b0316600160601b61102d565b6000826001600160a01b0316846001600160a01b03161115610f1a579192915b610ced610e4b83600160601b610e3d8888611533565b6000836001600160a01b0316856001600160a01b03161115610f50579293925b600160601b600160e01b03606084901b166001600160a01b038686038116908716610f7a57600080fd5b83610fb057866001600160a01b0316610f9d8383896001600160a01b031661089d565b81610faa57610faa61151d565b04610fdc565b610fdc610fc78383896001600160a01b031661102d565b886001600160a01b0316808204910615150190565b979650505050505050565b806001600160801b03811681146110285760405162461bcd60e51b81526020600482015260056024820152640858d85cdd60da1b604482015260640161090a565b919050565b600061103a84848461089d565b90506000828061104c5761104c61151d565b848609111561089657600019811061106357600080fd5b6001019392505050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156110a6576110a661106d565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156110d5576110d561106d565b604052919050565b600060a082840312156110ef57600080fd5b60405160a0810181811067ffffffffffffffff821117156111125761111261106d565b806040525080915082358152602083013560208201526040830135604082015260608301356060820152608083013560808201525092915050565b60008060c0838503121561116057600080fd5b61116a84846110dd565b9460a0939093013593505050565b80356001600160a01b038116811461102857600080fd5b8035600281900b811461102857600080fd5b600082601f8301126111b257600080fd5b8135602067ffffffffffffffff8211156111ce576111ce61106d565b6111dc818360051b016110ac565b82815260e092830285018201928282019190878511156111fb57600080fd5b8387015b858110156112875781818a0312156112175760008081fd5b61121f611083565b6112288261118f565b8152858201356001600160801b03811681146112445760008081fd5b8187015260408281013590820152606080830135908201526080808301359082015260a0808301359082015260c0808301359082015284529284019281016111ff565b5090979650505050505050565b6000806000806000806000610160888a0312156112b057600080fd5b6112b988611178565b96506112c760208901611178565b9550604088013580151581146112dc57600080fd5b94506112ea6060890161118f565b9350608088013592506113008960a08a016110dd565b915061014088013567ffffffffffffffff81111561131d57600080fd5b6113298a828b016111a1565b91505092959891949750929550565b600081518084526020808501945080840160005b838110156113b2578151805160020b8852838101516001600160801b03168489015260408082015190890152606080820151908901526080808201519089015260a0808201519089015260c0908101519088015260e0909601959082019060010161134c565b509495945050505050565b6040815260006113d06040830185611338565b90508260208301529392505050565b6000806000606084860312156113f457600080fd5b6113fd84611178565b925061140b6020850161118f565b9150604084013567ffffffffffffffff81111561142757600080fd5b611433868287016111a1565b9150509250925092565b6020815260006101186020830184611338565b634e487b7160e01b600052601160045260246000fd5b8082018082111561011b5761011b611450565b634e487b7160e01b600052603260045260246000fd5b600281810b9083900b01627fffff8113627fffff198212171561011b5761011b611450565b600080604083850312156114c757600080fd5b505080516020909101519092909150565b6000602082840312156114ea57600080fd5b5051919050565b8181038181111561011b5761011b611450565b60006001820161151657611516611450565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6001600160a01b0382811682821603908082111561155357611553611450565b5092915050565b60008261157757634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212207bc5d5d447e7d63dcd41eb4eda28529c145d2e35a0f9c24bbbb21e884ecc806e64736f6c63430008120033";

type PremiumComputerConstructorParams =
  | [linkLibraryAddresses: PremiumComputerLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PremiumComputerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class PremiumComputer__factory extends ContractFactory {
  constructor(...args: PremiumComputerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        PremiumComputer__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: PremiumComputerLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$d23a8dd93b7205fa6b646ffed38c165d68\\$__", "g"),
      linkLibraryAddresses["src/Util.sol:Utils"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PremiumComputer> {
    return super.deploy(overrides || {}) as Promise<PremiumComputer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PremiumComputer {
    return super.attach(address) as PremiumComputer;
  }
  override connect(signer: Signer): PremiumComputer__factory {
    return super.connect(signer) as PremiumComputer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PremiumComputerInterface {
    return new utils.Interface(_abi) as PremiumComputerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PremiumComputer {
    return new Contract(address, _abi, signerOrProvider) as PremiumComputer;
  }
}

export interface PremiumComputerLibraryAddresses {
  ["src/Util.sol:Utils"]: string;
}
