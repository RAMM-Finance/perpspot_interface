/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  LPManager2,
  LPManager2Interface,
} from "../../../../src/periphery/LPManager.sol/LPManager2";

const _abi = [
  {
    inputs: [],
    name: "T",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "fee",
        type: "uint24",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee0Collected",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee1Collected",
        type: "uint256",
      },
    ],
    name: "CollectedFees",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getPosition",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "token0Amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "token1Amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "token0Repaid",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "token1Repaid",
            type: "uint256",
          },
          {
            internalType: "int24",
            name: "tickLower",
            type: "int24",
          },
          {
            internalType: "int24",
            name: "tickUpper",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token0",
                type: "address",
              },
              {
                internalType: "address",
                name: "token1",
                type: "address",
              },
              {
                internalType: "uint24",
                name: "fee",
                type: "uint24",
              },
            ],
            internalType: "struct PoolKey",
            name: "key",
            type: "tuple",
          },
        ],
        internalType: "struct LPManager2.Position",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_vault",
        type: "address",
      },
      {
        internalType: "address",
        name: "_poolManager",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "lastRebalanceCenterTicks",
    outputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token0",
            type: "address",
          },
          {
            internalType: "address",
            name: "token1",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
        ],
        internalType: "struct PoolKey",
        name: "key",
        type: "tuple",
      },
      {
        internalType: "int24",
        name: "tickLower",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickUpper",
        type: "int24",
      },
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "provideLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "token0Amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "token1Amount",
        type: "uint256",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "strategist",
        type: "address",
      },
    ],
    name: "setStrategist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
    ],
    name: "withdrawLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "token0Out",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "token1Out",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611acb806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630e5ecb5414610067578063485cc955146100a35780635d001c32146100b8578063c7b9d530146100e0578063eb02c30114610117578063ee510ae014610137575b600080fd5b61007a610075366004611648565b61016d565b6040805193845260208401929092526001600160801b0316908201526060015b60405180910390f35b6100b66100b136600461171c565b61060b565b005b6100cb6100c636600461176a565b6108b7565b6040805192835260208301919091520161009a565b6100b66100ee36600461178f565b6001600160a01b03166000908152600460205260409020805460ff19811660ff90911615179055565b61012a6101253660046117ac565b610f8d565b60405161009a91906117c5565b61015a6101453660046117ac565b60066020526000908152604090205460020b81565b60405160029190910b815260200161009a565b336000908152600460205260408120548190819060ff166101c35760405162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b60448201526064015b60405180910390fd5b87516001600160a01b03858116911614806101f8576101f36101e48961109e565b6101ed8961109e565b886113c1565b610213565b6102136102048961109e565b61020d8961109e565b88611414565b9150600061271061022688612711611873565b61023091906118a6565b600054604051637802d79f60e11b8152600481018390529192506201000090046001600160a01b03169063f005af3e90602401600060405180830381600087803b15801561027d57600080fd5b505af1158015610291573d6000803e3d6000fd5b5050600380549250905060006102a6836118c8565b909155505060035460009081526005602052604090206004810180548591906006906102e3908490600160301b90046001600160801b03166118e1565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550898160040160006101000a81548162ffffff021916908360020b62ffffff160217905550888160040160036101000a81548162ffffff021916908360020b62ffffff1602179055508a8160050160008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160146101000a81548162ffffff021916908362ffffff1602179055509050506104856040518060400160405280600781526020016662616c616e636560c81b81525089866001600160801b03168a6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161043f91906001600160a01b0391909116815260200190565b602060405180830381865afa15801561045c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104809190611901565b6114ab565b60015460408051635c48cfd360e11b81528d516001600160a01b03908116600483015260208f015181166024830152918e015162ffffff16604482015260028d810b60648301528c900b60848201526001600160801b03871660a48201523060c482015291169063b8919fa69060e40160408051808303816000875af1158015610513573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610537919061191a565b825491975095508690829060009061055090849061193e565b925050819055508481600101600082825461056b919061193e565b90915550506000546201000090046001600160a01b0316633bc034bd8461059b576105968785611951565b6105a5565b6105a58885611951565b6040516001600160e01b031960e084901b168152600481019190915260006024820152604401600060405180830381600087803b1580156105e557600080fd5b505af11580156105f9573d6000803e3d6000fd5b50505050505050955095509592505050565b600054610100900460ff161580801561062b5750600054600160ff909116105b806106455750303b158015610645575060005460ff166001145b6106a85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016101ba565b6000805460ff1916600117905580156106cb576000805461ff0019166101001790555b6000805462010000600160b01b031916620100006001600160a01b03868116820292909217808455600180546001600160a01b03199081168886161790915560028054339216919091179055604080516338d52e0f60e01b8152905192909104909216916338d52e0f9160048083019260209291908290030181865afa158015610759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077d9190611964565b60405163095ea7b360e01b81526001600160a01b03858116600483015260001960248301529192509082169063095ea7b3906044016020604051808303816000875af11580156107d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f59190611981565b5060405163095ea7b360e01b81526001600160a01b038581166004830152600019602483015282169063095ea7b3906044016020604051808303816000875af1158015610846573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086a9190611981565b505080156108b2576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b33600090815260046020526040812054819060ff166109065760405162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b60448201526064016101ba565b600084815260056020526040902060048101546001600160801b03600160301b909104811690851611156109625760405162461bcd60e51b81526020600482015260036024820152626c697160e81b60448201526064016101ba565b838160040160068282829054906101000a90046001600160801b031661098891906119a3565b82546101009290920a6001600160801b03818102199093169183160217909155600154600484810154604051632afe5e3960e21b815260058701546001600160a01b03908116938201939093526006870154808416602483015262ffffff60a09190911c166044820152600282810b6064830152630100000090920490910b608482015292881660a484015216915063abf978e49060c40160408051808303816000875af1158015610a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a62919061191a565b6001546004848101546040516319fa103360e01b815260058701546001600160a01b03908116938201939093526006870154808416602483015260a01c62ffffff166044820152600282810b6064830152630100000090920490910b60848201529396509194506000928392909116906319fa10339060a40160408051808303816000875af1158015610af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1d91906119c3565b600685015460058601546040805162ffffff600160a01b85041681526001600160801b03868116602083015285168183015290519496509294506001600160a01b03918216939116917f0816a24e8386ec3fc6e374f1f9bc5f0848092a414747df77251edaabd79ce94b919081900360600190a3610ba46001600160801b0383168661193e565b9450610bb96001600160801b0382168561193e565b935084836002016000828254610bcf919061193e565b9250508190555083836003016000828254610bea919061193e565b909155505060048301546064600160301b9091046001600160801b031611610f835782546002840154600091610c1f916119f2565b9050600084600101548560030154610c3791906119f2565b855490915015610db3576000548554604051633bc034bd60e01b8152600481019190915260248101849052620100009091046001600160a01b031690633bc034bd90604401600060405180830381600087803b158015610c9657600080fd5b505af1158015610caa573d6000803e3d6000fd5b505050506006850154600054600387015460405163095ea7b360e01b81526001600160a01b036201000090930483166004820152602481019190915291169063095ea7b3906044016020604051808303816000875af1158015610d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d359190611981565b5060005460038601546006870154604051634b390ec560e11b815260048101929092526001600160a01b03908116602483015262010000909204909116906396721d8a90604401600060405180830381600087803b158015610d9657600080fd5b505af1158015610daa573d6000803e3d6000fd5b50505050610f24565b6000546001860154604051633bc034bd60e01b8152600481019190915260248101839052620100009091046001600160a01b031690633bc034bd90604401600060405180830381600087803b158015610e0b57600080fd5b505af1158015610e1f573d6000803e3d6000fd5b505050506005850154600054600287015460405163095ea7b360e01b81526001600160a01b036201000090930483166004820152602481019190915291169063095ea7b3906044016020604051808303816000875af1158015610e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaa9190611981565b5060005460028601546005870154604051634b390ec560e11b815260048101929092526001600160a01b03908116602483015262010000909204909116906396721d8a90604401600060405180830381600087803b158015610f0b57600080fd5b505af1158015610f1f573d6000803e3d6000fd5b505050505b505060008781526005602081905260408220828155600181018390556002810183905560038101929092556004820180546001600160b01b0319169055810180546001600160a01b031916905560060180546001600160b81b03191690555b5050509250929050565b610fe860408051610100810182526000808252602080830182905282840182905260608084018390526080840183905260a0840183905260c0840183905284519081018552828152908101829052928301529060e082015290565b5060009081526005602081815260409283902083516101008101855281548152600182015481840152600280830154828701526003830154606080840191909152600484015480830b60808501526301000000810490920b60a0840152600160301b9091046001600160801b031660c083015285519081018652938201546001600160a01b03908116855260069092015491821692840192909252600160a01b900462ffffff169282019290925260e082015290565b60008060008360020b126110b5578260020b6110bd565b8260020b6000035b9050620d89e88111156110e3576040516315e4079d60e11b815260040160405180910390fd5b6000816001166000036110fa57600160801b61110c565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615611140576ffff97272373d413259a46990580e213a0260801c5b600482161561115f576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b600882161561117e576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b601082161561119d576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156111bc576fff973b41fa98c081472e6896dfb254c00260801c5b60408216156111db576fff2ea16466c96a3843ec78b326b528610260801c5b60808216156111fa576ffe5dee046a99a2a811c461f1969c30530260801c5b61010082161561121a576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b61020082161561123a576ff987a7253ac413176f2b074cf7815e540260801c5b61040082161561125a576ff3392b0822b70005940c7a398e4b70f30260801c5b61080082161561127a576fe7159475a2c29b7443b29c7fa6e889d90260801c5b61100082161561129a576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156112ba576fa9f746462d870fdf8a65dc1f90e061e50260801c5b6140008216156112da576f70d869a156d2a1b890bb3df62baf32f70260801c5b6180008216156112fa576f31be135f97d08fd981231505542fcfa60260801c5b6201000082161561131b576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b6202000082161561133b576e5d6af8dedb81196699c329225ee6040260801c5b6204000082161561135a576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611377576b048a170391f7dc42444e8fa20260801c5b60008460020b131561139857806000198161139457611394611890565b0490505b6401000000008106156113ac5760016113af565b60005b60ff16602082901c0192505050919050565b6000826001600160a01b0316846001600160a01b031611156113e1579192915b61140a61140583600160601b6113f78888611a12565b6001600160a01b03166114fa565b6115ac565b90505b9392505050565b6000826001600160a01b0316846001600160a01b03161115611434579192915b6000611457856001600160a01b0316856001600160a01b0316600160601b6114fa565b905080156114795761147161140584836113f78989611a12565b91505061140d565b611471611405611497856001600160a01b0389166113f78a8a611a12565b866001600160a01b0316600160601b6114fa565b6114f4848484846040516024016114c59493929190611a32565b60408051601f198184030181529190526020810180516001600160e01b03166304772b3360e11b1790526115f2565b50505050565b6000808060001985870985870292508281108382030391505080600003611533576000841161152857600080fd5b50829004905061140d565b80841161153f57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b806001600160801b03811681146115ed5760405162461bcd60e51b81526020600482015260056024820152640858d85cdd60da1b60448201526064016101ba565b919050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6001600160a01b038116811461162857600080fd5b50565b80356115ed81611613565b8035600281900b81146115ed57600080fd5b600080600080600085870360e081121561166157600080fd5b606081121561166f57600080fd5b506040516060810181811067ffffffffffffffff821117156116a157634e487b7160e01b600052604160045260246000fd5b60405286356116af81611613565b815260208701356116bf81611613565b6020820152604087013562ffffff811681146116da57600080fd5b604082015294506116ed60608701611636565b93506116fb60808701611636565b925060a0860135915061171060c0870161162b565b90509295509295909350565b6000806040838503121561172f57600080fd5b823561173a81611613565b9150602083013561174a81611613565b809150509250929050565b6001600160801b038116811461162857600080fd5b6000806040838503121561177d57600080fd5b82359150602083013561174a81611755565b6000602082840312156117a157600080fd5b813561140d81611613565b6000602082840312156117be57600080fd5b5035919050565b60006101408201905082518252602083015160208301526040830151604083015260608301516060830152608083015160020b608083015260a083015160020b60a08301526001600160801b0360c08401511660c083015260e083015161185660e084018280516001600160a01b0390811683526020808301519091169083015260409081015162ffffff16910152565b5092915050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761188a5761188a61185d565b92915050565b634e487b7160e01b600052601260045260246000fd5b6000826118c357634e487b7160e01b600052601260045260246000fd5b500490565b6000600182016118da576118da61185d565b5060010190565b6001600160801b038181168382160190808211156118565761185661185d565b60006020828403121561191357600080fd5b5051919050565b6000806040838503121561192d57600080fd5b505080516020909101519092909150565b8082018082111561188a5761188a61185d565b8181038181111561188a5761188a61185d565b60006020828403121561197657600080fd5b815161140d81611613565b60006020828403121561199357600080fd5b8151801515811461140d57600080fd5b6001600160801b038281168282160390808211156118565761185661185d565b600080604083850312156119d657600080fd5b82516119e181611755565b602084015190925061174a81611755565b81810360008312801583831316838312821617156118565761185661185d565b6001600160a01b038281168282160390808211156118565761185661185d565b608081526000855180608084015260005b81811015611a6057602081890181015160a0868401015201611a43565b50600060a0828501015260a0601f19601f8301168401019150508460208301528360408301528260608301529594505050505056fea26469706673582212200d517fadbc2e4d655e817f93da8f9cada1f4f7e8d9dd169c55c5781559e4b6ce64736f6c63430008120033";

type LPManager2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LPManager2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LPManager2__factory extends ContractFactory {
  constructor(...args: LPManager2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LPManager2> {
    return super.deploy(overrides || {}) as Promise<LPManager2>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LPManager2 {
    return super.attach(address) as LPManager2;
  }
  override connect(signer: Signer): LPManager2__factory {
    return super.connect(signer) as LPManager2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LPManager2Interface {
    return new utils.Interface(_abi) as LPManager2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LPManager2 {
    return new Contract(address, _abi, signerOrProvider) as LPManager2;
  }
}
