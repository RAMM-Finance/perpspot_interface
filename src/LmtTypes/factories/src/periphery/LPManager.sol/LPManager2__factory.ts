/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  LPManager2,
  LPManager2Interface,
} from "../../../../src/periphery/LPManager.sol/LPManager2";

const _abi = [
  {
    inputs: [],
    name: "T",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "fee",
        type: "uint24",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee0Collected",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee1Collected",
        type: "uint256",
      },
    ],
    name: "CollectedFees",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getPosition",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "token0Amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "token1Amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "token0Repaid",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "token1Repaid",
            type: "uint256",
          },
          {
            internalType: "int24",
            name: "tickLower",
            type: "int24",
          },
          {
            internalType: "int24",
            name: "tickUpper",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token0",
                type: "address",
              },
              {
                internalType: "address",
                name: "token1",
                type: "address",
              },
              {
                internalType: "uint24",
                name: "fee",
                type: "uint24",
              },
            ],
            internalType: "struct PoolKey",
            name: "key",
            type: "tuple",
          },
        ],
        internalType: "struct LPManager2.Position",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_vault",
        type: "address",
      },
      {
        internalType: "address",
        name: "_poolManager",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token0",
            type: "address",
          },
          {
            internalType: "address",
            name: "token1",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
        ],
        internalType: "struct PoolKey",
        name: "key",
        type: "tuple",
      },
      {
        internalType: "int24",
        name: "tickLower",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickUpper",
        type: "int24",
      },
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "provideLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "token0Amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "token1Amount",
        type: "uint256",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "strategist",
        type: "address",
      },
    ],
    name: "setStrategist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
    ],
    name: "withdrawLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "token0Out",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "token1Out",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611ab6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630e5ecb541461005c578063485cc955146100985780635d001c32146100ad578063c7b9d530146100d5578063eb02c3011461010c575b600080fd5b61006f61006a366004611633565b61012c565b6040805193845260208401929092526001600160801b0316908201526060015b60405180910390f35b6100ab6100a6366004611707565b6105ca565b005b6100c06100bb366004611755565b610876565b6040805192835260208301919091520161008f565b6100ab6100e336600461177a565b6001600160a01b03166000908152600460205260409020805460ff19811660ff90911615179055565b61011f61011a366004611797565b610f4c565b60405161008f91906117b0565b336000908152600460205260408120548190819060ff166101825760405162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b60448201526064015b60405180910390fd5b87516001600160a01b03858116911614806101b7576101b26101a38961105d565b6101ac8961105d565b88611380565b6101d2565b6101d26101c38961105d565b6101cc8961105d565b886113d3565b915060006127106101e58861271161185e565b6101ef9190611891565b600054604051637802d79f60e11b8152600481018390529192506201000090046001600160a01b03169063f005af3e90602401600060405180830381600087803b15801561023c57600080fd5b505af1158015610250573d6000803e3d6000fd5b505060038054925090506000610265836118b3565b909155505060035460009081526005602052604090206004810180548591906006906102a2908490600160301b90046001600160801b03166118cc565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550898160040160006101000a81548162ffffff021916908360020b62ffffff160217905550888160040160036101000a81548162ffffff021916908360020b62ffffff1602179055508a8160050160008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160146101000a81548162ffffff021916908362ffffff1602179055509050506104446040518060400160405280600781526020016662616c616e636560c81b81525089866001600160801b03168a6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016103fe91906001600160a01b0391909116815260200190565b602060405180830381865afa15801561041b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043f91906118ec565b61146a565b60015460408051635c48cfd360e11b81528d516001600160a01b03908116600483015260208f015181166024830152918e015162ffffff16604482015260028d810b60648301528c900b60848201526001600160801b03871660a48201523060c482015291169063b8919fa69060e40160408051808303816000875af11580156104d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f69190611905565b825491975095508690829060009061050f908490611929565b925050819055508481600101600082825461052a9190611929565b90915550506000546201000090046001600160a01b0316633bc034bd8461055a57610555878561193c565b610564565b610564888561193c565b6040516001600160e01b031960e084901b168152600481019190915260006024820152604401600060405180830381600087803b1580156105a457600080fd5b505af11580156105b8573d6000803e3d6000fd5b50505050505050955095509592505050565b600054610100900460ff16158080156105ea5750600054600160ff909116105b806106045750303b158015610604575060005460ff166001145b6106675760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610179565b6000805460ff19166001179055801561068a576000805461ff0019166101001790555b6000805462010000600160b01b031916620100006001600160a01b03868116820292909217808455600180546001600160a01b03199081168886161790915560028054339216919091179055604080516338d52e0f60e01b8152905192909104909216916338d52e0f9160048083019260209291908290030181865afa158015610718573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073c919061194f565b60405163095ea7b360e01b81526001600160a01b03858116600483015260001960248301529192509082169063095ea7b3906044016020604051808303816000875af1158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b4919061196c565b5060405163095ea7b360e01b81526001600160a01b038581166004830152600019602483015282169063095ea7b3906044016020604051808303816000875af1158015610805573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610829919061196c565b50508015610871576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b33600090815260046020526040812054819060ff166108c55760405162461bcd60e51b815260206004820152600b60248201526a085cdd1c985d1959da5cdd60aa1b6044820152606401610179565b600084815260056020526040902060048101546001600160801b03600160301b909104811690851611156109215760405162461bcd60e51b81526020600482015260036024820152626c697160e81b6044820152606401610179565b838160040160068282829054906101000a90046001600160801b0316610947919061198e565b82546101009290920a6001600160801b03818102199093169183160217909155600154600484810154604051632afe5e3960e21b815260058701546001600160a01b03908116938201939093526006870154808416602483015262ffffff60a09190911c166044820152600282810b6064830152630100000090920490910b608482015292881660a484015216915063abf978e49060c40160408051808303816000875af11580156109fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a219190611905565b6001546004848101546040516319fa103360e01b815260058701546001600160a01b03908116938201939093526006870154808416602483015260a01c62ffffff166044820152600282810b6064830152630100000090920490910b60848201529396509194506000928392909116906319fa10339060a40160408051808303816000875af1158015610ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adc91906119ae565b600685015460058601546040805162ffffff600160a01b85041681526001600160801b03868116602083015285168183015290519496509294506001600160a01b03918216939116917f0816a24e8386ec3fc6e374f1f9bc5f0848092a414747df77251edaabd79ce94b919081900360600190a3610b636001600160801b03831686611929565b9450610b786001600160801b03821685611929565b935084836002016000828254610b8e9190611929565b9250508190555083836003016000828254610ba99190611929565b909155505060048301546064600160301b9091046001600160801b031611610f425782546002840154600091610bde916119dd565b9050600084600101548560030154610bf691906119dd565b855490915015610d72576000548554604051633bc034bd60e01b8152600481019190915260248101849052620100009091046001600160a01b031690633bc034bd90604401600060405180830381600087803b158015610c5557600080fd5b505af1158015610c69573d6000803e3d6000fd5b505050506006850154600054600387015460405163095ea7b360e01b81526001600160a01b036201000090930483166004820152602481019190915291169063095ea7b3906044016020604051808303816000875af1158015610cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf4919061196c565b5060005460038601546006870154604051634b390ec560e11b815260048101929092526001600160a01b03908116602483015262010000909204909116906396721d8a90604401600060405180830381600087803b158015610d5557600080fd5b505af1158015610d69573d6000803e3d6000fd5b50505050610ee3565b6000546001860154604051633bc034bd60e01b8152600481019190915260248101839052620100009091046001600160a01b031690633bc034bd90604401600060405180830381600087803b158015610dca57600080fd5b505af1158015610dde573d6000803e3d6000fd5b505050506005850154600054600287015460405163095ea7b360e01b81526001600160a01b036201000090930483166004820152602481019190915291169063095ea7b3906044016020604051808303816000875af1158015610e45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e69919061196c565b5060005460028601546005870154604051634b390ec560e11b815260048101929092526001600160a01b03908116602483015262010000909204909116906396721d8a90604401600060405180830381600087803b158015610eca57600080fd5b505af1158015610ede573d6000803e3d6000fd5b505050505b505060008781526005602081905260408220828155600181018390556002810183905560038101929092556004820180546001600160b01b0319169055810180546001600160a01b031916905560060180546001600160b81b03191690555b5050509250929050565b610fa760408051610100810182526000808252602080830182905282840182905260608084018390526080840183905260a0840183905260c0840183905284519081018552828152908101829052928301529060e082015290565b5060009081526005602081815260409283902083516101008101855281548152600182015481840152600280830154828701526003830154606080840191909152600484015480830b60808501526301000000810490920b60a0840152600160301b9091046001600160801b031660c083015285519081018652938201546001600160a01b03908116855260069092015491821692840192909252600160a01b900462ffffff169282019290925260e082015290565b60008060008360020b12611074578260020b61107c565b8260020b6000035b9050620d89e88111156110a2576040516315e4079d60e11b815260040160405180910390fd5b6000816001166000036110b957600160801b6110cb565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff16905060028216156110ff576ffff97272373d413259a46990580e213a0260801c5b600482161561111e576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b600882161561113d576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b601082161561115c576fffcb9843d60f6159c9db58835c9266440260801c5b602082161561117b576fff973b41fa98c081472e6896dfb254c00260801c5b604082161561119a576fff2ea16466c96a3843ec78b326b528610260801c5b60808216156111b9576ffe5dee046a99a2a811c461f1969c30530260801c5b6101008216156111d9576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b6102008216156111f9576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611219576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611239576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611259576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611279576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611299576f70d869a156d2a1b890bb3df62baf32f70260801c5b6180008216156112b9576f31be135f97d08fd981231505542fcfa60260801c5b620100008216156112da576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b620200008216156112fa576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611319576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611336576b048a170391f7dc42444e8fa20260801c5b60008460020b13156113575780600019816113535761135361187b565b0490505b64010000000081061561136b57600161136e565b60005b60ff16602082901c0192505050919050565b6000826001600160a01b0316846001600160a01b031611156113a0579192915b6113c96113c483600160601b6113b688886119fd565b6001600160a01b03166114b9565b611597565b90505b9392505050565b6000826001600160a01b0316846001600160a01b031611156113f3579192915b6000611416856001600160a01b0316856001600160a01b0316600160601b6114b9565b90508015611438576114306113c484836113b689896119fd565b9150506113cc565b6114306113c4611456856001600160a01b0389166113b68a8a6119fd565b866001600160a01b0316600160601b6114b9565b6114b3848484846040516024016114849493929190611a1d565b60408051601f198184030181529190526020810180516001600160e01b03166304772b3360e11b1790526115dd565b50505050565b60008080600019858709858702925082811083820303915050806000036114f257600084116114e757600080fd5b5082900490506113cc565b80841161152a5760405162461bcd60e51b815260206004820152600660248201526536bab62234bb60d11b6044820152606401610179565b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b806001600160801b03811681146115d85760405162461bcd60e51b81526020600482015260056024820152640858d85cdd60da1b6044820152606401610179565b919050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6001600160a01b038116811461161357600080fd5b50565b80356115d8816115fe565b8035600281900b81146115d857600080fd5b600080600080600085870360e081121561164c57600080fd5b606081121561165a57600080fd5b506040516060810181811067ffffffffffffffff8211171561168c57634e487b7160e01b600052604160045260246000fd5b604052863561169a816115fe565b815260208701356116aa816115fe565b6020820152604087013562ffffff811681146116c557600080fd5b604082015294506116d860608701611621565b93506116e660808701611621565b925060a086013591506116fb60c08701611616565b90509295509295909350565b6000806040838503121561171a57600080fd5b8235611725816115fe565b91506020830135611735816115fe565b809150509250929050565b6001600160801b038116811461161357600080fd5b6000806040838503121561176857600080fd5b82359150602083013561173581611740565b60006020828403121561178c57600080fd5b81356113cc816115fe565b6000602082840312156117a957600080fd5b5035919050565b60006101408201905082518252602083015160208301526040830151604083015260608301516060830152608083015160020b608083015260a083015160020b60a08301526001600160801b0360c08401511660c083015260e083015161184160e084018280516001600160a01b0390811683526020808301519091169083015260409081015162ffffff16910152565b5092915050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761187557611875611848565b92915050565b634e487b7160e01b600052601260045260246000fd5b6000826118ae57634e487b7160e01b600052601260045260246000fd5b500490565b6000600182016118c5576118c5611848565b5060010190565b6001600160801b0381811683821601908082111561184157611841611848565b6000602082840312156118fe57600080fd5b5051919050565b6000806040838503121561191857600080fd5b505080516020909101519092909150565b8082018082111561187557611875611848565b8181038181111561187557611875611848565b60006020828403121561196157600080fd5b81516113cc816115fe565b60006020828403121561197e57600080fd5b815180151581146113cc57600080fd5b6001600160801b0382811682821603908082111561184157611841611848565b600080604083850312156119c157600080fd5b82516119cc81611740565b602084015190925061173581611740565b818103600083128015838313168383128216171561184157611841611848565b6001600160a01b0382811682821603908082111561184157611841611848565b608081526000855180608084015260005b81811015611a4b57602081890181015160a0868401015201611a2e565b50600060a0828501015260a0601f19601f8301168401019150508460208301528360408301528260608301529594505050505056fea26469706673582212207ea53b9dff687952f0c41810c7c86243ae57fb7f399cd2447757a056c976b89d64736f6c63430008120033";

type LPManager2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LPManager2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LPManager2__factory extends ContractFactory {
  constructor(...args: LPManager2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LPManager2> {
    return super.deploy(overrides || {}) as Promise<LPManager2>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LPManager2 {
    return super.attach(address) as LPManager2;
  }
  override connect(signer: Signer): LPManager2__factory {
    return super.connect(signer) as LPManager2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LPManager2Interface {
    return new utils.Interface(_abi) as LPManager2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LPManager2 {
    return new Contract(address, _abi, signerOrProvider) as LPManager2;
  }
}
