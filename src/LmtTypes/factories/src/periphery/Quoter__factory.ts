/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { Quoter, QuoterInterface } from "../../../src/periphery/Quoter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_quoterV2",
        type: "address",
      },
      {
        internalType: "address",
        name: "_poolManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getPoolKeys",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token0",
            type: "address",
          },
          {
            internalType: "address",
            name: "token1",
            type: "address",
          },
          {
            internalType: "string",
            name: "symbol0",
            type: "string",
          },
          {
            internalType: "string",
            name: "symbol1",
            type: "string",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "string",
            name: "name0",
            type: "string",
          },
          {
            internalType: "string",
            name: "name1",
            type: "string",
          },
          {
            internalType: "uint8",
            name: "decimals0",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "decimals1",
            type: "uint8",
          },
          {
            internalType: "uint160",
            name: "sqrtPriceX96",
            type: "uint160",
          },
        ],
        internalType: "struct Quoter.PoolInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token0",
                type: "address",
              },
              {
                internalType: "address",
                name: "token1",
                type: "address",
              },
              {
                internalType: "uint24",
                name: "fee",
                type: "uint24",
              },
            ],
            internalType: "struct PoolKey",
            name: "poolKey",
            type: "tuple",
          },
          {
            internalType: "bool",
            name: "isToken0",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "marginInInput",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "marginInOutput",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowAmount",
            type: "uint256",
          },
          {
            internalType: "contract IQuoterV2",
            name: "quoter",
            type: "address",
          },
          {
            internalType: "bool",
            name: "marginInPosToken",
            type: "bool",
          },
        ],
        internalType: "struct Quoter.QuoteExactInputParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "quoteExactInput",
    outputs: [
      {
        internalType: "uint256",
        name: "swapInput",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "positionOutput",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrowRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "avgPrice",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "borrowInfo",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001acd38038062001acd833981016040819052620000349162000083565b600080546001600160a01b039384166001600160a01b03199182161790915560018054929093169116179055620000bb565b80516001600160a01b03811681146200007e57600080fd5b919050565b600080604083850312156200009757600080fd5b620000a28362000066565b9150620000b26020840162000066565b90509250929050565b611a0280620000cb6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063b1b873a21461003b578063d183feee14610069575b600080fd5b61004e610049366004610ef3565b61007e565b60405161006096959493929190610f52565b60405180910390f35b610071610736565b6040516100609190611014565b600080808080606081806100996101008a0160e08b01611161565b6001600160a01b0316146100bd576100b8610100890160e08a01611161565b6100ca565b6000546001600160a01b03165b90506100d4610e3f565b600154604051632411122160e11b81526001600160a01b0390911690634822244290610104908c906004016111da565b602060405180830381865afa158015610121573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014591906111ee565b6080820152600154604051639525092360e01b81526001600160a01b039091169063952509239061017a908c906004016111da565b6101c060405180830381865afa158015610198573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101bc91906112c3565b60a084015260020b60208301526001600160a01b0390811682526001546080830151604051636361616560e11b8152600481019190915291169063c6c2c2ca9060240160a060405180830381865afa15801561021c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024091906113ce565b505050506001600160801b031660408281019190915281518151633850c7bd60e01b815291516001600160a01b0390911691633850c7bd9160048083019260e09291908290030181865afa15801561029c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c0919061144b565b5050506001600160a01b039093166060850152506102e99150506101208a016101008b016114d7565b1561046d57604081015161030b9060c08b013590670de0b6b3a7640000610d5c565b945061031b8560c08b013561150a565b9750816001600160a01b031663c6a5026a6040518060a001604052808c606001602081019061034a91906114d7565b6103605761035b60208e018e611161565b610370565b61037060408e0160208f01611161565b6001600160a01b0316815260200161038e60808e0160608f016114d7565b6103a7576103a260408e0160208f01611161565b6103b4565b6103b460208e018e611161565b6001600160a01b031681526020018b81526020018c60000160400160208101906103de919061151d565b62ffffff16815260006020909101526040516001600160e01b031960e084901b16815261040e919060040161153a565b6080604051808303816000875af115801561042d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104519190611582565b5091985061046691505060a08a0135886115d4565b96506105f4565b604081015161049890670de0b6b3a764000061049160c08d013560808e01356115d4565b9190610d5c565b945060c08901356104ad8660808c013561150a565b6104b791906115d4565b9750816001600160a01b031663c6a5026a6040518060a001604052808c60600160208101906104e691906114d7565b6104fc576104f760208e018e611161565b61050c565b61050c60408e0160208f01611161565b6001600160a01b0316815260200161052a60808e0160608f016114d7565b6105435761053e60408e0160208f01611161565b610550565b61055060208e018e611161565b6001600160a01b031681526020018b81526020018c600001604001602081019061057a919061151d565b62ffffff16815260006020909101526040516001600160e01b031960e084901b1681526105aa919060040161153a565b6080604051808303816000875af11580156105c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ed9190611582565b5091985050505b6001546001600160a01b031663ad16ab7e8a60c081013561061b60808301606084016114d7565b8b86606001516040518663ffffffff1660e01b81526004016106419594939291906115e7565b600060405180830381865afa15801561065e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106869190810190611645565b8251600154602085015160a086015151608087015160405163aa7532af60e01b8152969a5094985073__$eacbb88ed4bd2af84aa4d43bcf675bcf7e$__9563aa7532af956106e895946001600160a01b03169392918b91600091600401611785565b602060405180830381865af4158015610705573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072991906111ee565b9550505091939550919395565b60606000600160009054906101000a90046001600160a01b03166001600160a01b031663d41dcbea6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561078d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107b5919081019061181a565b90506000815167ffffffffffffffff8111156107d3576107d361121e565b60405190808252806020026020018201604052801561085457816020015b60408051610140810182526000808252602080830182905260609383018490528383018490526080830182905260a0830184905260c083019390935260e08201819052610100820181905261012082015282526000199092019101816107f15790505b50905060005b8251811015610d55576000838281518110610877576108776118b4565b60200260200101516001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e091906118ca565b905060008483815181106108f6576108f66118b4565b60200260200101516001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561093b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095f91906118ca565b90506000858481518110610975576109756118b4565b60200260200101516001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa1580156109ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109de919061144b565b5050505050509050604051806101400160405280846001600160a01b03168152602001836001600160a01b03168152602001846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a4e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a7691908101906118e7565b8152602001836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610ab9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ae191908101906118e7565b8152602001878681518110610af857610af86118b4565b60200260200101516001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b61919061197b565b62ffffff168152602001846001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610ba9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bd191908101906118e7565b8152602001836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610c14573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c3c91908101906118e7565b8152602001846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca39190611998565b60ff168152602001836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ce9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0d9190611998565b60ff168152602001826001600160a01b0316815250858581518110610d3457610d346118b4565b60200260200101819052505050508080610d4d906119b3565b91505061085a565b5092915050565b6000808060001985870985870292508281108382030391505080600003610d955760008411610d8a57600080fd5b508290049050610e38565b808411610dd15760405162461bcd60e51b815260206004820152600660248201526536bab62234bb60d11b604482015260640160405180910390fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b6040805160c08101825260008082526020820181905291810182905260608101829052608081019190915260a08101610e76610e7b565b905290565b6040518060e00160405280610ebf6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001600081526020016000815260200160008152602001600061ffff16815260200160008152602001600081525090565b60006101208284031215610f0657600080fd5b50919050565b805160020b82526001600160801b03602082015116602083015260408101516040830152606081015160608301526080810151608083015260a081015160a08301525050565b600060c0808301898452602089818601528860408601528760608601528660808601528260a086015281865180845260e087019150828801935060005b81811015610fb257610fa2838651610f0c565b9383019391850191600101610f8f565b50909c9b505050505050505050505050565b60005b83811015610fdf578181015183820152602001610fc7565b50506000910152565b60008151808452611000816020860160208601610fc4565b601f01601f19169290920160200192915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561113b57888303603f19018552815180516001600160a01b03168452610140818901516001600160a01b038116868b01525087820151818987015261108682870182610fe8565b915050606080830151868303828801526110a08382610fe8565b925050506080808301516110ba8288018262ffffff169052565b505060a080830151868303828801526110d38382610fe8565b9250505060c080830151868303828801526110ee8382610fe8565b9250505060e0808301516111068288018260ff169052565b50506101008281015160ff1690860152610120918201516001600160a01b03169190940152938601939086019060010161103b565b509098975050505050505050565b6001600160a01b038116811461115e57600080fd5b50565b60006020828403121561117357600080fd5b8135610e3881611149565b62ffffff8116811461115e57600080fd5b803561119a81611149565b6001600160a01b0390811683526020820135906111b682611149565b16602083015260408101356111ca8161117e565b62ffffff81166040840152505050565b606081016111e8828461118f565b92915050565b60006020828403121561120057600080fd5b5051919050565b8051600281900b811461121957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156112575761125761121e565b60405290565b60405160c0810167ffffffffffffffff811182821017156112575761125761121e565b604051601f8201601f1916810167ffffffffffffffff811182821017156112a9576112a961121e565b604052919050565b805161ffff8116811461121957600080fd5b60008060008385036101c08112156112da57600080fd5b84516112e581611149565b93506112f360208601611207565b9250603f19016101808082121561130957600080fd5b611311611234565b60c083121561131f57600080fd5b61132761125d565b925060408701518352606087015160208401526080870151604084015260a0870151606084015260c0870151608084015260e087015160a084015282815261010087015160208201526101208701516040820152610140870151606082015261139361016088016112b1565b60808201529086015160a08201526101a09095015160c08601525091949093509050565b80516001600160801b038116811461121957600080fd5b600080600080600060a086880312156113e657600080fd5b6113ef866113b7565b94506113fd602087016113b7565b935061140b604087016113b7565b9250611419606087016113b7565b9150608086015190509295509295909350565b805160ff8116811461121957600080fd5b801515811461115e57600080fd5b600080600080600080600060e0888a03121561146657600080fd5b875161147181611149565b965061147f60208901611207565b955061148d604089016112b1565b945061149b606089016112b1565b93506114a9608089016112b1565b92506114b760a0890161142c565b915060c08801516114c78161143d565b8091505092959891949750929550565b6000602082840312156114e957600080fd5b8135610e388161143d565b634e487b7160e01b600052601160045260246000fd5b818103818111156111e8576111e86114f4565b60006020828403121561152f57600080fd5b8135610e388161117e565b81516001600160a01b0390811682526020808401518216908301526040808401519083015260608084015162ffffff1690830152608092830151169181019190915260a00190565b6000806000806080858703121561159857600080fd5b8451935060208501516115aa81611149565b604086015190935063ffffffff811681146115c457600080fd5b6060959095015193969295505050565b808201808211156111e8576111e86114f4565b60e081016115f5828861118f565b6060820195909552921515608084015260a08301919091526001600160a01b031660c090910152919050565b600067ffffffffffffffff82111561163b5761163b61121e565b5060051b60200190565b600080604080848603121561165957600080fd5b8351925060208085015167ffffffffffffffff81111561167857600080fd5b8501601f8101871361168957600080fd5b805161169c61169782611621565b611280565b81815260c0918202830184019184820191908a8411156116bb57600080fd5b938501935b8385101561172f5780858c0312156116d85760008081fd5b6116e061125d565b6116e986611207565b81526116f68787016113b7565b818801528588015188820152606080870151908201526080808701519082015260a08087015190820152835293840193918501916116c0565b508096505050505050509250929050565b600081518084526020808501945080840160005b8381101561177a57611767878351610f0c565b60c0969096019590820190600101611754565b509495945050505050565b600061018060018060a01b03808b168452808a166020850152508760020b60408401528651606084015260208701516080840152604087015160a0840152606087015160c0840152608087015160e084015260a0870151610100840152806101208401526117f581840187611740565b91505061180761014083018515159052565b8261016083015298975050505050505050565b6000602080838503121561182d57600080fd5b825167ffffffffffffffff81111561184457600080fd5b8301601f8101851361185557600080fd5b805161186361169782611621565b81815260059190911b8201830190838101908783111561188257600080fd5b928401925b828410156118a957835161189a81611149565b82529284019290840190611887565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156118dc57600080fd5b8151610e3881611149565b6000602082840312156118f957600080fd5b815167ffffffffffffffff8082111561191157600080fd5b818401915084601f83011261192557600080fd5b8151818111156119375761193761121e565b61194a601f8201601f1916602001611280565b915080825285602082850101111561196157600080fd5b611972816020840160208601610fc4565b50949350505050565b60006020828403121561198d57600080fd5b8151610e388161117e565b6000602082840312156119aa57600080fd5b610e388261142c565b6000600182016119c5576119c56114f4565b506001019056fea2646970667358221220de776b1f527ebf58ee4f2197d1bb24b741240646621ba36d5b7e72c823316ed664736f6c63430008120033";

type QuoterConstructorParams =
  | [linkLibraryAddresses: QuoterLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: QuoterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class Quoter__factory extends ContractFactory {
  constructor(...args: QuoterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, Quoter__factory.linkBytecode(linkLibraryAddresses), signer);
    }
  }

  static linkBytecode(linkLibraryAddresses: QuoterLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$eacbb88ed4bd2af84aa4d43bcf675bcf7e\\$__", "g"),
      linkLibraryAddresses["src/PremiumComputer.sol:PremiumComputer"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    _quoterV2: PromiseOrValue<string>,
    _poolManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Quoter> {
    return super.deploy(
      _quoterV2,
      _poolManager,
      overrides || {}
    ) as Promise<Quoter>;
  }
  override getDeployTransaction(
    _quoterV2: PromiseOrValue<string>,
    _poolManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_quoterV2, _poolManager, overrides || {});
  }
  override attach(address: string): Quoter {
    return super.attach(address) as Quoter;
  }
  override connect(signer: Signer): Quoter__factory {
    return super.connect(signer) as Quoter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): QuoterInterface {
    return new utils.Interface(_abi) as QuoterInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Quoter {
    return new Contract(address, _abi, signerOrProvider) as Quoter;
  }
}

export interface QuoterLibraryAddresses {
  ["src/PremiumComputer.sol:PremiumComputer"]: string;
}
