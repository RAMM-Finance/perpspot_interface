/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { Quoter, QuoterInterface } from "../../../src/periphery/Quoter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_quoterV2",
        type: "address",
      },
      {
        internalType: "address",
        name: "_poolManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token0",
                type: "address",
              },
              {
                internalType: "address",
                name: "token1",
                type: "address",
              },
              {
                internalType: "uint24",
                name: "fee",
                type: "uint24",
              },
            ],
            internalType: "struct PoolKey",
            name: "poolKey",
            type: "tuple",
          },
          {
            internalType: "bool",
            name: "isToken0",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "margin",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowAmount",
            type: "uint256",
          },
          {
            internalType: "contract IQuoterV2",
            name: "quoter",
            type: "address",
          },
        ],
        internalType: "struct Quoter.QuoteExactInputParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "quoteExactInput",
    outputs: [
      {
        internalType: "uint256",
        name: "swapInput",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "positionOutput",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrowRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "avgPrice",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "borrowInfo",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610f91380380610f9183398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b610ed3806100be6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063870a135114610030575b600080fd5b61004361003e36600461075d565b61005e565b604051610055969594939291906107bb565b60405180910390f35b6000808080806060818061007860e08a0160c08b01610845565b6001600160a01b03161461009b5761009660e0890160c08a01610845565b6100a8565b6000546001600160a01b03165b90506100b26106a9565b600154604051632411122160e11b81526001600160a01b03909116906348222442906100e2908c906004016108c1565b602060405180830381865afa1580156100ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012391906108d5565b6080820152600154604051639525092360e01b81526001600160a01b0390911690639525092390610158908c906004016108c1565b6101c060405180830381865afa158015610176573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019a91906109a5565b60a084015260020b60208301526001600160a01b0390811682526001546080830151604051636361616560e11b8152600481019190915291169063c6c2c2ca9060240160a060405180830381865afa1580156101fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021e9190610ab0565b505050506001600160801b031660408281019190915281518151633850c7bd60e01b815291516001600160a01b0390911691633850c7bd9160048083019260e09291908290030181865afa15801561027a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029e9190610b1c565b5050506001600160a01b03909316606085015250505060408101516102df90670de0b6b3a76400006102d860a08d013560808e0135610bc7565b91906105c6565b945060a08901356102f48660808c0135610bda565b6102fe9190610bc7565b9750816001600160a01b031663c6a5026a6040518060a001604052808c606001602081019061032d9190610bed565b6103435761033e60208e018e610845565b610353565b61035360408e0160208f01610845565b6001600160a01b0316815260200161037160808e0160608f01610bed565b61038a5761038560408e0160208f01610845565b610397565b61039760208e018e610845565b6001600160a01b031681526020018b81526020018c60000160400160208101906103c19190610c0a565b62ffffff908116825260006020928301526040805160e086901b6001600160e01b031916815284516001600160a01b03908116600483015293850151841660248201529084015160448201526060840151909116606482015260809092015116608482015260a4016080604051808303816000875af1158015610448573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046c9190610c25565b5050600154919850506001600160a01b03166348c6f8668a610492886080830135610bda565b8c60a001358d60600160208101906104aa9190610bed565b8c87606001516040518763ffffffff1660e01b81526004016104d196959493929190610c77565b600060405180830381865afa1580156104ee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105169190810190610cb7565b8251600154602085015160a086015151608087015160405163aa7532af60e01b8152969a5094985073__$eacbb88ed4bd2af84aa4d43bcf675bcf7e$__9563aa7532af9561057895946001600160a01b03169392918b91600091600401610e08565b602060405180830381865af4158015610595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b991906108d5565b9550505091939550919395565b60008080600019858709858702925082811083820303915050806000036105ff57600084116105f457600080fd5b5082900490506106a2565b80841161063b5760405162461bcd60e51b815260206004820152600660248201526536bab62234bb60d11b604482015260640160405180910390fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b6040805160c08101825260008082526020820181905291810182905260608101829052608081019190915260a081016106e06106e5565b905290565b6040518060e001604052806107296040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001600081526020016000815260200160008152602001600061ffff16815260200160008152602001600081525090565b600060e0828403121561076f57600080fd5b50919050565b805160020b82526001600160801b03602082015116602083015260408101516040830152606081015160608301526080810151608083015260a081015160a08301525050565b600060c0808301898452602089818601528860408601528760608601528660808601528260a086015281865180845260e087019150828801935060005b8181101561081b5761080b838651610775565b93830193918501916001016107f8565b50909c9b505050505050505050505050565b6001600160a01b038116811461084257600080fd5b50565b60006020828403121561085757600080fd5b81356106a28161082d565b803562ffffff8116811461087557600080fd5b919050565b80356108858161082d565b6001600160a01b0390811683526020820135906108a18261082d565b16602083015262ffffff6108b760408301610862565b1660408301525050565b606081016108cf828461087a565b92915050565b6000602082840312156108e757600080fd5b5051919050565b8051600281900b811461087557600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff8111828210171561093957610939610900565b60405290565b60405160c0810167ffffffffffffffff8111828210171561093957610939610900565b604051601f8201601f1916810167ffffffffffffffff8111828210171561098b5761098b610900565b604052919050565b805161ffff8116811461087557600080fd5b60008060008385036101c08112156109bc57600080fd5b84516109c78161082d565b93506109d5602086016108ee565b9250603f1901610180808212156109eb57600080fd5b6109f3610916565b60c0831215610a0157600080fd5b610a0961093f565b925060408701518352606087015160208401526080870151604084015260a0870151606084015260c0870151608084015260e087015160a0840152828152610100870151602082015261012087015160408201526101408701516060820152610a756101608801610993565b60808201529086015160a08201526101a09095015160c08601525091949093509050565b80516001600160801b038116811461087557600080fd5b600080600080600060a08688031215610ac857600080fd5b610ad186610a99565b9450610adf60208701610a99565b9350610aed60408701610a99565b9250610afb60608701610a99565b9150608086015190509295509295909350565b801515811461084257600080fd5b600080600080600080600060e0888a031215610b3757600080fd5b8751610b428161082d565b9650610b50602089016108ee565b9550610b5e60408901610993565b9450610b6c60608901610993565b9350610b7a60808901610993565b925060a088015160ff81168114610b9057600080fd5b60c0890151909250610ba181610b0e565b8091505092959891949750929550565b634e487b7160e01b600052601160045260246000fd5b808201808211156108cf576108cf610bb1565b818103818111156108cf576108cf610bb1565b600060208284031215610bff57600080fd5b81356106a281610b0e565b600060208284031215610c1c57600080fd5b6106a282610862565b60008060008060808587031215610c3b57600080fd5b845193506020850151610c4d8161082d565b604086015190935063ffffffff81168114610c6757600080fd5b6060959095015193969295505050565b6101008101610c86828961087a565b6060820196909652608081019490945291151560a084015260c08301526001600160a01b031660e090910152919050565b6000806040808486031215610ccb57600080fd5b8351925060208085015167ffffffffffffffff80821115610ceb57600080fd5b818701915087601f830112610cff57600080fd5b815181811115610d1157610d11610900565b610d1f848260051b01610962565b818152848101925060c091820284018501918a831115610d3e57600080fd5b938501935b82851015610db25780858c031215610d5b5760008081fd5b610d6361093f565b610d6c866108ee565b8152610d79878701610a99565b818801528588015188820152606080870151908201526080808701519082015260a0808701519082015284529384019392850192610d43565b508096505050505050509250929050565b600081518084526020808501945080840160005b83811015610dfd57610dea878351610775565b60c0969096019590820190600101610dd7565b509495945050505050565b600061018060018060a01b03808b168452808a166020850152508760020b60408401528651606084015260208701516080840152604087015160a0840152606087015160c0840152608087015160e084015260a087015161010084015280610120840152610e7881840187610dc3565b915050610e8a61014083018515159052565b826101608301529897505050505050505056fea26469706673582212208d3d99f4da9814f6be0711f8ab0e26bfdc6eb88781791a41b8165110e287e96064736f6c63430008120033";

type QuoterConstructorParams =
  | [linkLibraryAddresses: QuoterLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: QuoterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class Quoter__factory extends ContractFactory {
  constructor(...args: QuoterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, Quoter__factory.linkBytecode(linkLibraryAddresses), signer);
    }
  }

  static linkBytecode(linkLibraryAddresses: QuoterLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$eacbb88ed4bd2af84aa4d43bcf675bcf7e\\$__", "g"),
      linkLibraryAddresses["src/PremiumComputer.sol:PremiumComputer"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    _quoterV2: PromiseOrValue<string>,
    _poolManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Quoter> {
    return super.deploy(
      _quoterV2,
      _poolManager,
      overrides || {}
    ) as Promise<Quoter>;
  }
  override getDeployTransaction(
    _quoterV2: PromiseOrValue<string>,
    _poolManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_quoterV2, _poolManager, overrides || {});
  }
  override attach(address: string): Quoter {
    return super.attach(address) as Quoter;
  }
  override connect(signer: Signer): Quoter__factory {
    return super.connect(signer) as Quoter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): QuoterInterface {
    return new utils.Interface(_abi) as QuoterInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Quoter {
    return new Contract(address, _abi, signerOrProvider) as Quoter;
  }
}

export interface QuoterLibraryAddresses {
  ["src/PremiumComputer.sol:PremiumComputer"]: string;
}
