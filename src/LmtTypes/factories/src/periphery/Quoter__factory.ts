/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { Quoter, QuoterInterface } from "../../../src/periphery/Quoter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_quoterV2",
        type: "address",
      },
      {
        internalType: "address",
        name: "_poolManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getPoolKeys",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token0",
            type: "address",
          },
          {
            internalType: "address",
            name: "token1",
            type: "address",
          },
          {
            internalType: "string",
            name: "symbol0",
            type: "string",
          },
          {
            internalType: "string",
            name: "symbol1",
            type: "string",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "string",
            name: "name0",
            type: "string",
          },
          {
            internalType: "string",
            name: "name1",
            type: "string",
          },
          {
            internalType: "uint8",
            name: "decimals0",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "decimals1",
            type: "uint8",
          },
        ],
        internalType: "struct Quoter.PoolInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token0",
                type: "address",
              },
              {
                internalType: "address",
                name: "token1",
                type: "address",
              },
              {
                internalType: "uint24",
                name: "fee",
                type: "uint24",
              },
            ],
            internalType: "struct PoolKey",
            name: "poolKey",
            type: "tuple",
          },
          {
            internalType: "bool",
            name: "isToken0",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "marginInInput",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "marginInOutput",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowAmount",
            type: "uint256",
          },
          {
            internalType: "contract IQuoterV2",
            name: "quoter",
            type: "address",
          },
          {
            internalType: "bool",
            name: "marginInPosToken",
            type: "bool",
          },
        ],
        internalType: "struct Quoter.QuoteExactInputParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "quoteExactInput",
    outputs: [
      {
        internalType: "uint256",
        name: "swapInput",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "positionOutput",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrowRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "avgPrice",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "borrowInfo",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001a4338038062001a43833981016040819052620000349162000083565b600080546001600160a01b039384166001600160a01b03199182161790915560018054929093169116179055620000bb565b80516001600160a01b03811681146200007e57600080fd5b919050565b600080604083850312156200009757600080fd5b620000a28362000066565b9150620000b26020840162000066565b90509250929050565b61197880620000cb6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063b1b873a21461003b578063d183feee14610069575b600080fd5b61004e610049366004610e7a565b61007e565b60405161006096959493929190610ed9565b60405180910390f35b610071610736565b6040516100609190610f9b565b600080808080606081806100996101008a0160e08b016110d7565b6001600160a01b0316146100bd576100b8610100890160e08a016110d7565b6100ca565b6000546001600160a01b03165b90506100d4610dc6565b600154604051632411122160e11b81526001600160a01b0390911690634822244290610104908c90600401611150565b602060405180830381865afa158015610121573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101459190611164565b6080820152600154604051639525092360e01b81526001600160a01b039091169063952509239061017a908c90600401611150565b6101c060405180830381865afa158015610198573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101bc9190611239565b60a084015260020b60208301526001600160a01b0390811682526001546080830151604051636361616560e11b8152600481019190915291169063c6c2c2ca9060240160a060405180830381865afa15801561021c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102409190611344565b505050506001600160801b031660408281019190915281518151633850c7bd60e01b815291516001600160a01b0390911691633850c7bd9160048083019260e09291908290030181865afa15801561029c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c091906113c1565b5050506001600160a01b039093166060850152506102e99150506101208a016101008b0161144d565b1561046d57604081015161030b9060c08b013590670de0b6b3a7640000610ce3565b945061031b8560c08b0135611480565b9750816001600160a01b031663c6a5026a6040518060a001604052808c606001602081019061034a919061144d565b6103605761035b60208e018e6110d7565b610370565b61037060408e0160208f016110d7565b6001600160a01b0316815260200161038e60808e0160608f0161144d565b6103a7576103a260408e0160208f016110d7565b6103b4565b6103b460208e018e6110d7565b6001600160a01b031681526020018b81526020018c60000160400160208101906103de9190611493565b62ffffff16815260006020909101526040516001600160e01b031960e084901b16815261040e91906004016114b0565b6080604051808303816000875af115801561042d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045191906114f8565b5091985061046691505060a08a01358861154a565b96506105f4565b604081015161049890670de0b6b3a764000061049160c08d013560808e013561154a565b9190610ce3565b945060c08901356104ad8660808c0135611480565b6104b7919061154a565b9750816001600160a01b031663c6a5026a6040518060a001604052808c60600160208101906104e6919061144d565b6104fc576104f760208e018e6110d7565b61050c565b61050c60408e0160208f016110d7565b6001600160a01b0316815260200161052a60808e0160608f0161144d565b6105435761053e60408e0160208f016110d7565b610550565b61055060208e018e6110d7565b6001600160a01b031681526020018b81526020018c600001604001602081019061057a9190611493565b62ffffff16815260006020909101526040516001600160e01b031960e084901b1681526105aa91906004016114b0565b6080604051808303816000875af11580156105c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ed91906114f8565b5091985050505b6001546001600160a01b031663ad16ab7e8a60c081013561061b608083016060840161144d565b8b86606001516040518663ffffffff1660e01b815260040161064195949392919061155d565b600060405180830381865afa15801561065e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261068691908101906115bb565b8251600154602085015160a086015151608087015160405163aa7532af60e01b8152969a5094985073__$eacbb88ed4bd2af84aa4d43bcf675bcf7e$__9563aa7532af956106e895946001600160a01b03169392918b916000916004016116fb565b602060405180830381865af4158015610705573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107299190611164565b9550505091939550919395565b60606000600160009054906101000a90046001600160a01b03166001600160a01b031663d41dcbea6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561078d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107b59190810190611790565b90506000815167ffffffffffffffff8111156107d3576107d3611194565b60405190808252806020026020018201604052801561087057816020015b61085d60405180610120016040528060006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160608152602001600062ffffff1681526020016060815260200160608152602001600060ff168152602001600060ff1681525090565b8152602001906001900390816107f15790505b50905060005b8251811015610cdc5760008382815181106108935761089361182a565b60200260200101516001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fc9190611840565b905060008483815181106109125761091261182a565b60200260200101516001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b9190611840565b9050604051806101200160405280836001600160a01b03168152602001826001600160a01b03168152602001836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156109e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a0d919081019061185d565b8152602001826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a50573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a78919081019061185d565b8152602001868581518110610a8f57610a8f61182a565b60200260200101516001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ad4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af891906118f1565b62ffffff168152602001836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610b40573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b68919081019061185d565b8152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610bab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bd3919081019061185d565b8152602001836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3a919061190e565b60ff168152602001826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca4919061190e565b60ff16815250848481518110610cbc57610cbc61182a565b602002602001018190525050508080610cd490611929565b915050610876565b5092915050565b6000808060001985870985870292508281108382030391505080600003610d1c5760008411610d1157600080fd5b508290049050610dbf565b808411610d585760405162461bcd60e51b815260206004820152600660248201526536bab62234bb60d11b604482015260640160405180910390fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b6040805160c08101825260008082526020820181905291810182905260608101829052608081019190915260a08101610dfd610e02565b905290565b6040518060e00160405280610e466040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001600081526020016000815260200160008152602001600061ffff16815260200160008152602001600081525090565b60006101208284031215610e8d57600080fd5b50919050565b805160020b82526001600160801b03602082015116602083015260408101516040830152606081015160608301526080810151608083015260a081015160a08301525050565b600060c0808301898452602089818601528860408601528760608601528660808601528260a086015281865180845260e087019150828801935060005b81811015610f3957610f29838651610e93565b9383019391850191600101610f16565b50909c9b505050505050505050505050565b60005b83811015610f66578181015183820152602001610f4e565b50506000910152565b60008151808452610f87816020860160208601610f4b565b601f01601f19169290920160200192915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156110b157888303603f19018552815180516001600160a01b03168452610120818901516001600160a01b038116868b01525087820151818987015261100d82870182610f6f565b915050606080830151868303828801526110278382610f6f565b925050506080808301516110418288018262ffffff169052565b505060a0808301518683038288015261105a8382610f6f565b9250505060c080830151868303828801526110758382610f6f565b9250505060e08083015161108d8288018260ff169052565b50506101009182015160ff1694909101939093529386019390860190600101610fc2565b509098975050505050505050565b6001600160a01b03811681146110d457600080fd5b50565b6000602082840312156110e957600080fd5b8135610dbf816110bf565b62ffffff811681146110d457600080fd5b8035611110816110bf565b6001600160a01b03908116835260208201359061112c826110bf565b1660208301526040810135611140816110f4565b62ffffff81166040840152505050565b6060810161115e8284611105565b92915050565b60006020828403121561117657600080fd5b5051919050565b8051600281900b811461118f57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156111cd576111cd611194565b60405290565b60405160c0810167ffffffffffffffff811182821017156111cd576111cd611194565b604051601f8201601f1916810167ffffffffffffffff8111828210171561121f5761121f611194565b604052919050565b805161ffff8116811461118f57600080fd5b60008060008385036101c081121561125057600080fd5b845161125b816110bf565b93506112696020860161117d565b9250603f19016101808082121561127f57600080fd5b6112876111aa565b60c083121561129557600080fd5b61129d6111d3565b925060408701518352606087015160208401526080870151604084015260a0870151606084015260c0870151608084015260e087015160a08401528281526101008701516020820152610120870151604082015261014087015160608201526113096101608801611227565b60808201529086015160a08201526101a09095015160c08601525091949093509050565b80516001600160801b038116811461118f57600080fd5b600080600080600060a0868803121561135c57600080fd5b6113658661132d565b94506113736020870161132d565b93506113816040870161132d565b925061138f6060870161132d565b9150608086015190509295509295909350565b805160ff8116811461118f57600080fd5b80151581146110d457600080fd5b600080600080600080600060e0888a0312156113dc57600080fd5b87516113e7816110bf565b96506113f56020890161117d565b955061140360408901611227565b945061141160608901611227565b935061141f60808901611227565b925061142d60a089016113a2565b915060c088015161143d816113b3565b8091505092959891949750929550565b60006020828403121561145f57600080fd5b8135610dbf816113b3565b634e487b7160e01b600052601160045260246000fd5b8181038181111561115e5761115e61146a565b6000602082840312156114a557600080fd5b8135610dbf816110f4565b81516001600160a01b0390811682526020808401518216908301526040808401519083015260608084015162ffffff1690830152608092830151169181019190915260a00190565b6000806000806080858703121561150e57600080fd5b845193506020850151611520816110bf565b604086015190935063ffffffff8116811461153a57600080fd5b6060959095015193969295505050565b8082018082111561115e5761115e61146a565b60e0810161156b8288611105565b6060820195909552921515608084015260a08301919091526001600160a01b031660c090910152919050565b600067ffffffffffffffff8211156115b1576115b1611194565b5060051b60200190565b60008060408084860312156115cf57600080fd5b8351925060208085015167ffffffffffffffff8111156115ee57600080fd5b8501601f810187136115ff57600080fd5b805161161261160d82611597565b6111f6565b81815260c0918202830184019184820191908a84111561163157600080fd5b938501935b838510156116a55780858c03121561164e5760008081fd5b6116566111d3565b61165f8661117d565b815261166c87870161132d565b818801528588015188820152606080870151908201526080808701519082015260a0808701519082015283529384019391850191611636565b508096505050505050509250929050565b600081518084526020808501945080840160005b838110156116f0576116dd878351610e93565b60c09690960195908201906001016116ca565b509495945050505050565b600061018060018060a01b03808b168452808a166020850152508760020b60408401528651606084015260208701516080840152604087015160a0840152606087015160c0840152608087015160e084015260a08701516101008401528061012084015261176b818401876116b6565b91505061177d61014083018515159052565b8261016083015298975050505050505050565b600060208083850312156117a357600080fd5b825167ffffffffffffffff8111156117ba57600080fd5b8301601f810185136117cb57600080fd5b80516117d961160d82611597565b81815260059190911b820183019083810190878311156117f857600080fd5b928401925b8284101561181f578351611810816110bf565b825292840192908401906117fd565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561185257600080fd5b8151610dbf816110bf565b60006020828403121561186f57600080fd5b815167ffffffffffffffff8082111561188757600080fd5b818401915084601f83011261189b57600080fd5b8151818111156118ad576118ad611194565b6118c0601f8201601f19166020016111f6565b91508082528560208285010111156118d757600080fd5b6118e8816020840160208601610f4b565b50949350505050565b60006020828403121561190357600080fd5b8151610dbf816110f4565b60006020828403121561192057600080fd5b610dbf826113a2565b60006001820161193b5761193b61146a565b506001019056fea2646970667358221220fffa3a50a89c31d6a5c948dc59e1273cd885ca94b9da24b716c9560ab7506bb064736f6c63430008120033";

type QuoterConstructorParams =
  | [linkLibraryAddresses: QuoterLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: QuoterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class Quoter__factory extends ContractFactory {
  constructor(...args: QuoterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, Quoter__factory.linkBytecode(linkLibraryAddresses), signer);
    }
  }

  static linkBytecode(linkLibraryAddresses: QuoterLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$eacbb88ed4bd2af84aa4d43bcf675bcf7e\\$__", "g"),
      linkLibraryAddresses["src/PremiumComputer.sol:PremiumComputer"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    _quoterV2: PromiseOrValue<string>,
    _poolManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Quoter> {
    return super.deploy(
      _quoterV2,
      _poolManager,
      overrides || {}
    ) as Promise<Quoter>;
  }
  override getDeployTransaction(
    _quoterV2: PromiseOrValue<string>,
    _poolManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_quoterV2, _poolManager, overrides || {});
  }
  override attach(address: string): Quoter {
    return super.attach(address) as Quoter;
  }
  override connect(signer: Signer): Quoter__factory {
    return super.connect(signer) as Quoter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): QuoterInterface {
    return new utils.Interface(_abi) as QuoterInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Quoter {
    return new Contract(address, _abi, signerOrProvider) as Quoter;
  }
}

export interface QuoterLibraryAddresses {
  ["src/PremiumComputer.sol:PremiumComputer"]: string;
}
