/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  DataProvider,
  DataProviderInterface,
} from "../../../src/periphery/DataProvider";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_poolManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "_marginFacility",
        type: "address",
      },
      {
        internalType: "address",
        name: "borrowFacility",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
    ],
    name: "getActiveMarginPositions",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token0",
                type: "address",
              },
              {
                internalType: "address",
                name: "token1",
                type: "address",
              },
              {
                internalType: "uint24",
                name: "fee",
                type: "uint24",
              },
            ],
            internalType: "struct PoolKey",
            name: "poolKey",
            type: "tuple",
          },
          {
            internalType: "bool",
            name: "isToken0",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "totalDebtOutput",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalDebtInput",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "openTime",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "repayTime",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "premiumDeposit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalPosition",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "margin",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "premiumOwed",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "token0Decimals",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "token1Decimals",
            type: "uint256",
          },
        ],
        internalType: "struct DataProvider.MarginPositionInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token0",
            type: "address",
          },
          {
            internalType: "address",
            name: "token1",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
        ],
        internalType: "struct PoolKey",
        name: "key",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "borrowInfo",
        type: "tuple[]",
      },
    ],
    name: "getIsBorrowable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isToken",
        type: "bool",
      },
    ],
    name: "getMarginPosition",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token0",
                type: "address",
              },
              {
                internalType: "address",
                name: "token1",
                type: "address",
              },
              {
                internalType: "uint24",
                name: "fee",
                type: "uint24",
              },
            ],
            internalType: "struct PoolKey",
            name: "poolKey",
            type: "tuple",
          },
          {
            internalType: "bool",
            name: "isToken0",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "totalDebtOutput",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalDebtInput",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "openTime",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "repayTime",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "premiumDeposit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalPosition",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "margin",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "premiumOwed",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "token0Decimals",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "token1Decimals",
            type: "uint256",
          },
        ],
        internalType: "struct DataProvider.MarginPositionInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token0",
            type: "address",
          },
          {
            internalType: "address",
            name: "token1",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
        ],
        internalType: "struct PoolKey",
        name: "key",
        type: "tuple",
      },
      {
        internalType: "int24",
        name: "tickLower",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickUpper",
        type: "int24",
      },
    ],
    name: "getMaxWithdrawable",
    outputs: [
      {
        internalType: "uint128",
        name: "maxWithdrawable",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
    ],
    name: "getPoolkeys",
    outputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token0",
            type: "address",
          },
          {
            internalType: "address",
            name: "token1",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
        ],
        internalType: "struct PoolKey",
        name: "poolKey",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isToken0",
        type: "bool",
      },
    ],
    name: "premiumOwed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200287138038062002871833981016040819052620000349162000087565b50600080546001600160a01b039283166001600160a01b03199182161790915560018054939092169216919091179055620000d1565b80516001600160a01b03811681146200008257600080fd5b919050565b6000806000606084860312156200009d57600080fd5b620000a8846200006a565b9250620000b8602085016200006a565b9150620000c8604085016200006a565b90509250925092565b61279080620000e16000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632d6cf1f4146100675780638e68ad3614610090578063911f1b47146100bb578063c229a332146100de578063dd65c3281461011c578063fd7072881461013c575b600080fd5b61007a610075366004611afa565b61015d565b6040516100879190611c12565b60405180910390f35b6100a361009e366004611c48565b6105f6565b6040516001600160801b039091168152602001610087565b6100ce6100c9366004611db6565b6108c1565b6040519015158152602001610087565b6100f16100ec366004611ebd565b610cbb565b604080516001600160a01b03948516815293909216602084015262ffffff1690820152606001610087565b61012f61012a366004611ebd565b610df3565b6040516100879190611ee1565b61014f61014a366004611f41565b6117dc565b604051908152602001610087565b610165611a4a565b60006040518060600160405280866001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d49190611fd1565b6001600160a01b03168152602001866001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610220573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102449190611fd1565b6001600160a01b03168152602001866001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b49190611fee565b62ffffff1690526000805460405163118272bf60e31b815292935090916001600160a01b0390911690638c1395f8906102f59089908990899060040161200b565b600060405180830381865afa158015610312573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261033a9190810190612112565b60008054919250906001600160a01b0316635d4936ff61035b89898961198a565b6040518263ffffffff1660e01b815260040161037991815260200190565b602060405180830381865afa158015610396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ba9190612223565b905060006103c98488886117dc565b90506000886001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561040b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042f9190611fd1565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561046c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610490919061223c565b60ff1690506000896001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f99190611fd1565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610536573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055a919061223c565b60ff169050604051806101800160405280878152602001891515815260200186600001516040015181526020018660000151606001518152602001866000015160a0015163ffffffff168152602001866000015160c0015163ffffffff16815260200185815260200186602001518152602001866040015181526020018481526020018381526020018281525096505050505050509392505050565b600154604051632411122160e11b815260009182916001600160a01b039091169063482224429061062b90889060040161225f565b602060405180830381865afa158015610648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066c9190612223565b6001546040516315083fbb60e31b8152600481018390529192506000916001600160a01b039091169063a841fdd890602401602060405180830381865afa1580156106bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106df9190612223565b600154604051630ca32ed160e31b8152600481018590529192506000916001600160a01b0390911690636519768890602401602060405180830381865afa15801561072e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075291906122b0565b6001600160801b03945090506000808080895b8960020b8160020b12156108b25760015460405163da69b0b360e01b8152600481018a9052600283900b60248201526001600160a01b039091169063da69b0b390604401602060405180830381865afa1580156107c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ea91906122cd565b6001546040516319fda27760e01b8152600481018b9052600284900b60248201529196508895506001600160a01b0316906319fda27790604401602060405180830381865afa158015610841573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086591906122cd565b9250826108728587612300565b61087c9190612300565b9150886001600160801b0316826001600160801b03161061089d578861089f565b815b98506108ab8682612327565b9050610765565b50505050505050509392505050565b6000808251116109055760405162461bcd60e51b815260206004820152600a602482015269656d70747920696e666f60b01b60448201526064015b60405180910390fd5b600154604051632411122160e11b8152600091829182916001600160a01b03169063482224429061093a90899060040161225f565b602060405180830381865afa158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b9190612223565b600154604051630ca32ed160e31b8152600481018390529192506000916001600160a01b0390911690636519768890602401602060405180830381865afa1580156109ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ee91906122b0565b6001546040516315083fbb60e31b8152600481018590529192506000916001600160a01b039091169063a841fdd890602401602060405180830381865afa158015610a3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a619190612223565b905060005b8751811015610caa5782888281518110610a8257610a8261234c565b602002602001015160000151610a989190612362565b60020b15610ad65760405162461bcd60e51b815260206004820152600b60248201526a696e76616c69645469636b60a81b60448201526064016108fc565b60015488516001600160a01b039091169063da69b0b39086908b9085908110610b0157610b0161234c565b6020026020010151600001516040518363ffffffff1660e01b8152600401610b3692919091825260020b602082015260400190565b602060405180830381865afa158015610b53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7791906122cd565b9550856001600160801b0316600003610b995760009650505050505050610cb5565b60015488516001600160a01b03909116906319fda2779086908b9085908110610bc457610bc461234c565b6020026020010151600001516040518363ffffffff1660e01b8152600401610bf992919091825260020b602082015260400190565b602060405180830381865afa158015610c16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3a91906122cd565b9450878181518110610c4e57610c4e61234c565b60200260200101516020015185610c659190612392565b6001600160801b031682876001600160801b0316610c8391906123b2565b1015610c985760009650505050505050610cb5565b80610ca2816123c5565b915050610a66565b506001955050505050505b92915050565b6000806000836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d229190611fd1565b846001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d849190611fd1565b856001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de69190611fee565b9196909550909350915050565b6060610e276040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60015460408051636a0ee5f560e11b815290516000926001600160a01b03169163d41dcbea91600480830192869291908290030181865afa158015610e70573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e9891908101906123de565b905080516002610ea89190612477565b8083526000906001600160401b03811115610ec557610ec5611c87565b604051908082528060200260200182016040528015610efe57816020015b610eeb611a4a565b815260200190600190039081610ee35790505b5090506000805b83518110156116d65760006040518060600160405280868481518110610f2d57610f2d61234c565b60200260200101516001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f969190611fd1565b6001600160a01b03168152602001868481518110610fb657610fb661234c565b60200260200101516001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ffb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101f9190611fd1565b6001600160a01b0316815260200186848151811061103f5761103f61234c565b60200260200101516001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa158015611084573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a89190611fee565b62ffffff1681525090508482815181106110c4576110c461234c565b60200260200101516001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611109573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112d9190611fd1565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561116a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118e919061223c565b60ff16602087015284518590839081106111aa576111aa61234c565b60200260200101516001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112139190611fd1565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611250573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611274919061223c565b60ff1660408701526000805486516001600160a01b0390911690638c1395f8908890869081106112a6576112a661234c565b60200260200101518b60006040518463ffffffff1660e01b81526004016112cf9392919061200b565b600060405180830381865afa1580156112ec573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113149190810190612112565b60005487519192506001600160a01b031690635d4936ff90611352908990879081106113425761134261234c565b60200260200101518c600061198a565b6040518263ffffffff1660e01b815260040161137091815260200190565b602060405180830381865afa15801561138d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b19190612223565b60608801526000805487516001600160a01b0390911690638c1395f8908990879081106113e0576113e061234c565b60200260200101518c60016040518463ffffffff1660e01b81526004016114099392919061200b565b600060405180830381865afa158015611426573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261144e9190810190612112565b60005488519192506001600160a01b031690635d4936ff9061148c908a908890811061147c5761147c61234c565b60200260200101518d600161198a565b6040518263ffffffff1660e01b81526004016114aa91815260200190565b602060405180830381865afa1580156114c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114eb9190612223565b6080890152805160a0015163ffffffff16156115ca5760405180610180016040528084815260200160011515815260200182600001516040015181526020018260000151606001518152602001826000015160a0015163ffffffff168152602001826000015160c0015163ffffffff16815260200189608001518152602001826020015181526020018260400151815260200161158a858d60016117dc565b815260208a810151908201526040808b0151910152866115aa87876123b2565b815181106115ba576115ba61234c565b60200260200101819052506115d8565b846115d4816123c5565b9550505b815160a0015163ffffffff16156116b25760405180610180016040528084815260200160001515815260200183600001516040015181526020018360000151606001518152602001836000015160a0015163ffffffff168152602001836000015160c0015163ffffffff168152602001896060015181526020018360200151815260200183604001518152602001611672858d60006117dc565b815260208a810151908201526040808b01519101528661169287876123b2565b815181106116a2576116a261234c565b60200260200101819052506116c0565b846116bc816123c5565b9550505b50505080806116ce906123c5565b915050610f05565b5083516000906116e79083906123b2565b6001600160401b038111156116fe576116fe611c87565b60405190808252806020026020018201604052801561173757816020015b611724611a4a565b81526020019060019003908161171c5790505b50905060005b855161174a9084906123b2565b81101561179b578381815181106117635761176361234c565b602002602001015182828151811061177d5761177d61234c565b60200260200101819052508080611793906123c5565b91505061173d565b506117d2604051806040016040528060138152602001721858dd1a5d99541bdcda5d1a5bdb9cd31a5cdd606a1b81525082516119e0565b9695505050505050565b600154604051639525092360e01b81526000918291829182916001600160a01b0390911690639525092390611815908a9060040161248e565b6101a060405180830381865afa158015611833573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185791906124d4565b6000805460405163118272bf60e31b8152949750929550909350916001600160a01b0390911690638c1395f890611896908a9088908b9060040161200b565b600060405180830381865afa1580156118b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118db9190810190612112565b6001548351825160e00151604051630d527ba960e01b815293945060009373__$eacbb88ed4bd2af84aa4d43bcf675bcf7e$__93630d527ba993611936938b936001600160a01b03909316928e15928c92909160040161263b565b600060405180830381865af4158015611953573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261197b91908101906126b6565b509a9950505050505050505050565b6040516bffffffffffffffffffffffff19606085811b8216602084015284901b16603482015281151560f81b60488201526000906049016040516020818303038152906040528051906020012090509392505050565b611a2582826040516024016119f6929190612705565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052611a29565b5050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b604080516101e08101909152600061018082018181526101a083018290526101c0830191909152819081526020016000151581526020016000815260200160008152602001600063ffffffff168152602001600063ffffffff1681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b0381168114611ae957600080fd5b50565b8015158114611ae957600080fd5b600080600060608486031215611b0f57600080fd5b8335611b1a81611ad4565b92506020840135611b2a81611ad4565b91506040840135611b3a81611aec565b809150509250925092565b611b7782825180516001600160a01b0390811683526020808301519091169083015260409081015162ffffff16910152565b602081015180151560608401525060408101516080830152606081015160a08301526080810151611bb060c084018263ffffffff169052565b5060a081015163ffffffff811660e08401525060c08101516101008381019190915260e082015161012080850191909152908201516101408085019190915290820151610160808501919091529082015161018084015201516101a090910152565b6101c08101610cb58284611b45565b600060608284031215611c3357600080fd5b50919050565b8060020b8114611ae957600080fd5b600080600060a08486031215611c5d57600080fd5b611c678585611c21565b92506060840135611c7781611c39565b91506080840135611b3a81611c39565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b0381118282101715611cbf57611cbf611c87565b60405290565b604051606081016001600160401b0381118282101715611cbf57611cbf611c87565b60405161010081016001600160401b0381118282101715611cbf57611cbf611c87565b60405160e081016001600160401b0381118282101715611cbf57611cbf611c87565b60405160a081016001600160401b0381118282101715611cbf57611cbf611c87565b604051601f8201601f191681016001600160401b0381118282101715611d7657611d76611c87565b604052919050565b60006001600160401b03821115611d9757611d97611c87565b5060051b60200190565b6001600160801b0381168114611ae957600080fd5b6000806080808486031215611dca57600080fd5b611dd48585611c21565b92506060808501356001600160401b03811115611df057600080fd5b8501601f81018713611e0157600080fd5b80356020611e16611e1183611d7e565b611d4e565b82815260c0928302840182019282820191908b851115611e3557600080fd5b948301945b84861015611eab5780868d031215611e525760008081fd5b611e5a611c9d565b8635611e6581611c39565b815286850135611e7481611da1565b81860152604087810135908201528787013588820152888701358982015260a0808801359082015283529485019491830191611e3a565b50809750505050505050509250929050565b600060208284031215611ecf57600080fd5b8135611eda81611ad4565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015611f2457611f10838551611b45565b928401926101c09290920191600101611efd565b50909695505050505050565b62ffffff81168114611ae957600080fd5b600080600083850360a0811215611f5757600080fd5b6060811215611f6557600080fd5b50611f6e611cc5565b8435611f7981611ad4565b81526020850135611f8981611ad4565b60208201526040850135611f9c81611f30565b604082015292506060840135611fb181611ad4565b91506080840135611b3a81611aec565b8051611fcc81611ad4565b919050565b600060208284031215611fe357600080fd5b8151611eda81611ad4565b60006020828403121561200057600080fd5b8151611eda81611f30565b6001600160a01b039384168152919092166020820152901515604082015260600190565b8051611fcc81611aec565b805163ffffffff81168114611fcc57600080fd5b600082601f83011261205f57600080fd5b8151602061206f611e1183611d7e565b82815260c0928302850182019282820191908785111561208e57600080fd5b8387015b858110156121055781818a0312156120aa5760008081fd5b6120b2611c9d565b81516120bd81611c39565b8152818601516120cc81611da1565b8187015260408281015190820152606080830151908201526080808301519082015260a080830151908201528452928401928101612092565b5090979650505050505050565b60006020828403121561212457600080fd5b81516001600160401b038082111561213b57600080fd5b908301906060828603121561214f57600080fd5b612157611cc5565b82518281111561216657600080fd5b8301610100818803121561217957600080fd5b612181611ce7565b61218a82611fc1565b81526121986020830161202f565b60208201526040820151604082015260608201516060820152608082015160808201526121c760a0830161203a565b60a08201526121d860c0830161203a565b60c082015260e0820151848111156121ef57600080fd5b6121fb8982850161204e565b60e0830152508252506020838101519082015260409283015192810192909252509392505050565b60006020828403121561223557600080fd5b5051919050565b60006020828403121561224e57600080fd5b815160ff81168114611eda57600080fd5b60608101823561226e81611ad4565b6001600160a01b03908116835260208401359061228a82611ad4565b166020830152604083013561229e81611f30565b62ffffff811660408401525092915050565b6000602082840312156122c257600080fd5b8151611eda81611c39565b6000602082840312156122df57600080fd5b8151611eda81611da1565b634e487b7160e01b600052601160045260246000fd5b6001600160801b03828116828216039080821115612320576123206122ea565b5092915050565b600281810b9083900b01627fffff8113627fffff1982121715610cb557610cb56122ea565b634e487b7160e01b600052603260045260246000fd5b60008260020b8061238357634e487b7160e01b600052601260045260246000fd5b808360020b0791505092915050565b6001600160801b03818116838216019080821115612320576123206122ea565b81810381811115610cb557610cb56122ea565b6000600182016123d7576123d76122ea565b5060010190565b600060208083850312156123f157600080fd5b82516001600160401b0381111561240757600080fd5b8301601f8101851361241857600080fd5b8051612426611e1182611d7e565b81815260059190911b8201830190838101908783111561244557600080fd5b928401925b8284101561246c57835161245d81611ad4565b8252928401929084019061244a565b979650505050505050565b8082028115828204841417610cb557610cb56122ea565b81516001600160a01b0390811682526020808401519091169082015260408083015162ffffff169082015260608101610cb5565b805161ffff81168114611fcc57600080fd5b60008060008385036101a08112156124eb57600080fd5b84516124f681611ad4565b602086015190945061250781611c39565b9250603f19016101608082121561251d57600080fd5b612525611d0a565b60a083121561253357600080fd5b61253b611d2c565b925060408701518352606087015160208401526080870151604084015260a0870151606084015260c0870151608084015282815260e087015160208201526101008701516040820152610120870151606082015261259c61014088016124c2565b60808201529086015160a08201526101809095015160c08601525091949093509050565b600081518084526020808501945080840160005b83811015612630578151805160020b8852838101516001600160801b03168489015260408082015190890152606080820151908901526080808201519089015260a0908101519088015260c090960195908201906001016125d4565b509495945050505050565b600061014060018060a01b03808a16845280891660208501525086151560408401528560020b606084015284516080840152602085015160a0840152604085015160c0840152606085015160e08401526080850151610100840152806101208401526126a9818401856125c0565b9998505050505050505050565b6000806000606084860312156126cb57600080fd5b83516001600160401b038111156126e157600080fd5b6126ed8682870161204e565b93505060208401519150604084015190509250925092565b604081526000835180604084015260005b818110156127335760208187018101516060868401015201612716565b506000606082850101526060601f19601f830116840101915050826020830152939250505056fea2646970667358221220d30e9a9399193085da7e360687eb5f0a755065a982bea8213c7b0eea79d2cc6f64736f6c63430008120033";

type DataProviderConstructorParams =
  | [linkLibraryAddresses: DataProviderLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DataProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class DataProvider__factory extends ContractFactory {
  constructor(...args: DataProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        DataProvider__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: DataProviderLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$eacbb88ed4bd2af84aa4d43bcf675bcf7e\\$__", "g"),
      linkLibraryAddresses["src/PremiumComputer.sol:PremiumComputer"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    _poolManager: PromiseOrValue<string>,
    _marginFacility: PromiseOrValue<string>,
    borrowFacility: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DataProvider> {
    return super.deploy(
      _poolManager,
      _marginFacility,
      borrowFacility,
      overrides || {}
    ) as Promise<DataProvider>;
  }
  override getDeployTransaction(
    _poolManager: PromiseOrValue<string>,
    _marginFacility: PromiseOrValue<string>,
    borrowFacility: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _poolManager,
      _marginFacility,
      borrowFacility,
      overrides || {}
    );
  }
  override attach(address: string): DataProvider {
    return super.attach(address) as DataProvider;
  }
  override connect(signer: Signer): DataProvider__factory {
    return super.connect(signer) as DataProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DataProviderInterface {
    return new utils.Interface(_abi) as DataProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DataProvider {
    return new Contract(address, _abi, signerOrProvider) as DataProvider;
  }
}

export interface DataProviderLibraryAddresses {
  ["src/PremiumComputer.sol:PremiumComputer"]: string;
}
