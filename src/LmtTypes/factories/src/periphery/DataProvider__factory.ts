/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  DataProvider,
  DataProviderInterface,
} from "../../../src/periphery/DataProvider";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_poolManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "_marginFacility",
        type: "address",
      },
      {
        internalType: "address",
        name: "borrowFacility",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
    ],
    name: "getActiveMarginPositions",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token0",
                type: "address",
              },
              {
                internalType: "address",
                name: "token1",
                type: "address",
              },
              {
                internalType: "uint24",
                name: "fee",
                type: "uint24",
              },
            ],
            internalType: "struct PoolKey",
            name: "poolKey",
            type: "tuple",
          },
          {
            internalType: "bool",
            name: "isToken0",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "totalDebtOutput",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalDebtInput",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "openTime",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "repayTime",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "premiumDeposit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalPosition",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "margin",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "premiumOwed",
            type: "uint256",
          },
        ],
        internalType: "struct DataProvider.MarginPositionInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isToken",
        type: "bool",
      },
    ],
    name: "getMarginPosition",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token0",
                type: "address",
              },
              {
                internalType: "address",
                name: "token1",
                type: "address",
              },
              {
                internalType: "uint24",
                name: "fee",
                type: "uint24",
              },
            ],
            internalType: "struct PoolKey",
            name: "poolKey",
            type: "tuple",
          },
          {
            internalType: "bool",
            name: "isToken0",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "totalDebtOutput",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalDebtInput",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "openTime",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "repayTime",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "premiumDeposit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalPosition",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "margin",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "premiumOwed",
            type: "uint256",
          },
        ],
        internalType: "struct DataProvider.MarginPositionInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token0",
            type: "address",
          },
          {
            internalType: "address",
            name: "token1",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
        ],
        internalType: "struct PoolKey",
        name: "key",
        type: "tuple",
      },
      {
        internalType: "int24",
        name: "tickLower",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickUpper",
        type: "int24",
      },
    ],
    name: "getMaxWithdrawable",
    outputs: [
      {
        internalType: "uint128",
        name: "maxWithdrawable",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
    ],
    name: "getPoolkeys",
    outputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token0",
            type: "address",
          },
          {
            internalType: "address",
            name: "token1",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
        ],
        internalType: "struct PoolKey",
        name: "poolKey",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isToken0",
        type: "bool",
      },
    ],
    name: "premiumOwed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "$eacbb88ed4bd2af84aa4d43bcf675bcf7e$__93630d527ba993611158938b936001600160a01b03909316928e15928c929091600401611d1a565b600060405180830381865af4158015611175573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261119d9190810190611d95565b509a9950505050505050505050565b6040516bffffffffffffffffffffffff19606085811b8216602084015284901b16603482015281151560f81b60488201526000906049016040516020818303038152906040528051906020012090509392505050565b600080806000198587098587029250828110838203039150508060000361123b576000841161123057600080fd5b508290049050610420565b8084116112775760405162461bcd60e51b815260206004820152600660248201526536bab62234bb60d11b604482015260640160405180910390fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b604080516101a0810182526000610140820181815261016083018290526101808301829052825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081019190915290565b6001600160a01b038116811461136457600080fd5b50565b801515811461136457600080fd5b60008060006060848603121561138a57600080fd5b83356113958161134f565b925060208401356113a58161134f565b915060408401356113b581611367565b809150509250925092565b6113f282825180516001600160a01b0390811683526020808301519091169083015260409081015162ffffff16910152565b602081015180151560608401525060408101516080830152606081015160a0830152608081015161142b60c084018263ffffffff169052565b5060a081015163ffffffff811660e08401525060c08101516101008381019190915260e08201516101208085019190915290820151610140840152015161016090910152565b610180810161148082846113c0565b92915050565b8060020b811461136457600080fd5b600080600083850360a08112156114ab57600080fd5b60608112156114b957600080fd5b5083925060608401356114cb81611486565b915060808401356113b581611486565b6000602082840312156114ed57600080fd5b81356104208161134f565b6020808252825182820181905260009190848201906040850190845b8181101561153b576115278385516113c0565b928401926101809290920191600101611514565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561158057611580611547565b60405290565b60405160c0810167ffffffffffffffff8111828210171561158057611580611547565b604051610100810167ffffffffffffffff8111828210171561158057611580611547565b60405160e0810167ffffffffffffffff8111828210171561158057611580611547565b60405160a0810167ffffffffffffffff8111828210171561158057611580611547565b604051601f8201601f1916810167ffffffffffffffff8111828210171561163c5761163c611547565b604052919050565b62ffffff8116811461136457600080fd5b600080600083850360a081121561166b57600080fd5b606081121561167957600080fd5b5061168261155d565b843561168d8161134f565b8152602085013561169d8161134f565b602082015260408501356116b081611644565b6040820152925060608401356116c58161134f565b915060808401356113b581611367565b80516116e08161134f565b919050565b6000602082840312156116f757600080fd5b81516104208161134f565b60006020828403121561171457600080fd5b815161042081611644565b6001600160a01b039384168152919092166020820152901515604082015260600190565b80516116e081611367565b805163ffffffff811681146116e057600080fd5b600067ffffffffffffffff82111561177c5761177c611547565b5060051b60200190565b80516001600160801b03811681146116e057600080fd5b600082601f8301126117ae57600080fd5b815160206117c36117be83611762565b611613565b82815260c092830285018201928282019190878511156117e257600080fd5b8387015b858110156118575781818a0312156117fe5760008081fd5b611806611586565b815161181181611486565b815261181e828701611786565b8187015260408281015190820152606080830151908201526080808301519082015260a0808301519082015284529284019281016117e6565b5090979650505050505050565b60006020828403121561187657600080fd5b815167ffffffffffffffff8082111561188e57600080fd5b90830190606082860312156118a257600080fd5b6118aa61155d565b8251828111156118b957600080fd5b830161010081880312156118cc57600080fd5b6118d46115a9565b6118dd826116d5565b81526118eb60208301611743565b602082015260408201516040820152606082015160608201526080820151608082015261191a60a0830161174e565b60a082015261192b60c0830161174e565b60c082015260e08201518481111561194257600080fd5b61194e8982850161179d565b60e0830152508252506020838101519082015260409283015192810192909252509392505050565b60006020828403121561198857600080fd5b5051919050565b60608101823561199e8161134f565b6001600160a01b0390811683526020840135906119ba8261134f565b16602083015260408301356119ce81611644565b62ffffff811660408401525092915050565b6000602082840312156119f257600080fd5b815161042081611486565b600060208284031215611a0f57600080fd5b61042082611786565b634e487b7160e01b600052601160045260246000fd5b6001600160801b03828116828216039080821115611a4e57611a4e611a18565b5092915050565b600281810b9083900b01627fffff8113627fffff198212171561148057611480611a18565b60006020808385031215611a8d57600080fd5b825167ffffffffffffffff811115611aa457600080fd5b8301601f81018513611ab557600080fd5b8051611ac36117be82611762565b81815260059190911b82018301908381019087831115611ae257600080fd5b928401925b82841015611b09578351611afa8161134f565b82529284019290840190611ae7565b979650505050505050565b808202811582820484141761148057611480611a18565b634e487b7160e01b600052603260045260246000fd5b8181038181111561148057611480611a18565b600060018201611b6657611b66611a18565b5060010190565b81516001600160a01b0390811682526020808401519091169082015260408083015162ffffff169082015260608101611480565b805161ffff811681146116e057600080fd5b60008060008385036101a0811215611bca57600080fd5b8451611bd58161134f565b6020860151909450611be681611486565b9250603f190161016080821215611bfc57600080fd5b611c046115cd565b60a0831215611c1257600080fd5b611c1a6115f0565b925060408701518352606087015160208401526080870151604084015260a0870151606084015260c0870151608084015282815260e0870151602082015261010087015160408201526101208701516060820152611c7b6101408801611ba1565b60808201529086015160a08201526101809095015160c08601525091949093509050565b600081518084526020808501945080840160005b83811015611d0f578151805160020b8852838101516001600160801b03168489015260408082015190890152606080820151908901526080808201519089015260a0908101519088015260c09096019590820190600101611cb3565b509495945050505050565b600061014060018060a01b03808a16845280891660208501525086151560408401528560020b606084015284516080840152602085015160a0840152604085015160c0840152606085015160e0840152608085015161010084015280610120840152611d8881840185611c9f565b9998505050505050505050565b600080600060608486031215611daa57600080fd5b835167ffffffffffffffff811115611dc157600080fd5b611dcd8682870161179d565b9350506020840151915060408401519050925092509256fea264697066735822122068c154e80aa761597ec101bc7f8a116e451d9bc49e7167ac016b2e19612ea17f64736f6c63430008120033";

type DataProviderConstructorParams =
  | [linkLibraryAddresses: DataProviderLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DataProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class DataProvider__factory extends ContractFactory {
  constructor(...args: DataProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        DataProvider__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: DataProviderLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$eacbb88ed4bd2af84aa4d43bcf675bcf7e\\$__", "g"),
      linkLibraryAddresses["src/PremiumComputer.sol:PremiumComputer"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    _poolManager: PromiseOrValue<string>,
    _marginFacility: PromiseOrValue<string>,
    borrowFacility: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DataProvider> {
    return super.deploy(
      _poolManager,
      _marginFacility,
      borrowFacility,
      overrides || {}
    ) as Promise<DataProvider>;
  }
  override getDeployTransaction(
    _poolManager: PromiseOrValue<string>,
    _marginFacility: PromiseOrValue<string>,
    borrowFacility: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _poolManager,
      _marginFacility,
      borrowFacility,
      overrides || {}
    );
  }
  override attach(address: string): DataProvider {
    return super.attach(address) as DataProvider;
  }
  override connect(signer: Signer): DataProvider__factory {
    return super.connect(signer) as DataProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DataProviderInterface {
    return new utils.Interface(_abi) as DataProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DataProvider {
    return new Contract(address, _abi, signerOrProvider) as DataProvider;
  }
}

export interface DataProviderLibraryAddresses {
  ["src/PremiumComputer.sol:PremiumComputer"]: string;
}
