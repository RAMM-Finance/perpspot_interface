/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  DataProvider,
  DataProviderInterface,
} from "../../../src/periphery/DataProvider";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "poolManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "marginFacility",
        type: "address",
      },
      {
        internalType: "address",
        name: "borrowFacility",
        type: "address",
      },
      {
        internalType: "address",
        name: "uniswapFactory",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
    ],
    name: "getActiveMarginPositions",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token0",
                type: "address",
              },
              {
                internalType: "address",
                name: "token1",
                type: "address",
              },
              {
                internalType: "uint24",
                name: "fee",
                type: "uint24",
              },
            ],
            internalType: "struct PoolKey",
            name: "poolKey",
            type: "tuple",
          },
          {
            internalType: "bool",
            name: "isToken0",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "totalDebtOutput",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalDebtInput",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "openTime",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "repayTime",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "premiumDeposit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalPosition",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "margin",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "premiumOwed",
            type: "uint256",
          },
        ],
        internalType: "struct DataProvider.MarginPositionInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isToken",
        type: "bool",
      },
    ],
    name: "getMarginPosition",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token0",
                type: "address",
              },
              {
                internalType: "address",
                name: "token1",
                type: "address",
              },
              {
                internalType: "uint24",
                name: "fee",
                type: "uint24",
              },
            ],
            internalType: "struct PoolKey",
            name: "poolKey",
            type: "tuple",
          },
          {
            internalType: "bool",
            name: "isToken0",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "totalDebtOutput",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalDebtInput",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "openTime",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "repayTime",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "premiumDeposit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalPosition",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "margin",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "premiumOwed",
            type: "uint256",
          },
        ],
        internalType: "struct DataProvider.MarginPositionInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
    ],
    name: "getPoolkeys",
    outputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token0",
            type: "address",
          },
          {
            internalType: "address",
            name: "token1",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
        ],
        internalType: "struct PoolKey",
        name: "poolKey",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isToken0",
        type: "bool",
      },
    ],
    name: "premiumOwed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001a2038038062001a20833981016040819052620000349162000093565b50600080546001600160a01b03199081166001600160a01b039485161790915560018054821694841694909417909355600280549093169116179055620000f0565b80516001600160a01b03811681146200008e57600080fd5b919050565b60008060008060808587031215620000aa57600080fd5b620000b58562000076565b9350620000c56020860162000076565b9250620000d56040860162000076565b9150620000e56060860162000076565b905092959194509250565b61192080620001006000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632d6cf1f414610051578063c229a3321461007a578063dd65c328146100b8578063fd707288146100d8575b600080fd5b61006461005f366004610f77565b6100f9565b6040516100719190611073565b60405180910390f35b61008d610088366004611088565b6103f0565b604080516001600160a01b03948516815293909216602084015262ffffff1690820152606001610071565b6100cb6100c6366004611088565b610528565b60405161007191906110ac565b6100eb6100e6366004611209565b610ce1565b604051908152602001610071565b610101610ee6565b60006040518060600160405280866001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561014c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101709190611299565b6001600160a01b03168152602001866001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e09190611299565b6001600160a01b03168152602001866001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa15801561022c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025091906112b6565b62ffffff1690526000805460405163118272bf60e31b815292935090916001600160a01b0390911690638c1395f890610291908990899089906004016112d3565b600060405180830381865afa1580156102ae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102d6919081019061142a565b60008054919250906001600160a01b0316635d4936ff6102f7898989610e90565b6040518263ffffffff1660e01b815260040161031591815260200190565b602060405180830381865afa158015610332573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103569190611552565b90506000610365848888610ce1565b9050604051806101400160405280858152602001871515815260200184600001516060015181526020018460000151608001518152602001846000015160c0015163ffffffff168152602001846000015160e0015163ffffffff1681526020018381526020018460200151815260200184604001518152602001828152509450505050509392505050565b6000806000836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610433573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104579190611299565b846001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b99190611299565b856001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051b91906112b6565b9196909550909350915050565b60606000600160009054906101000a90046001600160a01b03166001600160a01b031663d41dcbea6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561057f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105a7919081019061156b565b90506000815160026105b9919061161b565b905060008167ffffffffffffffff8111156105d6576105d66110fb565b60405190808252806020026020018201604052801561060f57816020015b6105fc610ee6565b8152602001906001900390816105f45790505b5090506000805b8451811015610c17576000604051806060016040528087848151811061063e5761063e611632565b60200260200101516001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a79190611299565b6001600160a01b031681526020018784815181106106c7576106c7611632565b60200260200101516001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561070c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107309190611299565b6001600160a01b0316815260200187848151811061075057610750611632565b60200260200101516001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610795573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b991906112b6565b62ffffff16905260008054885192935090916001600160a01b0390911690638c1395f8908990869081106107ef576107ef611632565b60200260200101518b60006040518463ffffffff1660e01b8152600401610818939291906112d3565b600060405180830381865afa158015610835573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261085d919081019061142a565b905060008060009054906101000a90046001600160a01b03166001600160a01b0316635d4936ff6108a98a878151811061089957610899611632565b60200260200101518d6000610e90565b6040518263ffffffff1660e01b81526004016108c791815260200190565b602060405180830381865afa1580156108e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109089190611552565b905060008060009054906101000a90046001600160a01b03166001600160a01b0316638c1395f88a878151811061094157610941611632565b60200260200101518d60016040518463ffffffff1660e01b815260040161096a939291906112d3565b600060405180830381865afa158015610987573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109af919081019061142a565b905060008060009054906101000a90046001600160a01b03166001600160a01b0316635d4936ff6109fb8c89815181106109eb576109eb611632565b60200260200101518f6001610e90565b6040518263ffffffff1660e01b8152600401610a1991815260200190565b602060405180830381865afa158015610a36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5a9190611552565b825160c0015190915063ffffffff1615610b205760405180610140016040528086815260200160011515815260200183600001516060015181526020018360000151608001518152602001836000015160c0015163ffffffff168152602001836000015160e0015163ffffffff1681526020018281526020018360200151815260200183604001518152602001610af3878f6001610ce1565b905288610b008989611648565b81518110610b1057610b10611632565b6020026020010181905250610b2e565b86610b2a8161165b565b9750505b835160c0015163ffffffff1615610bf15760405180610140016040528086815260200160001515815260200185600001516060015181526020018560000151608001518152602001856000015160c0015163ffffffff168152602001856000015160e0015163ffffffff1681526020018481526020018560200151815260200185604001518152602001610bc4878f6000610ce1565b905288610bd18989611648565b81518110610be157610be1611632565b6020026020010181905250610bff565b86610bfb8161165b565b9750505b50505050508080610c0f9061165b565b915050610616565b506000610c248285611648565b67ffffffffffffffff811115610c3c57610c3c6110fb565b604051908082528060200260200182016040528015610c7557816020015b610c62610ee6565b815260200190600190039081610c5a5790505b50905060005b610c858386611648565b811015610cd657838181518110610c9e57610c9e611632565b6020026020010151828281518110610cb857610cb8611632565b60200260200101819052508080610cce9061165b565b915050610c7b565b509695505050505050565b600154604051639525092360e01b81526000918291829182916001600160a01b0390911690639525092390610d1a908a90600401611674565b61018060405180830381865afa158015610d38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5c91906116ba565b6000805460405163118272bf60e31b8152949750929550909350916001600160a01b0390911690638c1395f890610d9b908a9088908b906004016112d3565b600060405180830381865afa158015610db8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610de0919081019061142a565b600154835182516101000151604051630d527ba960e01b815293945060009373__$eacbb88ed4bd2af84aa4d43bcf675bcf7e$__93630d527ba993610e3c938b936001600160a01b03909316928e15928c92909160040161181f565b600060405180830381865af4158015610e59573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e81919081019061189a565b509a9950505050505050505050565b6040516bffffffffffffffffffffffff19606085811b8216602084015284901b16603482015281151560f81b60488201526000906049016040516020818303038152906040528051906020012090509392505050565b604080516101a0810182526000610140820181815261016083018290526101808301829052825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081019190915290565b6001600160a01b0381168114610f6657600080fd5b50565b8015158114610f6657600080fd5b600080600060608486031215610f8c57600080fd5b8335610f9781610f51565b92506020840135610fa781610f51565b91506040840135610fb781610f69565b809150509250925092565b610ff482825180516001600160a01b0390811683526020808301519091169083015260409081015162ffffff16910152565b602081015180151560608401525060408101516080830152606081015160a0830152608081015161102d60c084018263ffffffff169052565b5060a081015163ffffffff811660e08401525060c08101516101008381019190915260e08201516101208085019190915290820151610140840152015161016090910152565b61018081016110828284610fc2565b92915050565b60006020828403121561109a57600080fd5b81356110a581610f51565b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156110ef576110db838551610fc2565b9284019261018092909201916001016110c8565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611134576111346110fb565b60405290565b60405160e0810167ffffffffffffffff81118282101715611134576111346110fb565b604051610120810167ffffffffffffffff81118282101715611134576111346110fb565b60405160c0810167ffffffffffffffff81118282101715611134576111346110fb565b60405160a0810167ffffffffffffffff81118282101715611134576111346110fb565b604051601f8201601f1916810167ffffffffffffffff811182821017156111f0576111f06110fb565b604052919050565b62ffffff81168114610f6657600080fd5b600080600083850360a081121561121f57600080fd5b606081121561122d57600080fd5b50611236611111565b843561124181610f51565b8152602085013561125181610f51565b60208201526040850135611264816111f8565b60408201529250606084013561127981610f51565b91506080840135610fb781610f69565b805161129481610f51565b919050565b6000602082840312156112ab57600080fd5b81516110a581610f51565b6000602082840312156112c857600080fd5b81516110a5816111f8565b6001600160a01b039384168152919092166020820152901515604082015260600190565b805161129481610f69565b805163ffffffff8116811461129457600080fd5b600067ffffffffffffffff821115611330576113306110fb565b5060051b60200190565b8051600281900b811461129457600080fd5b600082601f83011261135d57600080fd5b8151602061137261136d83611316565b6111c7565b82815260e0928302850182019282820191908785111561139157600080fd5b8387015b8581101561141d5781818a0312156113ad5760008081fd5b6113b561113a565b6113be8261133a565b8152858201516001600160801b03811681146113da5760008081fd5b8187015260408281015190820152606080830151908201526080808301519082015260a0808301519082015260c080830151908201528452928401928101611395565b5090979650505050505050565b60006020828403121561143c57600080fd5b815167ffffffffffffffff8082111561145457600080fd5b908301906060828603121561146857600080fd5b611470611111565b82518281111561147f57600080fd5b8301610120818803121561149257600080fd5b61149a61115d565b6114a382611289565b81526114b1602083016112f7565b60208201526114c2604083016112f7565b6040820152606082015160608201526080820151608082015260a082015160a08201526114f160c08301611302565b60c082015261150260e08301611302565b60e0820152610100808301518581111561151b57600080fd5b6115278a82860161134c565b8284015250508083525050602083015160208201526040830151604082015280935050505092915050565b60006020828403121561156457600080fd5b5051919050565b6000602080838503121561157e57600080fd5b825167ffffffffffffffff81111561159557600080fd5b8301601f810185136115a657600080fd5b80516115b461136d82611316565b81815260059190911b820183019083810190878311156115d357600080fd5b928401925b828410156115fa5783516115eb81610f51565b825292840192908401906115d8565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761108257611082611605565b634e487b7160e01b600052603260045260246000fd5b8181038181111561108257611082611605565b60006001820161166d5761166d611605565b5060010190565b81516001600160a01b0390811682526020808401519091169082015260408083015162ffffff169082015260608101611082565b805161ffff8116811461129457600080fd5b60008060008385036101808112156116d157600080fd5b84516116dc81610f51565b93506116ea6020860161133a565b9250603f19016101408082121561170057600080fd5b611708611181565b60a083121561171657600080fd5b61171e6111a4565b925060408701518352606087015160208401526080870151604084015260a0870151606084015260c0870151608084015282815260e087015160208201526101008701516040820152610120870151606082015261177d8288016116a8565b608082015261016087015160a08201528093505050509250925092565b600081518084526020808501945080840160005b83811015611814578151805160020b8852838101516001600160801b03168489015260408082015190890152606080820151908901526080808201519089015260a0808201519089015260c0908101519088015260e090960195908201906001016117ae565b509495945050505050565b600061014060018060a01b03808a16845280891660208501525086151560408401528560020b606084015284516080840152602085015160a0840152604085015160c0840152606085015160e084015260808501516101008401528061012084015261188d8184018561179a565b9998505050505050505050565b6000806000606084860312156118af57600080fd5b835167ffffffffffffffff8111156118c657600080fd5b6118d28682870161134c565b9350506020840151915060408401519050925092509256fea264697066735822122003e159809c2c3efd11605afc3a43721fb421a6da7258d0c9e8bab32929b1e5f564736f6c63430008120033";

type DataProviderConstructorParams =
  | [linkLibraryAddresses: DataProviderLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DataProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class DataProvider__factory extends ContractFactory {
  constructor(...args: DataProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        DataProvider__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: DataProviderLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$eacbb88ed4bd2af84aa4d43bcf675bcf7e\\$__", "g"),
      linkLibraryAddresses["src/PremiumComputer.sol:PremiumComputer"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    poolManager: PromiseOrValue<string>,
    marginFacility: PromiseOrValue<string>,
    borrowFacility: PromiseOrValue<string>,
    uniswapFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DataProvider> {
    return super.deploy(
      poolManager,
      marginFacility,
      borrowFacility,
      uniswapFactory,
      overrides || {}
    ) as Promise<DataProvider>;
  }
  override getDeployTransaction(
    poolManager: PromiseOrValue<string>,
    marginFacility: PromiseOrValue<string>,
    borrowFacility: PromiseOrValue<string>,
    uniswapFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      poolManager,
      marginFacility,
      borrowFacility,
      uniswapFactory,
      overrides || {}
    );
  }
  override attach(address: string): DataProvider {
    return super.attach(address) as DataProvider;
  }
  override connect(signer: Signer): DataProvider__factory {
    return super.connect(signer) as DataProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DataProviderInterface {
    return new utils.Interface(_abi) as DataProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DataProvider {
    return new Contract(address, _abi, signerOrProvider) as DataProvider;
  }
}

export interface DataProviderLibraryAddresses {
  ["src/PremiumComputer.sol:PremiumComputer"]: string;
}
