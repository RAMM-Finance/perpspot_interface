/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Quoter,
  QuoterInterface,
} from "../../../../src/periphery/Quoter.sol/Quoter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_quoterV2",
        type: "address",
      },
      {
        internalType: "address",
        name: "_poolManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "_dataProvider",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
    ],
    name: "addIsSlot6",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tickDiff",
        type: "int24",
      },
    ],
    name: "getAllAprUtil",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token0",
                type: "address",
              },
              {
                internalType: "address",
                name: "token1",
                type: "address",
              },
              {
                internalType: "uint24",
                name: "fee",
                type: "uint24",
              },
            ],
            internalType: "struct PoolKey",
            name: "key",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "apr",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "utilTotal",
            type: "uint256",
          },
        ],
        internalType: "struct Quoter.AprUtilInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPoolKeys",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token0",
            type: "address",
          },
          {
            internalType: "address",
            name: "token1",
            type: "address",
          },
          {
            internalType: "string",
            name: "symbol0",
            type: "string",
          },
          {
            internalType: "string",
            name: "symbol1",
            type: "string",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "string",
            name: "name0",
            type: "string",
          },
          {
            internalType: "string",
            name: "name1",
            type: "string",
          },
          {
            internalType: "uint8",
            name: "decimals0",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "decimals1",
            type: "uint8",
          },
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
        ],
        internalType: "struct Quoter.PoolInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isSlot6",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token0",
                type: "address",
              },
              {
                internalType: "address",
                name: "token1",
                type: "address",
              },
              {
                internalType: "uint24",
                name: "fee",
                type: "uint24",
              },
            ],
            internalType: "struct PoolKey",
            name: "poolKey",
            type: "tuple",
          },
          {
            internalType: "bool",
            name: "isToken0",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "marginInInput",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "marginInOutput",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowAmount",
            type: "uint256",
          },
          {
            internalType: "contract IQuoterV2",
            name: "quoter",
            type: "address",
          },
          {
            internalType: "bool",
            name: "marginInPosToken",
            type: "bool",
          },
        ],
        internalType: "struct Quoter.QuoteExactInputParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "quoteExactInput",
    outputs: [
      {
        internalType: "uint256",
        name: "swapInput",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "positionOutput",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrowRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "avgPrice",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "borrowInfo",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620023e0380380620023e08339810160408190526200003491620000a1565b600080546001600160a01b039485166001600160a01b03199182161790915560018054938516938216939093179092556002805491909316908216179091556003805490911633179055620000eb565b80516001600160a01b03811681146200009c57600080fd5b919050565b600080600060608486031215620000b757600080fd5b620000c28462000084565b9250620000d26020850162000084565b9150620000e26040850162000084565b90509250925092565b6122e580620000fb6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630327b40c146100675780638da5cb5b14610090578063ae6e0409146100bb578063b1b873a2146100ee578063d183feee14610113578063e35ef2ce14610128575b600080fd5b61007a61007536600461165e565b61013d565b604051610087919061167b565b60405180910390f35b6003546100a3906001600160a01b031681565b6040516001600160a01b039091168152602001610087565b6100de6100c9366004611719565b60046020526000908152604090205460ff1681565b6040519015158152602001610087565b6101016100fc366004611736565b610663565b60405161008796959493929190611795565b61011b610d1b565b6040516100879190611857565b61013b610136366004611719565b610fde565b005b60606000600160009054906101000a90046001600160a01b03166001600160a01b031663d41dcbea6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610194573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101bc9190810190611a3d565b90506000815167ffffffffffffffff8111156101da576101da611986565b60405190808252806020026020018201604052801561023957816020015b6040805160c0810182526000606082018181526080830182905260a08301829052825260208083018290529282015282526000199092019101816101f85790505b50905060005b825181101561065b57600083828151811061025c5761025c611adc565b60200260200101516001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c59190611af2565b905060008483815181106102db576102db611adc565b60200260200101516001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103449190611af2565b905060006004600087868151811061035e5761035e611adc565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16156104135785848151811061039c5761039c611adc565b60200260200101516001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160c060405180830381865afa1580156103e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104059190611b34565b509294506104989350505050565b85848151811061042557610425611adc565b60200260200101516001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa15801561046a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048e9190611bc2565b5093955050505050505b60006040518060600160405280856001600160a01b03168152602001846001600160a01b031681526020018887815181106104d5576104d5611adc565b60200260200101516001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa15801561051a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053e9190611c62565b62ffffff16905260025490915060009081906001600160a01b0316631f2ecd83846105698e88611c95565b6105738f89611cba565b604080516001600160e01b031960e087901b16815284516001600160a01b039081166004830152602086015116602482015293015162ffffff166044840152600291820b6064840152900b608482015260a4016040805180830381865afa1580156105e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106069190611cdf565b9150915060405180606001604052808481526020018381526020018281525088888151811061063757610637611adc565b6020026020010181905250505050505050808061065390611d03565b91505061023f565b509392505050565b6000808080806060818061067e6101008a0160e08b01611719565b6001600160a01b0316146106a25761069d610100890160e08a01611719565b6106af565b6000546001600160a01b03165b90506106b9611525565b600154604051632411122160e11b81526001600160a01b03909116906348222442906106e9908c90600401611d67565b602060405180830381865afa158015610706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072a9190611d75565b6080820152600154604051639525092360e01b81526001600160a01b039091169063952509239061075f908c90600401611d67565b6101c060405180830381865afa15801561077d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a19190611d8e565b60a084015260020b60208301526001600160a01b0390811682526001546080830151604051636361616560e11b8152600481019190915291169063c6c2c2ca9060240160a060405180830381865afa158015610801573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108259190611e9c565b505050506001600160801b031660408281019190915281518151633850c7bd60e01b815291516001600160a01b0390911691633850c7bd9160048083019260e09291908290030181865afa158015610881573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a59190611bc2565b5050506001600160a01b039093166060850152506108ce9150506101208a016101008b01611efa565b15610a525760408101516108f09060c08b013590670de0b6b3a764000061104a565b94506109008560c08b0135611f17565b9750816001600160a01b031663c6a5026a6040518060a001604052808c606001602081019061092f9190611efa565b6109455761094060208e018e611719565b610955565b61095560408e0160208f01611719565b6001600160a01b0316815260200161097360808e0160608f01611efa565b61098c5761098760408e0160208f01611719565b610999565b61099960208e018e611719565b6001600160a01b031681526020018b81526020018c60000160400160208101906109c39190611f2a565b62ffffff16815260006020909101526040516001600160e01b031960e084901b1681526109f39190600401611f47565b6080604051808303816000875af1158015610a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a369190611f8f565b50919850610a4b91505060a08a013588611fe1565b9650610bd9565b6040810151610a7d90670de0b6b3a7640000610a7660c08d013560808e0135611fe1565b919061104a565b945060c0890135610a928660808c0135611f17565b610a9c9190611fe1565b9750816001600160a01b031663c6a5026a6040518060a001604052808c6060016020810190610acb9190611efa565b610ae157610adc60208e018e611719565b610af1565b610af160408e0160208f01611719565b6001600160a01b03168152602001610b0f60808e0160608f01611efa565b610b2857610b2360408e0160208f01611719565b610b35565b610b3560208e018e611719565b6001600160a01b031681526020018b81526020018c6000016040016020810190610b5f9190611f2a565b62ffffff16815260006020909101526040516001600160e01b031960e084901b168152610b8f9190600401611f47565b6080604051808303816000875af1158015610bae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd29190611f8f565b5091985050505b6001546001600160a01b031663ad16ab7e8a60c0810135610c006080830160608401611efa565b8b86606001516040518663ffffffff1660e01b8152600401610c26959493929190611ff4565b600060405180830381865afa158015610c43573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c6b919081019061202e565b8251600154602085015160a086015151608087015160405163aa7532af60e01b8152969a5094985073__$eacbb88ed4bd2af84aa4d43bcf675bcf7e$__9563aa7532af95610ccd95946001600160a01b03169392918b9160009160040161216b565b602060405180830381865af4158015610cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0e9190611d75565b9550505091939550919395565b60606000600160009054906101000a90046001600160a01b03166001600160a01b031663d41dcbea6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610d72573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d9a9190810190611a3d565b90506000815167ffffffffffffffff811115610db857610db8611986565b604051908082528060200260200182016040528015610df157816020015b610dde611561565b815260200190600190039081610dd65790505b50905060005b8251811015610fd75760046000848381518110610e1657610e16611adc565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615610f0c576000838281518110610e5657610e56611adc565b60200260200101516001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160c060405180830381865afa158015610e9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebf9190611b34565b50505050915050610ee9848381518110610edb57610edb611adc565b602002602001015182611129565b838381518110610efb57610efb611adc565b602002602001018190525050610fc5565b6000838281518110610f2057610f20611adc565b60200260200101516001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa158015610f65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f899190611bc2565b5050505050915050610fa6848381518110610edb57610edb611adc565b838381518110610fb857610fb8611adc565b6020026020010181905250505b80610fcf81611d03565b915050610df7565b5092915050565b6003546001600160a01b031633146110265760405162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b60448201526064015b60405180910390fd5b6001600160a01b03166000908152600460205260409020805460ff19166001179055565b6000808060001985870985870292508281108382030391505080600003611083576000841161107857600080fd5b508290049050611122565b8084116110bb5760405162461bcd60e51b815260206004820152600660248201526536bab62234bb60d11b604482015260640161101d565b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b611131611561565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611171573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111959190611af2565b90506000846001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fb9190611af2565b9050604051806101400160405280836001600160a01b03168152602001826001600160a01b03168152602001836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611265573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261128d9190810190612200565b8152602001826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156112d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112f89190810190612200565b8152602001866001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa15801561133b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135f9190611c62565b62ffffff168152602001836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156113a7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113cf9190810190612200565b8152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015611412573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261143a9190810190612200565b8152602001836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561147d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a19190612294565b60ff168152602001826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150b9190612294565b60ff1681526020018560020b815250925050505b92915050565b6040805160c08101825260008082526020820181905291810182905260608101829052608081019190915260a0810161155c6115d4565b905290565b60405180610140016040528060006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160608152602001600062ffffff1681526020016060815260200160608152602001600060ff168152602001600060ff168152602001600060020b81525090565b6040518060e001604052806116186040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001600081526020016000815260200160008152602001600061ffff16815260200160008152602001600081525090565b8060020b811461165b57600080fd5b50565b60006020828403121561167057600080fd5b81356111228161164c565b602080825282518282018190526000919060409081850190868401855b828110156116f75781516116d485825180516001600160a01b0390811683526020808301519091169083015260409081015162ffffff16910152565b808701516060860152850151608085015260a09093019290850190600101611698565b5091979650505050505050565b6001600160a01b038116811461165b57600080fd5b60006020828403121561172b57600080fd5b813561112281611704565b6000610120828403121561174957600080fd5b50919050565b805160020b82526001600160801b03602082015116602083015260408101516040830152606081015160608301526080810151608083015260a081015160a08301525050565b600060c0808301898452602089818601528860408601528760608601528660808601528260a086015281865180845260e087019150828801935060005b818110156117f5576117e583865161174f565b93830193918501916001016117d2565b50909c9b505050505050505050505050565b60005b8381101561182257818101518382015260200161180a565b50506000910152565b60008151808452611843816020860160208601611807565b601f01601f19169290920160200192915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561197857888303603f19018552815180516001600160a01b03168452610140818901516001600160a01b038116868b0152508782015181898701526118c98287018261182b565b915050606080830151868303828801526118e3838261182b565b925050506080808301516118fd8288018262ffffff169052565b505060a08083015186830382880152611916838261182b565b9250505060c08083015186830382880152611931838261182b565b9250505060e0808301516119498288018260ff169052565b50506101008281015160ff16908601526101209182015160020b9190940152938601939086019060010161187e565b509098975050505050505050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156119bf576119bf611986565b60405290565b60405160c0810167ffffffffffffffff811182821017156119bf576119bf611986565b604051601f8201601f1916810167ffffffffffffffff81118282101715611a1157611a11611986565b604052919050565b600067ffffffffffffffff821115611a3357611a33611986565b5060051b60200190565b60006020808385031215611a5057600080fd5b825167ffffffffffffffff811115611a6757600080fd5b8301601f81018513611a7857600080fd5b8051611a8b611a8682611a19565b6119e8565b81815260059190911b82018301908381019087831115611aaa57600080fd5b928401925b82841015611ad1578351611ac281611704565b82529284019290840190611aaf565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611b0457600080fd5b815161112281611704565b805161ffff81168114611b2157600080fd5b919050565b801515811461165b57600080fd5b60008060008060008060c08789031215611b4d57600080fd5b8651611b5881611704565b6020880151909650611b698161164c565b9450611b7760408801611b0f565b9350611b8560608801611b0f565b9250611b9360808801611b0f565b915060a0870151611ba381611b26565b809150509295509295509295565b805160ff81168114611b2157600080fd5b600080600080600080600060e0888a031215611bdd57600080fd5b8751611be881611704565b6020890151909750611bf98161164c565b9550611c0760408901611b0f565b9450611c1560608901611b0f565b9350611c2360808901611b0f565b9250611c3160a08901611bb1565b915060c0880151611c4181611b26565b8091505092959891949750929550565b62ffffff8116811461165b57600080fd5b600060208284031215611c7457600080fd5b815161112281611c51565b634e487b7160e01b600052601160045260246000fd5b600282810b9082900b03627fffff198112627fffff8213171561151f5761151f611c7f565b600281810b9083900b01627fffff8113627fffff198212171561151f5761151f611c7f565b60008060408385031215611cf257600080fd5b505080516020909101519092909150565b600060018201611d1557611d15611c7f565b5060010190565b8035611d2781611704565b6001600160a01b039081168352602082013590611d4382611704565b1660208301526040810135611d5781611c51565b62ffffff81166040840152505050565b6060810161151f8284611d1c565b600060208284031215611d8757600080fd5b5051919050565b60008060008385036101c0811215611da557600080fd5b8451611db081611704565b6020860151909450611dc18161164c565b9250603f190161018080821215611dd757600080fd5b611ddf61199c565b60c0831215611ded57600080fd5b611df56119c5565b925060408701518352606087015160208401526080870151604084015260a0870151606084015260c0870151608084015260e087015160a0840152828152610100870151602082015261012087015160408201526101408701516060820152611e616101608801611b0f565b60808201529086015160a08201526101a09095015160c08601525091949093509050565b80516001600160801b0381168114611b2157600080fd5b600080600080600060a08688031215611eb457600080fd5b611ebd86611e85565b9450611ecb60208701611e85565b9350611ed960408701611e85565b9250611ee760608701611e85565b9150608086015190509295509295909350565b600060208284031215611f0c57600080fd5b813561112281611b26565b8181038181111561151f5761151f611c7f565b600060208284031215611f3c57600080fd5b813561112281611c51565b81516001600160a01b0390811682526020808401518216908301526040808401519083015260608084015162ffffff1690830152608092830151169181019190915260a00190565b60008060008060808587031215611fa557600080fd5b845193506020850151611fb781611704565b604086015190935063ffffffff81168114611fd157600080fd5b6060959095015193969295505050565b8082018082111561151f5761151f611c7f565b60e081016120028288611d1c565b6060820195909552921515608084015260a08301919091526001600160a01b031660c090910152919050565b600080604080848603121561204257600080fd5b8351925060208085015167ffffffffffffffff81111561206157600080fd5b8501601f8101871361207257600080fd5b8051612080611a8682611a19565b81815260c0918202830184019184820191908a84111561209f57600080fd5b938501935b838510156121155780858c0312156120bc5760008081fd5b6120c46119c5565b85516120cf8161164c565b81526120dc868801611e85565b818801528588015188820152606080870151908201526080808701519082015260a08087015190820152835293840193918501916120a4565b508096505050505050509250929050565b600081518084526020808501945080840160005b838110156121605761214d87835161174f565b60c096909601959082019060010161213a565b509495945050505050565b600061018060018060a01b03808b168452808a166020850152508760020b60408401528651606084015260208701516080840152604087015160a0840152606087015160c0840152608087015160e084015260a0870151610100840152806101208401526121db81840187612126565b9150506121ed61014083018515159052565b8261016083015298975050505050505050565b60006020828403121561221257600080fd5b815167ffffffffffffffff8082111561222a57600080fd5b818401915084601f83011261223e57600080fd5b81518181111561225057612250611986565b612263601f8201601f19166020016119e8565b915080825285602082850101111561227a57600080fd5b61228b816020840160208601611807565b50949350505050565b6000602082840312156122a657600080fd5b61112282611bb156fea2646970667358221220b605decb72325601954d8d38059d69951396a8b173ff2d62772617a2640d2f4c64736f6c63430008120033";

type QuoterConstructorParams =
  | [linkLibraryAddresses: QuoterLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: QuoterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class Quoter__factory extends ContractFactory {
  constructor(...args: QuoterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, Quoter__factory.linkBytecode(linkLibraryAddresses), signer);
    }
  }

  static linkBytecode(linkLibraryAddresses: QuoterLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$eacbb88ed4bd2af84aa4d43bcf675bcf7e\\$__", "g"),
      linkLibraryAddresses["src/PremiumComputer.sol:PremiumComputer"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    _quoterV2: PromiseOrValue<string>,
    _poolManager: PromiseOrValue<string>,
    _dataProvider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Quoter> {
    return super.deploy(
      _quoterV2,
      _poolManager,
      _dataProvider,
      overrides || {}
    ) as Promise<Quoter>;
  }
  override getDeployTransaction(
    _quoterV2: PromiseOrValue<string>,
    _poolManager: PromiseOrValue<string>,
    _dataProvider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _quoterV2,
      _poolManager,
      _dataProvider,
      overrides || {}
    );
  }
  override attach(address: string): Quoter {
    return super.attach(address) as Quoter;
  }
  override connect(signer: Signer): Quoter__factory {
    return super.connect(signer) as Quoter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): QuoterInterface {
    return new utils.Interface(_abi) as QuoterInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Quoter {
    return new Contract(address, _abi, signerOrProvider) as Quoter;
  }
}

export interface QuoterLibraryAddresses {
  ["src/PremiumComputer.sol:PremiumComputer"]: string;
}
