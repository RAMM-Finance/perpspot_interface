/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Quoter,
  QuoterInterface,
} from "../../../../src/periphery/Quoter.sol/Quoter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_quoterV2",
        type: "address",
      },
      {
        internalType: "address",
        name: "_poolManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "_dataProvider",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tickDiff",
        type: "int24",
      },
    ],
    name: "getAllAprUtil",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token0",
                type: "address",
              },
              {
                internalType: "address",
                name: "token1",
                type: "address",
              },
              {
                internalType: "uint24",
                name: "fee",
                type: "uint24",
              },
            ],
            internalType: "struct PoolKey",
            name: "key",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "apr",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "utilTotal",
            type: "uint256",
          },
        ],
        internalType: "struct Quoter.AprUtilInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPoolKeys",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token0",
            type: "address",
          },
          {
            internalType: "address",
            name: "token1",
            type: "address",
          },
          {
            internalType: "string",
            name: "symbol0",
            type: "string",
          },
          {
            internalType: "string",
            name: "symbol1",
            type: "string",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "string",
            name: "name0",
            type: "string",
          },
          {
            internalType: "string",
            name: "name1",
            type: "string",
          },
          {
            internalType: "uint8",
            name: "decimals0",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "decimals1",
            type: "uint8",
          },
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
        ],
        internalType: "struct Quoter.PoolInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token0",
                type: "address",
              },
              {
                internalType: "address",
                name: "token1",
                type: "address",
              },
              {
                internalType: "uint24",
                name: "fee",
                type: "uint24",
              },
            ],
            internalType: "struct PoolKey",
            name: "poolKey",
            type: "tuple",
          },
          {
            internalType: "bool",
            name: "isToken0",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "marginInInput",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "marginInOutput",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowAmount",
            type: "uint256",
          },
          {
            internalType: "contract IQuoterV2",
            name: "quoter",
            type: "address",
          },
          {
            internalType: "bool",
            name: "marginInPosToken",
            type: "bool",
          },
        ],
        internalType: "struct Quoter.QuoteExactInputParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "quoteExactInput",
    outputs: [
      {
        internalType: "uint256",
        name: "swapInput",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "positionOutput",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrowRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "avgPrice",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "borrowInfo",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200208138038062002081833981016040819052620000349162000094565b600080546001600160a01b039485166001600160a01b031991821617909155600180549385169382169390931790925560028054919093169116179055620000de565b80516001600160a01b03811681146200008f57600080fd5b919050565b600080600060608486031215620000aa57600080fd5b620000b58462000077565b9250620000c56020850162000077565b9150620000d56040850162000077565b90509250925092565b611f9380620000ee6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630327b40c14610046578063b1b873a21461006f578063d183feee14610094575b600080fd5b610059610054366004611383565b6100a9565b60405161006691906113a0565b60405180910390f35b61008261007d366004611429565b610502565b60405161006696959493929190611488565b61009c610bba565b604051610066919061154a565b60606000600160009054906101000a90046001600160a01b03166001600160a01b031663d41dcbea6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610100573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101289190810190611745565b90506000815167ffffffffffffffff81111561014657610146611679565b6040519080825280602002602001820160405280156101a557816020015b6040805160c0810182526000606082018181526080830182905260a08301829052825260208083018290529282015282526000199092019101816101645790505b50905060005b82518110156104fa5760008382815181106101c8576101c86117e4565b60200260200101516001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561020d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023191906117fa565b90506000848381518110610247576102476117e4565b60200260200101516001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561028c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b091906117fa565b905060008584815181106102c6576102c66117e4565b60200260200101516001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa15801561030b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032f919061184d565b505050505091505060006040518060600160405280856001600160a01b03168152602001846001600160a01b03168152602001888781518110610374576103746117e4565b60200260200101516001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103dd91906118ed565b62ffffff16905260025490915060009081906001600160a01b0316631f2ecd83846104088e88611920565b6104128f8961194b565b604080516001600160e01b031960e087901b16815284516001600160a01b039081166004830152602086015116602482015293015162ffffff166044840152600291820b6064840152900b608482015260a4016040805180830381865afa158015610481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a59190611970565b915091506040518060600160405280848152602001838152602001828152508888815181106104d6576104d66117e4565b602002602001018190525050505050505080806104f290611994565b9150506101ab565b509392505050565b6000808080806060818061051d6101008a0160e08b016119ad565b6001600160a01b0316146105415761053c610100890160e08a016119ad565b61054e565b6000546001600160a01b03165b90506105586112bd565b600154604051632411122160e11b81526001600160a01b0390911690634822244290610588908c90600401611a15565b602060405180830381865afa1580156105a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c99190611a23565b6080820152600154604051639525092360e01b81526001600160a01b03909116906395250923906105fe908c90600401611a15565b6101c060405180830381865afa15801561061c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106409190611a3c565b60a084015260020b60208301526001600160a01b0390811682526001546080830151604051636361616560e11b8152600481019190915291169063c6c2c2ca9060240160a060405180830381865afa1580156106a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c49190611b4a565b505050506001600160801b031660408281019190915281518151633850c7bd60e01b815291516001600160a01b0390911691633850c7bd9160048083019260e09291908290030181865afa158015610720573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610744919061184d565b5050506001600160a01b0390931660608501525061076d9150506101208a016101008b01611ba8565b156108f157604081015161078f9060c08b013590670de0b6b3a76400006111da565b945061079f8560c08b0135611bc5565b9750816001600160a01b031663c6a5026a6040518060a001604052808c60600160208101906107ce9190611ba8565b6107e4576107df60208e018e6119ad565b6107f4565b6107f460408e0160208f016119ad565b6001600160a01b0316815260200161081260808e0160608f01611ba8565b61082b5761082660408e0160208f016119ad565b610838565b61083860208e018e6119ad565b6001600160a01b031681526020018b81526020018c60000160400160208101906108629190611bd8565b62ffffff16815260006020909101526040516001600160e01b031960e084901b1681526108929190600401611bf5565b6080604051808303816000875af11580156108b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d59190611c3d565b509198506108ea91505060a08a013588611c8f565b9650610a78565b604081015161091c90670de0b6b3a764000061091560c08d013560808e0135611c8f565b91906111da565b945060c08901356109318660808c0135611bc5565b61093b9190611c8f565b9750816001600160a01b031663c6a5026a6040518060a001604052808c606001602081019061096a9190611ba8565b6109805761097b60208e018e6119ad565b610990565b61099060408e0160208f016119ad565b6001600160a01b031681526020016109ae60808e0160608f01611ba8565b6109c7576109c260408e0160208f016119ad565b6109d4565b6109d460208e018e6119ad565b6001600160a01b031681526020018b81526020018c60000160400160208101906109fe9190611bd8565b62ffffff16815260006020909101526040516001600160e01b031960e084901b168152610a2e9190600401611bf5565b6080604051808303816000875af1158015610a4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a719190611c3d565b5091985050505b6001546001600160a01b031663ad16ab7e8a60c0810135610a9f6080830160608401611ba8565b8b86606001516040518663ffffffff1660e01b8152600401610ac5959493929190611ca2565b600060405180830381865afa158015610ae2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b0a9190810190611cdc565b8251600154602085015160a086015151608087015160405163aa7532af60e01b8152969a5094985073__$eacbb88ed4bd2af84aa4d43bcf675bcf7e$__9563aa7532af95610b6c95946001600160a01b03169392918b91600091600401611e19565b602060405180830381865af4158015610b89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bad9190611a23565b9550505091939550919395565b60606000600160009054906101000a90046001600160a01b03166001600160a01b031663d41dcbea6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610c11573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c399190810190611745565b90506000815167ffffffffffffffff811115610c5757610c57611679565b604051908082528060200260200182016040528015610cd857816020015b60408051610140810182526000808252602080830182905260609383018490528383018490526080830182905260a0830184905260c083019390935260e0820181905261010082018190526101208201528252600019909201910181610c755790505b50905060005b82518110156111d3576000838281518110610cfb57610cfb6117e4565b60200260200101516001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6491906117fa565b90506000848381518110610d7a57610d7a6117e4565b60200260200101516001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de391906117fa565b90506000858481518110610df957610df96117e4565b60200260200101516001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa158015610e3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e62919061184d565b5050505050915050604051806101400160405280846001600160a01b03168152602001836001600160a01b03168152602001846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610ed2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610efa9190810190611eae565b8152602001836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610f3d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f659190810190611eae565b8152602001878681518110610f7c57610f7c6117e4565b60200260200101516001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe591906118ed565b62ffffff168152602001846001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801561102d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110559190810190611eae565b8152602001836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015611098573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110c09190810190611eae565b8152602001846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611103573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111279190611f42565b60ff168152602001836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561116d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111919190611f42565b60ff1681526020018260020b8152508585815181106111b2576111b26117e4565b602002602001018190525050505080806111cb90611994565b915050610cde565b5092915050565b6000808060001985870985870292508281108382030391505080600003611213576000841161120857600080fd5b5082900490506112b6565b80841161124f5760405162461bcd60e51b815260206004820152600660248201526536bab62234bb60d11b604482015260640160405180910390fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b6040805160c08101825260008082526020820181905291810182905260608101829052608081019190915260a081016112f46112f9565b905290565b6040518060e0016040528061133d6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001600081526020016000815260200160008152602001600061ffff16815260200160008152602001600081525090565b8060020b811461138057600080fd5b50565b60006020828403121561139557600080fd5b81356112b681611371565b602080825282518282018190526000919060409081850190868401855b8281101561141c5781516113f985825180516001600160a01b0390811683526020808301519091169083015260409081015162ffffff16910152565b808701516060860152850151608085015260a090930192908501906001016113bd565b5091979650505050505050565b6000610120828403121561143c57600080fd5b50919050565b805160020b82526001600160801b03602082015116602083015260408101516040830152606081015160608301526080810151608083015260a081015160a08301525050565b600060c0808301898452602089818601528860408601528760608601528660808601528260a086015281865180845260e087019150828801935060005b818110156114e8576114d8838651611442565b93830193918501916001016114c5565b50909c9b505050505050505050505050565b60005b838110156115155781810151838201526020016114fd565b50506000910152565b600081518084526115368160208601602086016114fa565b601f01601f19169290920160200192915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561166b57888303603f19018552815180516001600160a01b03168452610140818901516001600160a01b038116868b0152508782015181898701526115bc8287018261151e565b915050606080830151868303828801526115d6838261151e565b925050506080808301516115f08288018262ffffff169052565b505060a08083015186830382880152611609838261151e565b9250505060c08083015186830382880152611624838261151e565b9250505060e08083015161163c8288018260ff169052565b50506101008281015160ff16908601526101209182015160020b91909401529386019390860190600101611571565b509098975050505050505050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156116b2576116b2611679565b60405290565b60405160c0810167ffffffffffffffff811182821017156116b2576116b2611679565b604051601f8201601f1916810167ffffffffffffffff8111828210171561170457611704611679565b604052919050565b600067ffffffffffffffff82111561172657611726611679565b5060051b60200190565b6001600160a01b038116811461138057600080fd5b6000602080838503121561175857600080fd5b825167ffffffffffffffff81111561176f57600080fd5b8301601f8101851361178057600080fd5b805161179361178e8261170c565b6116db565b81815260059190911b820183019083810190878311156117b257600080fd5b928401925b828410156117d95783516117ca81611730565b825292840192908401906117b7565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561180c57600080fd5b81516112b681611730565b805161ffff8116811461182957600080fd5b919050565b805160ff8116811461182957600080fd5b801515811461138057600080fd5b600080600080600080600060e0888a03121561186857600080fd5b875161187381611730565b602089015190975061188481611371565b955061189260408901611817565b94506118a060608901611817565b93506118ae60808901611817565b92506118bc60a0890161182e565b915060c08801516118cc8161183f565b8091505092959891949750929550565b62ffffff8116811461138057600080fd5b6000602082840312156118ff57600080fd5b81516112b6816118dc565b634e487b7160e01b600052601160045260246000fd5b600282810b9082900b03627fffff198112627fffff821317156119455761194561190a565b92915050565b600281810b9083900b01627fffff8113627fffff19821217156119455761194561190a565b6000806040838503121561198357600080fd5b505080516020909101519092909150565b6000600182016119a6576119a661190a565b5060010190565b6000602082840312156119bf57600080fd5b81356112b681611730565b80356119d581611730565b6001600160a01b0390811683526020820135906119f182611730565b1660208301526040810135611a05816118dc565b62ffffff81166040840152505050565b6060810161194582846119ca565b600060208284031215611a3557600080fd5b5051919050565b60008060008385036101c0811215611a5357600080fd5b8451611a5e81611730565b6020860151909450611a6f81611371565b9250603f190161018080821215611a8557600080fd5b611a8d61168f565b60c0831215611a9b57600080fd5b611aa36116b8565b925060408701518352606087015160208401526080870151604084015260a0870151606084015260c0870151608084015260e087015160a0840152828152610100870151602082015261012087015160408201526101408701516060820152611b0f6101608801611817565b60808201529086015160a08201526101a09095015160c08601525091949093509050565b80516001600160801b038116811461182957600080fd5b600080600080600060a08688031215611b6257600080fd5b611b6b86611b33565b9450611b7960208701611b33565b9350611b8760408701611b33565b9250611b9560608701611b33565b9150608086015190509295509295909350565b600060208284031215611bba57600080fd5b81356112b68161183f565b818103818111156119455761194561190a565b600060208284031215611bea57600080fd5b81356112b6816118dc565b81516001600160a01b0390811682526020808401518216908301526040808401519083015260608084015162ffffff1690830152608092830151169181019190915260a00190565b60008060008060808587031215611c5357600080fd5b845193506020850151611c6581611730565b604086015190935063ffffffff81168114611c7f57600080fd5b6060959095015193969295505050565b808201808211156119455761194561190a565b60e08101611cb082886119ca565b6060820195909552921515608084015260a08301919091526001600160a01b031660c090910152919050565b6000806040808486031215611cf057600080fd5b8351925060208085015167ffffffffffffffff811115611d0f57600080fd5b8501601f81018713611d2057600080fd5b8051611d2e61178e8261170c565b81815260c0918202830184019184820191908a841115611d4d57600080fd5b938501935b83851015611dc35780858c031215611d6a5760008081fd5b611d726116b8565b8551611d7d81611371565b8152611d8a868801611b33565b818801528588015188820152606080870151908201526080808701519082015260a0808701519082015283529384019391850191611d52565b508096505050505050509250929050565b600081518084526020808501945080840160005b83811015611e0e57611dfb878351611442565b60c0969096019590820190600101611de8565b509495945050505050565b600061018060018060a01b03808b168452808a166020850152508760020b60408401528651606084015260208701516080840152604087015160a0840152606087015160c0840152608087015160e084015260a087015161010084015280610120840152611e8981840187611dd4565b915050611e9b61014083018515159052565b8261016083015298975050505050505050565b600060208284031215611ec057600080fd5b815167ffffffffffffffff80821115611ed857600080fd5b818401915084601f830112611eec57600080fd5b815181811115611efe57611efe611679565b611f11601f8201601f19166020016116db565b9150808252856020828501011115611f2857600080fd5b611f398160208401602086016114fa565b50949350505050565b600060208284031215611f5457600080fd5b6112b68261182e56fea26469706673582212203b7bff359eb0736b81b75d65f40790357d41acb017b5fa94830a7d349c7e278d64736f6c63430008120033";

type QuoterConstructorParams =
  | [linkLibraryAddresses: QuoterLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: QuoterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class Quoter__factory extends ContractFactory {
  constructor(...args: QuoterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, Quoter__factory.linkBytecode(linkLibraryAddresses), signer);
    }
  }

  static linkBytecode(linkLibraryAddresses: QuoterLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$eacbb88ed4bd2af84aa4d43bcf675bcf7e\\$__", "g"),
      linkLibraryAddresses["src/PremiumComputer.sol:PremiumComputer"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    _quoterV2: PromiseOrValue<string>,
    _poolManager: PromiseOrValue<string>,
    _dataProvider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Quoter> {
    return super.deploy(
      _quoterV2,
      _poolManager,
      _dataProvider,
      overrides || {}
    ) as Promise<Quoter>;
  }
  override getDeployTransaction(
    _quoterV2: PromiseOrValue<string>,
    _poolManager: PromiseOrValue<string>,
    _dataProvider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _quoterV2,
      _poolManager,
      _dataProvider,
      overrides || {}
    );
  }
  override attach(address: string): Quoter {
    return super.attach(address) as Quoter;
  }
  override connect(signer: Signer): Quoter__factory {
    return super.connect(signer) as Quoter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): QuoterInterface {
    return new utils.Interface(_abi) as QuoterInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Quoter {
    return new Contract(address, _abi, signerOrProvider) as Quoter;
  }
}

export interface QuoterLibraryAddresses {
  ["src/PremiumComputer.sol:PremiumComputer"]: string;
}
