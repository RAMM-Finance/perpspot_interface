/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Quoter,
  QuoterInterface,
} from "../../../../src/periphery/Quoter.sol/Quoter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_quoterV2",
        type: "address",
      },
      {
        internalType: "address",
        name: "_poolManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "_dataProvider",
        type: "address",
      },
      {
        internalType: "address",
        name: "_sharedLiquidity",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
    ],
    name: "addIsSlot6",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tickDiff",
        type: "int24",
      },
    ],
    name: "getAllAprUtil",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token0",
                type: "address",
              },
              {
                internalType: "address",
                name: "token1",
                type: "address",
              },
              {
                internalType: "uint24",
                name: "fee",
                type: "uint24",
              },
            ],
            internalType: "struct PoolKey",
            name: "key",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "apr",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "utilTotal",
            type: "uint256",
          },
        ],
        internalType: "struct Quoter.AprUtilInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPoolKeys",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token0",
            type: "address",
          },
          {
            internalType: "address",
            name: "token1",
            type: "address",
          },
          {
            internalType: "string",
            name: "symbol0",
            type: "string",
          },
          {
            internalType: "string",
            name: "symbol1",
            type: "string",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "string",
            name: "name0",
            type: "string",
          },
          {
            internalType: "string",
            name: "name1",
            type: "string",
          },
          {
            internalType: "uint8",
            name: "decimals0",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "decimals1",
            type: "uint8",
          },
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
        ],
        internalType: "struct Quoter.PoolInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSharedLiquidityInfo",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token0",
                type: "address",
              },
              {
                internalType: "address",
                name: "token1",
                type: "address",
              },
              {
                internalType: "uint24",
                name: "fee",
                type: "uint24",
              },
            ],
            internalType: "struct PoolKey",
            name: "key",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxPerPair",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "exposureToPair",
            type: "uint256",
          },
        ],
        internalType: "struct Quoter.PairSharedLiquidityInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isSlot6",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token0",
                type: "address",
              },
              {
                internalType: "address",
                name: "token1",
                type: "address",
              },
              {
                internalType: "uint24",
                name: "fee",
                type: "uint24",
              },
            ],
            internalType: "struct PoolKey",
            name: "poolKey",
            type: "tuple",
          },
          {
            internalType: "bool",
            name: "isToken0",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "marginInInput",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "marginInOutput",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowAmount",
            type: "uint256",
          },
          {
            internalType: "contract IQuoterV2",
            name: "quoter",
            type: "address",
          },
          {
            internalType: "bool",
            name: "marginInPosToken",
            type: "bool",
          },
        ],
        internalType: "struct Quoter.QuoteExactInputParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "quoteExactInput",
    outputs: [
      {
        internalType: "uint256",
        name: "swapInput",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "positionOutput",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrowRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "avgPrice",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "borrowInfo",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200274c3803806200274c8339810160408190526200003491620000a2565b50600080546001600160a01b039485166001600160a01b03199182161790915560018054938516938216939093179092556002805491909316908216179091556004805490911633179055620000ff565b80516001600160a01b03811681146200009d57600080fd5b919050565b60008060008060808587031215620000b957600080fd5b620000c48562000085565b9350620000d46020860162000085565b9250620000e46040860162000085565b9150620000f46060860162000085565b905092959194509250565b61263d806200010f6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063ae6e04091161005b578063ae6e0409146100eb578063b1b873a21461011e578063d183feee14610143578063e35ef2ce1461015857600080fd5b80630327b40c14610082578063359b805b146100ab5780638da5cb5b146100c0575b600080fd5b61009561009036600461192c565b61016d565b6040516100a29190611996565b60405180910390f35b6100b361065e565b6040516100a291906119e4565b6004546100d3906001600160a01b031681565b6040516001600160a01b0390911681526020016100a2565b61010e6100f9366004611a3b565b60056020526000908152604090205460ff1681565b60405190151581526020016100a2565b61013161012c366004611a58565b610938565b6040516100a296959493929190611ab7565b61014b610ff0565b6040516100a29190611b79565b61016b610166366004611a3b565b6112ac565b005b60606000600160009054906101000a90046001600160a01b03166001600160a01b031663d41dcbea6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156101c4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101ec9190810190611d5f565b90506000815167ffffffffffffffff81111561020a5761020a611ca8565b60405190808252806020026020018201604052801561026957816020015b6040805160c0810182526000606082018181526080830182905260a08301829052825260208083018290529282015282526000199092019101816102285790505b50905060005b825181101561065657600083828151811061028c5761028c611dfe565b60200260200101516001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f59190611e14565b9050600084838151811061030b5761030b611dfe565b60200260200101516001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610350573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103749190611e14565b905060006005600087868151811061038e5761038e611dfe565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615610443578584815181106103cc576103cc611dfe565b60200260200101516001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160c060405180830381865afa158015610411573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104359190611e56565b509294506104c89350505050565b85848151811061045557610455611dfe565b60200260200101516001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa15801561049a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104be9190611ee4565b5093955050505050505b60006040518060600160405280856001600160a01b03168152602001846001600160a01b0316815260200188878151811061050557610505611dfe565b60200260200101516001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa15801561054a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056e9190611f84565b62ffffff16905260025490915060009081906001600160a01b0316631f2ecd83846105998e88611fb7565b6105a38f89611fdc565b6040518463ffffffff1660e01b81526004016105c193929190612001565b6040805180830381865afa1580156105dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106019190612029565b9150915060405180606001604052808481526020018381526020018281525088888151811061063257610632611dfe565b6020026020010181905250505050505050808061064e9061204d565b91505061026f565b509392505050565b6060600061066a610ff0565b90506000815167ffffffffffffffff81111561068857610688611ca8565b6040519080825280602002602001820160405280156106e757816020015b6040805160c0810182526000606082018181526080830182905260a08301829052825260208083018290529282015282526000199092019101816106a65790505b50905060005b8251811015610931576000604051806060016040528085848151811061071557610715611dfe565b6020026020010151600001516001600160a01b0316815260200185848151811061074157610741611dfe565b6020026020010151602001516001600160a01b0316815260200185848151811061076d5761076d611dfe565b60209081029190910101516080015162ffffff169052600154604051632411122160e11b81529192506000916001600160a01b03909116906348222442906107b9908590600401612066565b602060405180830381865afa1580156107d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fa9190612074565b60035460405163fad56a4160e01b8152600481018390529192506000916001600160a01b039091169063fad56a4190602401602060405180830381865afa158015610849573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086d9190612074565b6003546040516376efa68360e01b8152600481018590529192506000916001600160a01b03909116906376efa68390602401602060405180830381865afa1580156108bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e09190612074565b905060405180606001604052808581526020018281526020018381525086868151811061090f5761090f611dfe565b60200260200101819052505050505080806109299061204d565b9150506106ed565b5092915050565b600080808080606081806109536101008a0160e08b01611a3b565b6001600160a01b03161461097757610972610100890160e08a01611a3b565b610984565b6000546001600160a01b03165b905061098e6117f3565b600154604051632411122160e11b81526001600160a01b03909116906348222442906109be908c906004016120d8565b602060405180830381865afa1580156109db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ff9190612074565b6080820152600154604051639525092360e01b81526001600160a01b0390911690639525092390610a34908c906004016120d8565b6101c060405180830381865afa158015610a52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7691906120e6565b60a084015260020b60208301526001600160a01b0390811682526001546080830151604051636361616560e11b8152600481019190915291169063c6c2c2ca9060240160a060405180830381865afa158015610ad6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afa91906121f4565b505050506001600160801b031660408281019190915281518151633850c7bd60e01b815291516001600160a01b0390911691633850c7bd9160048083019260e09291908290030181865afa158015610b56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7a9190611ee4565b5050506001600160a01b03909316606085015250610ba39150506101208a016101008b01612252565b15610d27576040810151610bc59060c08b013590670de0b6b3a7640000611318565b9450610bd58560c08b013561226f565b9750816001600160a01b031663c6a5026a6040518060a001604052808c6060016020810190610c049190612252565b610c1a57610c1560208e018e611a3b565b610c2a565b610c2a60408e0160208f01611a3b565b6001600160a01b03168152602001610c4860808e0160608f01612252565b610c6157610c5c60408e0160208f01611a3b565b610c6e565b610c6e60208e018e611a3b565b6001600160a01b031681526020018b81526020018c6000016040016020810190610c989190612282565b62ffffff16815260006020909101526040516001600160e01b031960e084901b168152610cc8919060040161229f565b6080604051808303816000875af1158015610ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0b91906122e7565b50919850610d2091505060a08a013588612339565b9650610eae565b6040810151610d5290670de0b6b3a7640000610d4b60c08d013560808e0135612339565b9190611318565b945060c0890135610d678660808c013561226f565b610d719190612339565b9750816001600160a01b031663c6a5026a6040518060a001604052808c6060016020810190610da09190612252565b610db657610db160208e018e611a3b565b610dc6565b610dc660408e0160208f01611a3b565b6001600160a01b03168152602001610de460808e0160608f01612252565b610dfd57610df860408e0160208f01611a3b565b610e0a565b610e0a60208e018e611a3b565b6001600160a01b031681526020018b81526020018c6000016040016020810190610e349190612282565b62ffffff16815260006020909101526040516001600160e01b031960e084901b168152610e64919060040161229f565b6080604051808303816000875af1158015610e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea791906122e7565b5091985050505b6001546001600160a01b031663ad16ab7e8a60c0810135610ed56080830160608401612252565b8b86606001516040518663ffffffff1660e01b8152600401610efb95949392919061234c565b600060405180830381865afa158015610f18573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f409190810190612386565b8251600154602085015160a086015151608087015160405163aa7532af60e01b8152969a5094985073__$eacbb88ed4bd2af84aa4d43bcf675bcf7e$__9563aa7532af95610fa295946001600160a01b03169392918b916000916004016124c3565b602060405180830381865af4158015610fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe39190612074565b9550505091939550919395565b60606000600160009054906101000a90046001600160a01b03166001600160a01b031663d41dcbea6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611047573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261106f9190810190611d5f565b90506000815167ffffffffffffffff81111561108d5761108d611ca8565b6040519080825280602002602001820160405280156110c657816020015b6110b361182f565b8152602001906001900390816110ab5790505b50905060005b825181101561093157600560008483815181106110eb576110eb611dfe565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16156111e157600083828151811061112b5761112b611dfe565b60200260200101516001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160c060405180830381865afa158015611170573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111949190611e56565b505050509150506111be8483815181106111b0576111b0611dfe565b6020026020010151826113f7565b8383815181106111d0576111d0611dfe565b60200260200101819052505061129a565b60008382815181106111f5576111f5611dfe565b60200260200101516001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa15801561123a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125e9190611ee4565b505050505091505061127b8483815181106111b0576111b0611dfe565b83838151811061128d5761128d611dfe565b6020026020010181905250505b806112a48161204d565b9150506110cc565b6004546001600160a01b031633146112f45760405162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b60448201526064015b60405180910390fd5b6001600160a01b03166000908152600560205260409020805460ff19166001179055565b6000808060001985870985870292508281108382030391505080600003611351576000841161134657600080fd5b5082900490506113f0565b8084116113895760405162461bcd60e51b815260206004820152600660248201526536bab62234bb60d11b60448201526064016112eb565b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b6113ff61182f565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561143f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114639190611e14565b90506000846001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c99190611e14565b9050604051806101400160405280836001600160a01b03168152602001826001600160a01b03168152602001836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611533573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261155b9190810190612558565b8152602001826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561159e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115c69190810190612558565b8152602001866001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa158015611609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162d9190611f84565b62ffffff168152602001836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015611675573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261169d9190810190612558565b8152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156116e0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117089190810190612558565b8152602001836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561174b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176f91906125ec565b60ff168152602001826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d991906125ec565b60ff1681526020018560020b815250925050505b92915050565b6040805160c08101825260008082526020820181905291810182905260608101829052608081019190915260a0810161182a6118a2565b905290565b60405180610140016040528060006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160608152602001600062ffffff1681526020016060815260200160608152602001600060ff168152602001600060ff168152602001600060020b81525090565b6040518060e001604052806118e66040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001600081526020016000815260200160008152602001600061ffff16815260200160008152602001600081525090565b8060020b811461192957600080fd5b50565b60006020828403121561193e57600080fd5b81356113f08161191a565b80516001600160a01b0390811683526020808301519091169083015260409081015162ffffff16910152565b611980828251611949565b6020810151606083015260400151608090910152565b6020808252825182820181905260009190848201906040850190845b818110156119d8576119c5838551611975565b9284019260a092909201916001016119b2565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156119d857611a13838551611975565b9284019260a09290920191600101611a00565b6001600160a01b038116811461192957600080fd5b600060208284031215611a4d57600080fd5b81356113f081611a26565b60006101208284031215611a6b57600080fd5b50919050565b805160020b82526001600160801b03602082015116602083015260408101516040830152606081015160608301526080810151608083015260a081015160a08301525050565b600060c0808301898452602089818601528860408601528760608601528660808601528260a086015281865180845260e087019150828801935060005b81811015611b1757611b07838651611a71565b9383019391850191600101611af4565b50909c9b505050505050505050505050565b60005b83811015611b44578181015183820152602001611b2c565b50506000910152565b60008151808452611b65816020860160208601611b29565b601f01601f19169290920160200192915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015611c9a57888303603f19018552815180516001600160a01b03168452610140818901516001600160a01b038116868b015250878201518189870152611beb82870182611b4d565b91505060608083015186830382880152611c058382611b4d565b92505050608080830151611c1f8288018262ffffff169052565b505060a08083015186830382880152611c388382611b4d565b9250505060c08083015186830382880152611c538382611b4d565b9250505060e080830151611c6b8288018260ff169052565b50506101008281015160ff16908601526101209182015160020b91909401529386019390860190600101611ba0565b509098975050505050505050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715611ce157611ce1611ca8565b60405290565b60405160c0810167ffffffffffffffff81118282101715611ce157611ce1611ca8565b604051601f8201601f1916810167ffffffffffffffff81118282101715611d3357611d33611ca8565b604052919050565b600067ffffffffffffffff821115611d5557611d55611ca8565b5060051b60200190565b60006020808385031215611d7257600080fd5b825167ffffffffffffffff811115611d8957600080fd5b8301601f81018513611d9a57600080fd5b8051611dad611da882611d3b565b611d0a565b81815260059190911b82018301908381019087831115611dcc57600080fd5b928401925b82841015611df3578351611de481611a26565b82529284019290840190611dd1565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611e2657600080fd5b81516113f081611a26565b805161ffff81168114611e4357600080fd5b919050565b801515811461192957600080fd5b60008060008060008060c08789031215611e6f57600080fd5b8651611e7a81611a26565b6020880151909650611e8b8161191a565b9450611e9960408801611e31565b9350611ea760608801611e31565b9250611eb560808801611e31565b915060a0870151611ec581611e48565b809150509295509295509295565b805160ff81168114611e4357600080fd5b600080600080600080600060e0888a031215611eff57600080fd5b8751611f0a81611a26565b6020890151909750611f1b8161191a565b9550611f2960408901611e31565b9450611f3760608901611e31565b9350611f4560808901611e31565b9250611f5360a08901611ed3565b915060c0880151611f6381611e48565b8091505092959891949750929550565b62ffffff8116811461192957600080fd5b600060208284031215611f9657600080fd5b81516113f081611f73565b634e487b7160e01b600052601160045260246000fd5b600282810b9082900b03627fffff198112627fffff821317156117ed576117ed611fa1565b600281810b9083900b01627fffff8113627fffff19821217156117ed576117ed611fa1565b60a0810161200f8286611949565b8360020b60608301528260020b6080830152949350505050565b6000806040838503121561203c57600080fd5b505080516020909101519092909150565b60006001820161205f5761205f611fa1565b5060010190565b606081016117ed8284611949565b60006020828403121561208657600080fd5b5051919050565b803561209881611a26565b6001600160a01b0390811683526020820135906120b482611a26565b16602083015260408101356120c881611f73565b62ffffff81166040840152505050565b606081016117ed828461208d565b60008060008385036101c08112156120fd57600080fd5b845161210881611a26565b60208601519094506121198161191a565b9250603f19016101808082121561212f57600080fd5b612137611cbe565b60c083121561214557600080fd5b61214d611ce7565b925060408701518352606087015160208401526080870151604084015260a0870151606084015260c0870151608084015260e087015160a08401528281526101008701516020820152610120870151604082015261014087015160608201526121b96101608801611e31565b60808201529086015160a08201526101a09095015160c08601525091949093509050565b80516001600160801b0381168114611e4357600080fd5b600080600080600060a0868803121561220c57600080fd5b612215866121dd565b9450612223602087016121dd565b9350612231604087016121dd565b925061223f606087016121dd565b9150608086015190509295509295909350565b60006020828403121561226457600080fd5b81356113f081611e48565b818103818111156117ed576117ed611fa1565b60006020828403121561229457600080fd5b81356113f081611f73565b81516001600160a01b0390811682526020808401518216908301526040808401519083015260608084015162ffffff1690830152608092830151169181019190915260a00190565b600080600080608085870312156122fd57600080fd5b84519350602085015161230f81611a26565b604086015190935063ffffffff8116811461232957600080fd5b6060959095015193969295505050565b808201808211156117ed576117ed611fa1565b60e0810161235a828861208d565b6060820195909552921515608084015260a08301919091526001600160a01b031660c090910152919050565b600080604080848603121561239a57600080fd5b8351925060208085015167ffffffffffffffff8111156123b957600080fd5b8501601f810187136123ca57600080fd5b80516123d8611da882611d3b565b81815260c0918202830184019184820191908a8411156123f757600080fd5b938501935b8385101561246d5780858c0312156124145760008081fd5b61241c611ce7565b85516124278161191a565b81526124348688016121dd565b818801528588015188820152606080870151908201526080808701519082015260a08087015190820152835293840193918501916123fc565b508096505050505050509250929050565b600081518084526020808501945080840160005b838110156124b8576124a5878351611a71565b60c0969096019590820190600101612492565b509495945050505050565b600061018060018060a01b03808b168452808a166020850152508760020b60408401528651606084015260208701516080840152604087015160a0840152606087015160c0840152608087015160e084015260a0870151610100840152806101208401526125338184018761247e565b91505061254561014083018515159052565b8261016083015298975050505050505050565b60006020828403121561256a57600080fd5b815167ffffffffffffffff8082111561258257600080fd5b818401915084601f83011261259657600080fd5b8151818111156125a8576125a8611ca8565b6125bb601f8201601f1916602001611d0a565b91508082528560208285010111156125d257600080fd5b6125e3816020840160208601611b29565b50949350505050565b6000602082840312156125fe57600080fd5b6113f082611ed356fea2646970667358221220fbfd737589d607f582a27c18fd9382a2a7d9ef463ec8f3aab2f3d8e25ef18d7764736f6c63430008120033";

type QuoterConstructorParams =
  | [linkLibraryAddresses: QuoterLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: QuoterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class Quoter__factory extends ContractFactory {
  constructor(...args: QuoterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, Quoter__factory.linkBytecode(linkLibraryAddresses), signer);
    }
  }

  static linkBytecode(linkLibraryAddresses: QuoterLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$eacbb88ed4bd2af84aa4d43bcf675bcf7e\\$__", "g"),
      linkLibraryAddresses["src/PremiumComputer.sol:PremiumComputer"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    _quoterV2: PromiseOrValue<string>,
    _poolManager: PromiseOrValue<string>,
    _dataProvider: PromiseOrValue<string>,
    _sharedLiquidity: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Quoter> {
    return super.deploy(
      _quoterV2,
      _poolManager,
      _dataProvider,
      _sharedLiquidity,
      overrides || {}
    ) as Promise<Quoter>;
  }
  override getDeployTransaction(
    _quoterV2: PromiseOrValue<string>,
    _poolManager: PromiseOrValue<string>,
    _dataProvider: PromiseOrValue<string>,
    _sharedLiquidity: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _quoterV2,
      _poolManager,
      _dataProvider,
      _sharedLiquidity,
      overrides || {}
    );
  }
  override attach(address: string): Quoter {
    return super.attach(address) as Quoter;
  }
  override connect(signer: Signer): Quoter__factory {
    return super.connect(signer) as Quoter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): QuoterInterface {
    return new utils.Interface(_abi) as QuoterInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Quoter {
    return new Contract(address, _abi, signerOrProvider) as Quoter;
  }
}

export interface QuoterLibraryAddresses {
  ["src/PremiumComputer.sol:PremiumComputer"]: string;
}
