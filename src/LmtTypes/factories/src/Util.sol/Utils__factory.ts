/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { Utils, UtilsInterface } from "../../../src/Util.sol/Utils";

const _abi = [
  {
    inputs: [],
    name: "T",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "price",
        type: "uint160",
      },
      {
        internalType: "uint256",
        name: "maxSlippage",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "down",
        type: "bool",
      },
    ],
    name: "applySlippageX96",
    outputs: [
      {
        internalType: "uint160",
        name: "",
        type: "uint160",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "borrowInfo",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "percentageClosed",
        type: "uint256",
      },
      {
        internalType: "int24",
        name: "tickDiscretization",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "uint160",
        name: "sqrtPriceX96",
        type: "uint160",
      },
    ],
    name: "getAmountsRequired",
    outputs: [
      {
        internalType: "uint256",
        name: "amount0Required",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1Required",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "borrowInfo",
        type: "tuple[]",
      },
      {
        internalType: "bool",
        name: "getToken0",
        type: "bool",
      },
      {
        internalType: "int24",
        name: "tickSpacing",
        type: "int24",
      },
    ],
    name: "getFilledAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "filledAmount",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "borrowInfo",
        type: "tuple[]",
      },
    ],
    name: "getMinMaxTicks",
    outputs: [
      {
        internalType: "int24",
        name: "min",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "max",
        type: "int24",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "borrowInfo",
        type: "tuple[]",
      },
      {
        internalType: "bool",
        name: "positionIsToken0",
        type: "bool",
      },
      {
        internalType: "int24",
        name: "curTick",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickDiscretization",
        type: "int24",
      },
    ],
    name: "getRangeConditions",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "borrowInfo",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "reducePercentage",
        type: "uint256",
      },
    ],
    name: "getRepayInfo",
    outputs: [
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "loans1",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "loans2",
        type: "tuple[]",
      },
    ],
    name: "mergeLiquidityLoans",
    outputs: [
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside0LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthInside1LastX128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastGrowth",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityLoan[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "positionIsToken0",
        type: "bool",
      },
      {
        internalType: "int24",
        name: "curTick",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "maxTick",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "minTick",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickDiscretization",
        type: "int24",
      },
    ],
    name: "rangeConditions",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "bool",
        name: "down",
        type: "bool",
      },
      {
        internalType: "int24",
        name: "tickSpacing",
        type: "int24",
      },
    ],
    name: "roundTick",
    outputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x611b6661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061009d5760003560e01c806337a614211161007057806337a614211461012d57806341533fe71461015a5780636e96fa7a1461017b578063a36b91681461018e578063b45082e2146101a157600080fd5b8063055d1548146100a25780630b7cb7c1146100cf578063207b0576146100ef57806334dc54581461011a575b600080fd5b6100b56100b036600461162e565b6101c7565b604080519283526020830191909152015b60405180910390f35b6100e26100dd3660046116a7565b610418565b6040516100c6919061170b565b6101026100fd36600461179f565b610945565b6040516001600160a01b0390911681526020016100c6565b6100e26101283660046117db565b6109ad565b61014061013b366004611820565b610a3a565b60408051600293840b81529190920b6020820152016100c6565b61016d610168366004611855565b610b21565b6040519081526020016100c6565b61016d6101893660046118aa565b610c69565b61016d61019c366004611919565b610c93565b6101b46101af366004611972565b610d0a565b60405160029190910b81526020016100c6565b60008060005b875181101561040d5760006102118983815181106101ed576101ed61199e565b6020026020010151602001516001600160801b031689670de0b6b3a7640000610d7b565b90508560020b8983815181106102295761022961199e565b60200260200101516000015160020b1315801561027357508560020b878a84815181106102585761025861199e565b60200260200101516000015161026e91906119ca565b60020b135b1561030a5760006102b5866102af8a8d87815181106102945761029461199e565b6020026020010151600001516102aa91906119ca565b610e59565b8461117c565b905060006102e96102e28c86815181106102d1576102d161199e565b602002602001015160000151610e59565b88856111c1565b90506102f582876119ef565b955061030181866119ef565b945050506103fa565b61031686600189610d0a565b60020b89838151811061032b5761032b61199e565b60200260200101516000015160020b13610384576103736103578a84815181106102d1576102d161199e565b61036d898c86815181106102945761029461199e565b836111c1565b61037d90846119ef565b92506103fa565b61039086600089610d0a565b60020b8983815181106103a5576103a561199e565b60200260200101516000015160020b126103fa576103ed6103d18a84815181106102d1576102d161199e565b6103e7898c86815181106102945761029461199e565b8361117c565b6103f790856119ef565b93505b508061040581611a02565b9150506101cd565b509550959350505050565b606060008251845161042a91906119ef565b67ffffffffffffffff811115610442576104426114ac565b60405190808252806020026020018201604052801561047b57816020015b61046861146a565b8152602001906001900390816104605790505b5084519091506000805b86518110156104e6578681815181106104a0576104a061199e565b60200260200101518482815181106104ba576104ba61199e565b602002602001018190525081806104d090611a02565b92505080806104de90611a02565b915050610485565b5060005b855181101561084b576000805b88518110156107e1578581815181106105125761051261199e565b60200260200101516000015160020b8884815181106105335761053361199e565b60200260200101516000015160020b036107cf576040518060c001604052808783815181106105645761056461199e565b60200260200101516000015160020b815260200189858151811061058a5761058a61199e565b6020026020010151602001518884815181106105a8576105a861199e565b6020026020010151602001516105be9190611a1b565b6001600160801b03168152602001600081526020018783815181106105e5576105e561199e565b60200260200101516060015181526020018783815181106106085761060861199e565b602002602001015160800151815260200187838151811061062b5761062b61199e565b602002602001015160a0015181525086828151811061064c5761064c61199e565b60200260200101819052508783815181106106695761066961199e565b6020026020010151606001518682815181106106875761068761199e565b602002602001015160600151146106d35760405162461bcd60e51b815260206004820152600b60248201526a06d657267656d61746368360ac1b60448201526064015b60405180910390fd5b8783815181106106e5576106e561199e565b6020026020010151608001518682815181106107035761070361199e565b6020026020010151608001511461074a5760405162461bcd60e51b815260206004820152600b60248201526a6d657267656d617463683160a81b60448201526064016106ca565b87838151811061075c5761075c61199e565b602002602001015160a0015186828151811061077a5761077a61199e565b602002602001015160a00151146107c65760405162461bcd60e51b815260206004820152601060248201526f0dacae4cecadac2e8c6d0cee4deeee8d60831b60448201526064016106ca565b600191506107e1565b806107d981611a02565b9150506104f7565b5080610838578682815181106107f9576107f961199e565b602002602001015185858461080e91906119ef565b8151811061081e5761081e61199e565b6020026020010181905250828061083490611a02565b9350505b508061084381611a02565b9150506104ea565b5060008167ffffffffffffffff811115610867576108676114ac565b6040519080825280602002602001820160405280156108a057816020015b61088d61146a565b8152602001906001900390816108855790505b5090506000805b8551811015610936578581815181106108c2576108c261199e565b6020026020010151602001516001600160801b0316600014610924578581815181106108f0576108f061199e565b602002602001015183838151811061090a5761090a61199e565b6020026020010181905250818061092090611a02565b9250505b8061092e81611a02565b9150506108a7565b50909450505050505b92915050565b6000816109525782610965565b610965670de0b6b3a76400008085610d7b565b9250600061098084600160601b670de0b6b3a7640000610d7b565b90506109a261099d866001600160a01b031683600160601b610d7b565b6111f0565b9150505b9392505050565b606060005b8351811015610a32576109f48482815181106109d0576109d061199e565b6020026020010151602001516001600160801b031684670de0b6b3a7640000610d7b565b848281518110610a0657610a0661199e565b6020908102919091018101516001600160801b0390921691015280610a2a81611a02565b9150506109b2565b509192915050565b60008082600081518110610a5057610a5061199e565b602090810291909101015151915081905060015b8351811015610b1b578260020b848281518110610a8357610a8361199e565b60200260200101516000015160020b1215610abd57838181518110610aaa57610aaa61199e565b6020026020010151600001519250610b09565b8160020b848281518110610ad357610ad361199e565b60200260200101516000015160020b1315610b0957838181518110610afa57610afa61199e565b60200260200101516000015191505b80610b1381611a02565b915050610a64565b50915091565b6000805b8451811015610c6157848181518110610b4057610b4061199e565b6020026020010151602001516001600160801b031660000315610c4f578315610be857610bce610b7b8683815181106102d1576102d161199e565b610b91858885815181106102945761029461199e565b610bc0888581518110610ba657610ba661199e565b6020026020010151602001516001600160801b031661123e565b610bc990611a42565b61117c565b610bd790611a71565b610be190836119ef565b9150610c4f565b610c39610c008683815181106102d1576102d161199e565b610c16858885815181106102945761029461199e565b610c2b888581518110610ba657610ba661199e565b610c3490611a42565b6111c1565b610c4290611a71565b610c4c90836119ef565b91505b80610c5981611a02565b915050610b25565b509392505050565b6000806000610c7787610a3a565b91509150610c888686838588610c93565b979650505050505050565b600085610ca8578260020b8560020b12610cbc565b610cb282856119ca565b60020b8560020b12155b15610cc957506001610d01565b85610ce657610cd882856119ca565b60020b8560020b1215610cf0565b8260020b8560020b125b15610cfd57506002610d01565b5060035b95945050505050565b600080610d178386611aa3565b905060008560020b1315610d575783610d455782610d368260016119ca565b610d409190611aeb565b610d4f565b610d4f8382611aeb565b9150506109a6565b83610d6657610d408382611aeb565b82610d718183611aeb565b610d4f9190611b0b565b6000808060001985870985870292508281108382030391505080600003610db45760008411610da957600080fd5b5082900490506109a6565b808411610dec5760405162461bcd60e51b815260206004820152600660248201526536bab62234bb60d11b60448201526064016106ca565b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b60008060008360020b12610e70578260020b610e78565b8260020b6000035b9050620d89e8811115610e9e576040516315e4079d60e11b815260040160405180910390fd5b600081600116600003610eb557600160801b610ec7565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615610efb576ffff97272373d413259a46990580e213a0260801c5b6004821615610f1a576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610f39576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615610f58576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615610f77576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615610f96576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615610fb5576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615610fd5576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615610ff5576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611015576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611035576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611055576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611075576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611095576f70d869a156d2a1b890bb3df62baf32f70260801c5b6180008216156110b5576f31be135f97d08fd981231505542fcfa60260801c5b620100008216156110d6576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b620200008216156110f6576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611115576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611132576b048a170391f7dc42444e8fa20260801c5b60008460020b131561115357806000198161114f5761114f611a8d565b0490505b64010000000081061561116757600161116a565b60005b60ff16602082901c0192505050919050565b60008082600f0b126111a25761119d611198858585600161127e565b611333565b6111b9565b6111b5611198858585600003600061127e565b6000035b949350505050565b60008082600f0b126111dd5761119d6111988585856001611380565b6111b56111988585856000036000611380565b806001600160a01b03811681146112395760405162461bcd60e51b815260206004820152600d60248201526c31b0b9ba34b7339032b93937b960991b60448201526064016106ca565b919050565b80600f81900b81146112395760405162461bcd60e51b81526020600482015260096024820152681cd859994818d85cdd60ba1b60448201526064016106ca565b6000836001600160a01b0316856001600160a01b0316111561129e579293925b6fffffffffffffffffffffffffffffffff60601b606084901b166001600160a01b0386860381169087166112d157600080fd5b8361130757866001600160a01b03166112f48383896001600160a01b03166113f0565b8161130157611301611a8d565b04610c88565b610c8861131e8383896001600160a01b031661142a565b886001600160a01b0316808204910615150190565b6000600160ff1b821061137c5760405162461bcd60e51b8152602060048201526011602482015270191a9b1031b0b9ba34b7339032b93937b960791b60448201526064016106ca565b5090565b6000836001600160a01b0316856001600160a01b031611156113a0579293925b816113cd576113c8836001600160801b03168686036001600160a01b0316600160601b6113f0565b610d01565b610d01836001600160801b03168686036001600160a01b0316600160601b61142a565b600080806000198587098587029250828110838203039150508060000361141e5760008411610da957600080fd5b808411610dec57600080fd5b60006114378484846113f0565b90506000828061144957611449611a8d565b84860911156109a657600019811061146057600080fd5b6001019392505050565b6040518060c00160405280600060020b815260200160006001600160801b03168152602001600081526020016000815260200160008152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156114e5576114e56114ac565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611514576115146114ac565b604052919050565b8035600281900b811461123957600080fd5b600082601f83011261153f57600080fd5b8135602067ffffffffffffffff82111561155b5761155b6114ac565b611569818360051b016114eb565b82815260c0928302850182019282820191908785111561158857600080fd5b8387015b8581101561160a5781818a0312156115a45760008081fd5b6115ac6114c2565b6115b58261151c565b8152858201356001600160801b03811681146115d15760008081fd5b8187015260408281013590820152606080830135908201526080808301359082015260a08083013590820152845292840192810161158c565b5090979650505050505050565b80356001600160a01b038116811461123957600080fd5b600080600080600060a0868803121561164657600080fd5b853567ffffffffffffffff81111561165d57600080fd5b6116698882890161152e565b9550506020860135935061167f6040870161151c565b925061168d6060870161151c565b915061169b60808701611617565b90509295509295909350565b600080604083850312156116ba57600080fd5b823567ffffffffffffffff808211156116d257600080fd5b6116de8683870161152e565b935060208501359150808211156116f457600080fd5b506117018582860161152e565b9150509250929050565b602080825282518282018190526000919060409081850190868401855b82811015611782578151805160020b8552868101516001600160801b0316878601528581015186860152606080820151908601526080808201519086015260a0908101519085015260c09093019290850190600101611728565b5091979650505050505050565b8035801515811461123957600080fd5b6000806000606084860312156117b457600080fd5b6117bd84611617565b9250602084013591506117d26040850161178f565b90509250925092565b600080604083850312156117ee57600080fd5b823567ffffffffffffffff81111561180557600080fd5b6118118582860161152e565b95602094909401359450505050565b60006020828403121561183257600080fd5b813567ffffffffffffffff81111561184957600080fd5b6111b98482850161152e565b60008060006060848603121561186a57600080fd5b833567ffffffffffffffff81111561188157600080fd5b61188d8682870161152e565b93505061189c6020850161178f565b91506117d26040850161151c565b600080600080608085870312156118c057600080fd5b843567ffffffffffffffff8111156118d757600080fd5b6118e38782880161152e565b9450506118f26020860161178f565b92506119006040860161151c565b915061190e6060860161151c565b905092959194509250565b600080600080600060a0868803121561193157600080fd5b61193a8661178f565b94506119486020870161151c565b93506119566040870161151c565b92506119646060870161151c565b915061169b6080870161151c565b60008060006060848603121561198757600080fd5b6119908461151c565b925061189c6020850161178f565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600281810b9083900b01627fffff8113627fffff198212171561093f5761093f6119b4565b8082018082111561093f5761093f6119b4565b600060018201611a1457611a146119b4565b5060010190565b6001600160801b03818116838216019080821115611a3b57611a3b6119b4565b5092915050565b600081600f0b6f7fffffffffffffffffffffffffffffff198103611a6857611a686119b4565b60000392915050565b6000600160ff1b8201611a8657611a866119b4565b5060000390565b634e487b7160e01b600052601260045260246000fd5b60008160020b8360020b80611ac857634e487b7160e01b600052601260045260246000fd5b627fffff19821460001982141615611ae257611ae26119b4565b90059392505050565b60008260020b8260020b028060020b9150808214611a3b57611a3b6119b4565b600282810b9082900b03627fffff198112627fffff8213171561093f5761093f6119b456fea2646970667358221220209b6c5e064b3c6927912168fccd8760e9c2b01bdbb9d4bb067fe3342d8f181d64736f6c63430008120033";

type UtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Utils__factory extends ContractFactory {
  constructor(...args: UtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Utils> {
    return super.deploy(overrides || {}) as Promise<Utils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Utils {
    return super.attach(address) as Utils;
  }
  override connect(signer: Signer): Utils__factory {
    return super.connect(signer) as Utils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UtilsInterface {
    return new utils.Interface(_abi) as UtilsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Utils {
    return new Contract(address, _abi, signerOrProvider) as Utils;
  }
}
